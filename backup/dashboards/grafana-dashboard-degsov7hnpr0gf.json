{
  "meta": {
    "type": "db",
    "canSave": true,
    "canEdit": true,
    "canAdmin": true,
    "canStar": true,
    "canDelete": true,
    "slug": "podcast-ndr",
    "url": "/d/degsov7hnpr0gf/podcast-ndr",
    "expires": "0001-01-01T00:00:00Z",
    "created": "2025-03-24T10:20:58Z",
    "updated": "2025-05-08T11:27:12Z",
    "updatedBy": "bernd kuch dev",
    "createdBy": "chams khoury dev",
    "version": 58,
    "hasAcl": false,
    "isFolder": false,
    "folderId": 1184,
    "folderUid": "folder-eBWFQqAIz",
    "folderTitle": "Podcast",
    "folderUrl": "/dashboards/f/folder-eBWFQqAIz/podcast",
    "provisioned": false,
    "provisionedExternalId": "",
    "annotationsPermissions": {
      "dashboard": {
        "canAdd": true,
        "canEdit": true,
        "canDelete": true
      },
      "organization": {
        "canAdd": true,
        "canEdit": true,
        "canDelete": true
      }
    }
  },
  "dashboard": {
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": {
            "type": "grafana",
            "uid": "-- Grafana --"
          },
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "target": {
            "limit": 100,
            "matchAny": false,
            "tags": [],
            "type": "dashboard"
          },
          "type": "dashboard"
        }
      ]
    },
    "description": "New Version, 2.0 (Abfragen Optimieren)",
    "editable": true,
    "fiscalYearStartMonth": 0,
    "graphTooltip": 0,
    "id": 1657,
    "links": [],
    "panels": [
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 24,
          "x": 0,
          "y": 0
        },
        "id": 79,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"background-color:rgba(38, 113, 198); color: white; text-align: center; vertical-align: middle; padding: 20px 0; margin-top: 0px; font-size: 15pt;\">\n  <font color=\"#FFFFFF\" size=\"5\">Servicemeldung:</font> <br>\n  <font color=\"#FFFFFF\" size=\"3\">\n    Informationen zu Auff√§lligkeiten und Datenproblemen dokumentieren wir bei uns im Audio-Blog: \n    <a href=\"https://ndr.coyocloud.com/pages/medienforschung-hoerfunk/apps/blog/blog\" style=\"color: white;\">LINK</a> <br>\n  </font>\n</div>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 1,
          "w": 1,
          "x": 12,
          "y": 4
        },
        "id": 103,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img \n  src=\"${src_url}\" \n  alt=\"Tracking Pixel\" \n  width=\"1\" \n  height=\"1\" \n  style=\"display:none;\"\n/>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 11,
          "x": 13,
          "y": 4
        },
        "id": 74,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": " ${hinweis}",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 6
        },
        "id": 61,
        "panels": [],
        "title": "",
        "type": "row"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 5,
          "w": 3,
          "x": 0,
          "y": 7
        },
        "id": 17,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "\n\n<img width=\"160\" height=\"auto\" src=\"$Image\n\" />\n\n<!-- src=${Image} />",
          "mode": "html"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#f5f5f5",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 15,
          "x": 3,
          "y": 7
        },
        "id": 64,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", GREATEST(0,$filled_size_headline - CHAR_LENGTH('$Podcast_title'))), '$Podcast_title'), \nFROM(\nSELECT '$Podcast_title' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#f5f5f5",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 6,
          "x": 18,
          "y": 7
        },
        "id": 37,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", GREATEST($filled_size_headline_small - CHAR_LENGTH('QApps'),0)), 'Apps')\nFROM(\nSELECT 'Apps' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Zugriffe gesamt im Analysezeitraum",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#1250B0",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "‚Äì",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "‚àë Interaktionen"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 8,
          "w": 4,
          "x": 3,
          "y": 9
        },
        "id": 15,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"))FROM\n(\n  SELECT \n    SUM(m_zugriffe_1) AS summe \n  FROM \n    $episode_dataset\n  WHERE \n    broadcast_id IN ($podcast_ids)\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "dark-blue",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "‚Äì",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "‚àë Interaktionen"
                },
                {
                  "id": "unit",
                  "value": "locale"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 3,
          "w": 4,
          "x": 7,
          "y": 9
        },
        "id": 18,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 17,
            "valueSize": 27
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(ROUND(summe,0) as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"))FROM\n(\n  SELECT\n    SUM(m_zugriffe_1) AS summe,\n  FROM \n    $episode_dataset as ed\n  LEFT JOIN \n    $profiles_dataset AS pd\n  USING(podcast_title)\n  LEFT JOIN \n    Piano.NDR_podcast_episode_publication_dates \n  USING (headline)\n  WHERE \n    ed.broadcast_id IN ($podcast_ids)\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n    AND $episodenschnitt_condition\n    AND DATE(publication_date_6) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "includeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe neue Episoden",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Nutzungsverteilung im Nutzungszeitraum neu ver√∂ffentlichter\nEpisoden vs. √§lterer Episoden (Longtail) an Zugriffen gesamt.",
        "fieldConfig": {
          "defaults": {},
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Longtail"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "neue Episoden"
              },
              "properties": []
            },
            {
              "__systemRef": "hideSeriesFrom",
              "matcher": {
                "id": "byNames",
                "options": {
                  "mode": "exclude",
                  "names": [
                    "summe",
                    "neue Episoden"
                  ],
                  "prefix": "All except:",
                  "readOnly": true
                }
              },
              "properties": []
            }
          ]
        },
        "gridPos": {
          "h": 6,
          "w": 7,
          "x": 11,
          "y": 9
        },
        "id": 94,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const series_with_total = context.panel.data.series.map((s) => {\n  const new_episode = s.fields.find((f) => f.name === 'new_episode_sum').values[0];\n  const longtail = s.fields.find((f) => f.name === 'longtail_sum').values[0];\n\n  // Wenn beide Werte 0 sind, wird \"-\" gesetzt\n  const new_episode_value = (new_episode === 0 && longtail === 0) ? \"-\" : new_episode;\n  const longtail_value = (new_episode === 0 && longtail === 0) ? \"-\" : longtail;\n\n  return [\n    {\n      name: \"Neue Episoden\",\n      value: new_episode_value,\n      itemStyle: { color: 'rgb(31, 96, 196)' }\n    },\n    {\n      name: \"Longtail\",\n      value: longtail_value,\n      itemStyle: { color: 'rgb(166, 166, 166)' }\n    }\n  ];\n});\n\nconst series_without_total = context.panel.data.series.map((s) => {\n  const new_episode = s.fields.find((f) => f.name === 'new_episode_sum').values[0];\n  const longtail = s.fields.find((f) => f.name === 'longtail_sum').values[0];\n\n  const new_episode_value = (new_episode === 0 && longtail === 0) ? \"-\" : new_episode;\n  const longtail_value = (new_episode === 0 && longtail === 0) ? \"-\" : longtail;\n\n  return [\n    {\n      name: \"Neue Episoden\",\n      value: new_episode_value,\n      itemStyle: { color: 'rgb(31, 96, 196)' }\n    },\n    {\n      name: \"Longtail\",\n      value: longtail_value,\n      itemStyle: { color: 'rgb(166, 166, 166)' }\n    }\n  ];\n});\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  context.grafana.locationService.partial({ from: startValue, to: endValue });\n});\n\n// Berechnung des Gesamtwertes unter Ber√ºcksichtigung von \"-\"\nconst totalValue = series_without_total.flat().reduce((acc, item) => {\n  return item.value !== \"-\" ? acc + item.value : acc;\n}, 0);\n\nvar option = {\n  tooltip: {\n    trigger: 'item',\n    formatter: function (params) {\n      if (params.value === \"-\") {\n        return `<b>${params.name}</b>: -`;\n      }\n      let formattedValue = new Intl.NumberFormat('de-DE').format(params.value);\n      return `<b>${params.name}</b>:  ${formattedValue}`;\n    }\n  },\n  legend: {\n    orient: 'vertical',\n    left: 'left',\n    top: '10%',\n    formatter: function (name) {\n      let item = series_with_total.flat().find(item => item.name === name);\n      if (!item) return name;\n\n      let formattedValue = item.value === \"-\" ? \"-\" : new Intl.NumberFormat('de-DE').format(item.value);\n\n      // Berechnung der Prozentzahl nur wenn der Wert nicht \"-\"\n      const percentage = (item.value !== \"-\" && totalValue !== 0)\n        ? ((item.value / 1) * 1).toFixed(0)\n        : \"-\";\n      formattedValue = percentage === \"-\" ? \"-\" : new Intl.NumberFormat('de-DE').format(percentage)\n\n\n      return `{b|${item.name}:} {c|${formattedValue}}`;\n    },\n    textStyle: {\n      rich: {\n        b: {\n          fontWeight: 'bold'\n        },\n        c: {\n          fontSize: 12,\n          //color: '#ccc'  // Styling f√ºr die Prozentanzeige\n        }\n      }\n    }\n  },\n  toolbox: {},\n  series: {\n    type: 'pie',\n    data: series_without_total.flat(), // Flatten die Datenreihe\n    radius: [0, '99%'],\n    top: '5%',\n    left: '25%',\n    right: '0%',\n    bottom: '5%',\n    label: {\n      show: true,\n      rotate: 'radial',\n      position: 'inside',\n      formatter: function (params) {\n        if (params.value === \"-\") {\n          return \"-\";\n        }\n        let formattedValue = params.value === \"-\" ? \"-\" : new Intl.NumberFormat('de-DE').format(params.value);\n\n        // Berechnung der Prozentzahl nur wenn der Wert nicht \"-\"\n        const percentage = (params.value !== \"-\" && totalValue !== 0)\n          ? ((params.value / totalValue) * 100).toFixed(0) + \"%\"\n          : \"-\";\n\n        return percentage;\n      },\n      fontSize: 14\n    }\n  }\n};\n\nreturn option;\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT\n  SUM(CASE WHEN DATE(publication_date_6) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\") THEN m_zugriffe_1 ELSE 0 END) AS new_episode_sum,\n  SUM(CASE WHEN DATE(publication_date_6) NOT BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\") THEN m_zugriffe_1 ELSE 0 END) AS longtail_sum,\nFROM \n  $episode_dataset as ed\nLEFT JOIN \n  $profiles_dataset AS pd\nUSING(podcast_title)\nLEFT JOIN \n  Piano.NDR_podcast_episode_publication_dates \nUSING (headline)\nWHERE \n  ed.broadcast_id IN ($podcast_ids)\n  AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n  AND $episodenschnitt_condition",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#5794F2",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 2,
          "x": 18,
          "y": 9
        },
        "id": 20,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH('ARD Audiothek')), 'ARD Audiothek')\nFROM(\nSELECT 'ARD Audiothek' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Spotify-Daten ab 01.01.2021 verf√ºgbar (ab August 2023 auf Basis von Serverlogfiles, f√ºr √§ltere Zeitr√§ume auf Basis von Streams ab 60 Sekunden)",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "green",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 2,
          "x": 20,
          "y": 9
        },
        "id": 21,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH('Spotify')), 'Spotify')\nFROM(\nSELECT 'Spotify' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "purple",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 2,
          "x": 22,
          "y": 9
        },
        "id": 22,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", GREATEST(0,$filled_size - CHAR_LENGTH('Apple Podcasts'))), 'Apple Podcasts')\nFROM(\nSELECT 'Apple Podcasts' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#5794F2",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "‚Äì",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "‚àë Interaktionen"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 3,
          "w": 2,
          "x": 18,
          "y": 11
        },
        "id": 23,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\")) FROM \n(\nSELECT\n    SUM(m_zugriffe_1) AS summe\nFROM \n    $platform_dataset\nWHERE\n    broadcast_id IN ($podcast_ids)\n    AND platform = \"ARD Audiothek\" \n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe App",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "green",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "‚Äì",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "‚àë Interaktionen"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 3,
          "w": 2,
          "x": 20,
          "y": 11
        },
        "id": 26,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\")) FROM \n(\nSELECT\n    SUM(m_zugriffe_1) AS summe\nFROM \n    $platform_dataset\nWHERE\n    broadcast_id IN ($podcast_ids)\n    AND platform = \"Spotify\" \n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe App",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "purple",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "‚Äì",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "‚àë Interaktionen"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 3,
          "w": 2,
          "x": 22,
          "y": 11
        },
        "id": 27,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\")) FROM \n(\nSELECT\n    SUM(m_zugriffe_1) AS summe\nFROM \n    $platform_dataset\nWHERE\n    broadcast_id IN ($podcast_ids)\n    AND platform = \"Apple Podcasts\" \n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe App",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 3,
          "x": 0,
          "y": 12
        },
        "id": 51,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "Letztes Update: <br> \r\n${lastUpdate}\r\n<br> <br> \r\nDatenstand: <br> \r\n01.01.2021 ‚Äì ${datenstand}",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Durchschnitt pro Episode f√ºr die im ausgew√§hlten Analysezeitraum ver√∂ffentlichten Episoden.",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "dark-blue",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "‚Äì",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "‚àë Interaktionen"
                },
                {
                  "id": "unit",
                  "value": "locale"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 3,
          "w": 4,
          "x": 7,
          "y": 12
        },
        "id": 93,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "valueSize": 27
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(ROUND(summe,0) as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"))FROM\n(\n  SELECT\n    SUM(m_zugriffe_1)/COUNT(DISTINCT headline) AS summe,\n  FROM \n    $episode_dataset as ed\n  LEFT JOIN \n    $profiles_dataset AS pd\n  USING(podcast_title)\n  LEFT JOIN \n    Piano.NDR_podcast_episode_publication_dates \n  USING (headline)\n  WHERE \n    ed.broadcast_id IN ($podcast_ids)\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n    AND $episodenschnitt_condition\n    AND DATE(publication_date_6) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "includeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "√ò neue Episoden",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Zugriffe √ºber ausgew√§hlte Apps auf Basis von User Agents. Im Vergleich zu den eigenen Metriken der jeweiligen Plattform-Anbieter kann es aufgrund verschiedener Messmethoden zu Abweichungen kommen.",
        "fieldConfig": {
          "defaults": {},
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "ARD Audiothek"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "AntennaPod"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Podcast & Radio Addict"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "TuneIn"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Juice"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Stagefright"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "gPodder"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Player FM"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Player FM"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Pocket Casts"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Overcast"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Castbox"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Amazon Alexa"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "iTunes"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Podbean"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "other"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Spotify"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "AndroidDownloadManager"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Apple Podcasts"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Deezer"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "RTL+ Music"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Google Podcasts"
              },
              "properties": []
            },
            {
              "__systemRef": "hideSeriesFrom",
              "matcher": {
                "id": "byNames",
                "options": {
                  "mode": "exclude",
                  "names": [
                    "summe",
                    "Apple Podcasts"
                  ],
                  "prefix": "All except:",
                  "readOnly": true
                }
              },
              "properties": []
            }
          ]
        },
        "gridPos": {
          "h": 9,
          "w": 6,
          "x": 18,
          "y": 14
        },
        "id": 33,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const platformColorMapping = [\n  { platform: \"ARD Audiothek\", color: \"#2873ED\" },\n  { platform: \"AntennaPod\", color: \"#3F51B5\" },\n  { platform: \"Podcast & Radio Addict\", color: \"#00BCD4\" },\n  { platform: \"TuneIn\", color: \"#2196F3\" },\n  { platform: \"Juice\", color: \"#E91E63\" },\n  { platform: \"Stagefright\", color: \"#607D8B\" },\n  { platform: \"gPodder\", color: \"#FFC107\" },\n  { platform: \"Player FM\", color: \"#4CAF50\" },\n  { platform: \"Pocket Casts\", color: \"#FF5722\" },\n  { platform: \"Overcast\", color: \"#FFEB3B\" },\n  { platform: \"Castbox\", color: \"#673AB7\" },\n  { platform: \"Amazon Alexa\", color: \"#FFA000\" },\n  { platform: \"iTunes\", color: \"#D63384\" },\n  { platform: \"Podbean\", color: \"#8BC34A\" },\n  { platform: \"other\", color: \"#9E9E9E\" },\n  { platform: \"Spotify\", color: \"#59A94D\" },\n  { platform: \"AndroidDownloadManager\", color: \"#D32F2F\" },\n  { platform: \"Apple Podcasts\", color: \"#A64DCC\" },\n  { platform: \"Deezer\", color: \"#a30101\" },\n  { platform: \"RTL+\", color: \"#b8c600\" },\n  { platform: \"Google Podcasts\", color: \"#02f0de\" },\n  { platform: \"AmazonMusic\", color: \"#1B5E20\" },\n  { platform: \"Downcast\", color: \"#736614\" },\n  { platform: \"NDR Apps\", color: \"#00695C\" }\n];\n\nconst series = context.panel.data.series.map((s) => {\n  const platform = s.fields.find((f) => f.name === 'platform').values.buffer || s.fields.find((f) => f.name === 'platform').values;\n  const summe = s.fields.find((f) => f.name === 'summe').values.buffer || s.fields.find((f) => f.name === 'summe').values;\n\n  // Calculate the total sum of all values\n  const totalSum = summe.reduce((total, currentValue) => total + currentValue, 0);\n\n  const data = platform.map((p, i) => {\n    const platformColor = platformColorMapping.find((mapping) => mapping.platform === p)?.color || '#9E9E9E';\n    const percentage = (summe[i] / totalSum) * 100;  // Calculate the percentage for each platform\n\n    return {\n      name: p,\n      value: summe[i],\n      percentage: percentage, // Add the percentage to each item\n      itemStyle: {\n        color: platformColor,\n      },\n    };\n  });\n\n  // Sort the data based on 'value' (summe) in descending order\n  const sortedData = data.sort((a, b) => b.value - a.value);\n\n  return {\n    name: \"\",\n    type: 'pie',\n    left: '55%',\n    radius: '99%',\n    data: sortedData,\n    label: {\n      show: false\n    }\n  };\n});\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  locationService.partial({ from: startValue, to: endValue });\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'item',\n    formatter: function (params) {\n      // Create a number formatter for German locale\n      const numberFormat = new Intl.NumberFormat('de-DE');\n\n      // Format the value and percentage\n      const valueFormatted = numberFormat.format(params.value);\n      return `${params.name}: ${valueFormatted}`;\n    },\n    textStyle: {\n      rich: {\n        b: {\n          fontWeight: 'bold'\n        },\n        c: {\n          fontSize: 12,\n          color: '#ccc'  // Styling for the percentage part in legend\n        }\n      }\n    }\n  },\n  legend: {\n    type: 'scroll',  // Enable scrollbar\n    orient: 'vertical',  // Align legend in a vertical list\n    left: 'left',  // Position legend on the right side\n    top: '10%',  // Center the legend vertically\n    itemGap: 10,  // Adjust spacing between legend items\n    textStyle: {\n      color: 'rgba(128, 128, 128, .9)'\n    },\n    pageIconColor: '#999',  // Scroll button color\n    pageIconInactiveColor: '#555',  // Disabled button color\n    pageTextStyle: {\n      color: '#ddd',\n    },\n    // Use the sorted order of names for the legend\n    data: series[0]?.data.map((item) => item.name),\n    formatter: function (name) {\n      const item = series[0].data.find((d) => d.name === name);\n\n      // Create a number formatter for German locale\n      const numberFormat = new Intl.NumberFormat('de-DE');\n\n      return `{b|${name}:}  {c|${item.percentage.toFixed(0)}%}`;  // Display the percentage with two decimal places\n    },\n    textStyle: {\n      rich: {\n        b: {\n          fontWeight: 'bold'\n        },\n        c: {\n          fontSize: 12,\n          //color: '#ccc'  // Styling for the percentage part in legend\n        }\n      }\n    }\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {},\n    },\n  },\n  series,\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT\n    SUM(m_zugriffe_1) AS summe,\n    platform\nFROM \n    $platform_dataset\nWHERE\n    broadcast_id IN ($podcast_ids)\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY platform",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "dark-blue",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "‚Äì",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "‚àë Interaktionen"
                },
                {
                  "id": "unit",
                  "value": "locale"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 2,
          "w": 2,
          "x": 7,
          "y": 15
        },
        "id": 82,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 12,
            "valueSize": 27
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(ROUND(summe,0) as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"))FROM\n(\n  SELECT\n    COUNT(DISTINCT headline) AS summe,\n  FROM \n    $episode_dataset as ed\n  LEFT JOIN \n    $profiles_dataset AS pd\n  USING(podcast_title)\n  LEFT JOIN \n    Piano.NDR_podcast_episode_publication_dates \n  USING (headline)\n  WHERE \n    ed.broadcast_id IN ($podcast_ids)\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n    AND $episodenschnitt_condition\n    AND DATE(publication_date_6) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "includeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Anzahl neuer Episoden",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Nutzungsanteil der im Analysezeitraum neu ver√∂ffentlichten Episoden an den gesamten Zugriffen.",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "dark-blue",
              "mode": "fixed"
            },
            "mappings": [],
            "noValue": "‚Äì",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "summe"
              },
              "properties": [
                {
                  "id": "unit",
                  "value": "percent"
                },
                {
                  "id": "decimals",
                  "value": 0
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 2,
          "w": 2,
          "x": 9,
          "y": 15
        },
        "id": 99,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 12,
            "valueSize": 27
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(ROUND(summe,0) as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"), \"%\")FROM\n(\n  SELECT\n    (SUM(CASE WHEN DATE(publication_date_6) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\") THEN m_zugriffe_1 ELSE 0 END)/SUM(m_zugriffe_1)) * 100 AS summe,\n  FROM \n    $episode_dataset as ed\n  LEFT JOIN \n    $profiles_dataset AS pd\n  USING(podcast_title)\n  LEFT JOIN \n    Piano.NDR_podcast_episode_publication_dates \n  USING (headline)\n  WHERE \n    ed.broadcast_id IN ($podcast_ids)\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n    AND $episodenschnitt_condition\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "includeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Anteil Zugriffe neuer Episoden",
                "page_impressions_unique": "Potentielle Reichweite",
                "summe": "Anteil Zugriffe neuer Episoden"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Durchschnitt pro Episode f√ºr die im ausgew√§hlten Analysezeitraum neu ver√∂ffentlichten Episoden nach X Tagen. ACHTUNG: Die Stichprobe der Episoden variiert je nach betrachtetem Zeitintervall. So ist unter Umst√§nden auch ein kleinerer Wert f√ºr 56 Tage als f√ºr 28 Tage m√∂glich. F√ºr robuste Ergebnisse bitte einen m√∂glichst langen Analysezeitraum w√§hlen.",
        "fieldConfig": {
          "defaults": {},
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "period"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "value"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Podcast & Radio Addict"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "TuneIn"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Juice"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Stagefright"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "gPodder"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Player FM"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Player FM"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Pocket Casts"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Overcast"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Castbox"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Amazon Alexa"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "iTunes"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Podbean"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "other"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Spotify"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "AndroidDownloadManager"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Apple Podcasts"
              },
              "properties": []
            },
            {
              "__systemRef": "hideSeriesFrom",
              "matcher": {
                "id": "byNames",
                "options": {
                  "mode": "exclude",
                  "names": [
                    "summe"
                  ],
                  "prefix": "All except:",
                  "readOnly": true
                }
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Deezer"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "RTL+ Music"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Google Podcasts"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "period"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "value"
              },
              "properties": []
            }
          ]
        },
        "gridPos": {
          "h": 8,
          "w": 7,
          "x": 11,
          "y": 15
        },
        "id": 102,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const series = context.panel.data.series.map((s) => {\n  // Retrieve the fields for Zeitraum, Wert, and rank\n  const zeitraum = s.fields.find((f) => f.name === 'period').values.buffer || s.fields.find((f) => f.name === 'period').values;\n  const wert = s.fields.find((f) => f.name === 'value').values.buffer || s.fields.find((f) => f.name === 'value').values;\n  const rank = s.fields.find((f) => f.name === 'rank').values.buffer || s.fields.find((f) => f.name === 'rank').values;\n\n  // Create an array of objects with Zeitraum, Wert, and rank\n  const data = zeitraum.map((time, i) => ({\n    Zeitraum: time,\n    Wert: wert[i],\n    rank: rank[i],\n  }));\n\n  // Sort the data based on the rank\n  data.sort((a, b) => a.rank - b.rank);\n\n  return {\n    name: \"Durchschnittliche Zugriffe\",\n    type: 'bar',  // Bar chart type (still a bar chart after flipping)\n    data: data.map((d) => [d.Wert, d.Zeitraum]),  // Swap the data so Wert is on the x-axis\n    itemStyle: {\n      color: 'rgb(31, 96, 196)',  // Optional: Style for the bars\n    },\n    barWidth: '60%',  // Optional: Adjust the width of the bars\n    label: {\n      show: true,  // Show labels\n      position: 'inside',  // Position the label inside the bar\n      formatter: function (params) {\n        // Format the Wert (value) inside the bar in German format\n        return new Intl.NumberFormat('de-DE').format(params.value[0]);  // params.value[0] is the Wert\n      },\n      color: '#fff',  // Optional: Set the label color to white for contrast\n      fontSize: 14,  // Increased font size\n      //fontWeight: 'bold',\n    },\n  };\n});\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  locationService.partial({ from: startValue, to: endValue });\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    formatter: function (params) {\n      let tooltipContent = '';\n      params.forEach(function (param) {\n        // Extract Zeitraum and Wert from param.data\n        const zeitraum = param.data[1]; // Now Zeitraum is the second element (since we've flipped the axes)\n        const wert = param.data[0]; // Wert is the first element\n\n        // Format the Wert (value) in German format (e.g., using commas for thousands)\n        const formattedWert = new Intl.NumberFormat('de-DE').format(wert);\n\n        // Add Zeitraum and Wert to the tooltip content in \"Zeitraum: Wert\" format\n        tooltipContent += `${zeitraum}: ${formattedWert}<br>`;\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    left: '0',\n    bottom: '0',\n    data: context.panel.data.series.map((s) => s.refId),\n    textStyle: {\n      color: 'rgba(128, 128, 128, .9)',\n    },\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    },\n    show: false\n  },\n  xAxis: {\n    type: 'value',  // Now x-axis is the value (Wert)\n    show: false\n  },\n  yAxis: {\n    type: 'category',  // Now y-axis is the category (Zeitraum)\n    data: series[0]?.data.map((item) => item[1]),  // Ensure y-axis uses the Zeitraum values\n    axisLabel: {\n      interval: 0,\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 0,\n    containLabel: true,\n  },\n  series,\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH raw_data AS (\n  -- This is the raw data, including either all episodes or only the selected ones, ensuring their podcasts are included in the average calculation, and the publication date falls within the selected time period\n  SELECT \n    date,\n    headline, \n    SUM(IFNULL(m_zugriffe_1,0)) AS zugriffe,\n    publication_date_6,\n  FROM $episode_dataset AS episode_dataset\n  LEFT JOIN $profiles_dataset AS pd\n  USING(podcast_title)\n  LEFT JOIN Piano.NDR_podcast_episode_publication_dates \n  USING (headline)\n  WHERE \n    (\"$Bereich\" = \"Alle Bereiche\" OR episode_dataset.branding = \"$Bereich\")\n    AND (\"\"\"$Podcast\"\"\" = \"All titles\" OR REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY[$Episode]))\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n    AND publication_date_6 BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n    AND $episodenschnitt_condition \n  GROUP BY date, headline, publication_date_6\n), ranked_episodes AS(\n  -- This step ranks episodes according to their total zugriffe across the entire period\n  SELECT\n    headline,\n    publication_date_6,\n    RANK() OVER(ORDER BY zugriffe DESC) AS rang\n  FROM (\n  SELECT \n    headline,\n    publication_date_6,\n    SUM(zugriffe) AS zugriffe,\n  FROM raw_data\n  GROUP BY headline, publication_date_6\n  )\n), date_range AS (\n  -- Create a full date range to handle cases where episodes have no zugriffe on some days\n  SELECT \n    date \n  FROM UNNEST(GENERATE_DATE_ARRAY(DATE('${__from:date}', \"Europe/Berlin\"), DATE('${__to:date}', \"Europe/Berlin\"))) AS date\n), filtered_date_range AS (\n  -- Join date range with episodes, keeping only dates between publication and max date (to include the 5-day delay) \n  SELECT date, headline, publication_date_6, rang\n  FROM date_range\n  JOIN ranked_episodes\n  ON date >= publication_date_6 AND date <= \"$max_date\"\n), cumulative_sum_ranked_episodes AS (\nSELECT \n  -- Calculate the cumulative sum of zugriffe and the number of days since publication for each episode\n  filtered_date_range.headline, \n  DATE_DIFF(filtered_date_range.date, filtered_date_range.publication_date_6, DAY) + 1 AS days_since_pub,\n  SUM(IFNULL(zugriffe, 0)) OVER (PARTITION BY filtered_date_range.headline ORDER BY filtered_date_range.date) AS summe, \n  \"${type}\" AS type, \n  filtered_date_range.rang\nFROM filtered_date_range\nLEFT JOIN raw_data\nON filtered_date_range.date = raw_data.date AND REPLACE(filtered_date_range.headline, \"'\", \"\") = REPLACE(raw_data.headline, \"'\", \"\")\n), avg_data AS (\n  -- Compute the daily average zugriffe across all episodes for days up to max_day_since_pub\n  SELECT \n    \"Durchschnitt alle neuen Episoden\" AS headline,\n    days_since_pub,\n    AVG(summe) AS summe,\n    \"${type}\" AS type,\n    0 AS rang\n  FROM cumulative_sum_ranked_episodes\n  GROUP BY days_since_pub\n)\nSELECT CONCAT(\"nach \", days_since_pub, \" Tagen\") AS period, ROUND(summe) AS value, days_since_pub AS rank  FROM avg_data\nWHERE days_since_pub IN (7, 14, 28, 56, 91)\nORDER by rank DESC\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "√ò neue Episoden nach Tagen",
        "type": "volkovlabs-echarts-panel"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 0,
          "y": 16
        },
        "id": 75,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "${delay_text}",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#7d7d7d",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 4,
          "x": 3,
          "y": 17
        },
        "id": 56,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", GREATEST($filled_size_headline_small - CHAR_LENGTH('Bereich: $Bereich'),0)), 'Bereich: $Bereich')\nFROM(\nSELECT 'Bereich: $Bereich' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#ffffff",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 4,
          "x": 7,
          "y": 17
        },
        "id": 57,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", GREATEST($filled_size_headline_small - CHAR_LENGTH('Ausgew√§hlte Episoden'),0)), 'Ausgew√§hlte Episoden')\nFROM(\nSELECT 'Ausgew√§hlte Episoden' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Zugriffe gesamt aller Podcast-Reihen im ausgew√§hlten Bereich",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#1F60C4",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "‚Äì",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "‚àë Interaktionen"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 4,
          "w": 4,
          "x": 3,
          "y": 19
        },
        "id": 13,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 27,
            "valueSize": 27
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"))FROM\n(\n  SELECT\n    SUM(m_zugriffe_1) AS summe\n  FROM \n    $episode_dataset\n  WHERE\n    (\"$Bereich\" = \"Alle Bereiche\" OR branding = \"$Bereich\")\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Zugriffe gesamt f√ºr die in der Navigation unter Episode ausgew√§hlten Audios",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "dark-blue",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "‚Äì",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "‚àë Interaktionen"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 4,
          "w": 2,
          "x": 7,
          "y": 19
        },
        "id": 12,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 17,
            "valueSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"))FROM\n(\n  SELECT \n    SUM(m_zugriffe_1) AS summe \n  FROM \n    $episode_dataset\n  WHERE \n    (\"$Bereich\" = \"Alle Bereiche\" OR branding = \"$Bereich\")\n    AND (\"\"\"$Podcast\"\"\" = \"All titles\" OR REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY[$Episode]))\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Durchschnitt pro Episode f√ºr die die in der Navigation unter Episode ausgew√§hlten Audios ",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "dark-blue",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "‚Äì",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "‚àë Interaktionen"
                },
                {
                  "id": "unit",
                  "value": "locale"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 4,
          "w": 2,
          "x": 9,
          "y": 19
        },
        "id": 55,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 17,
            "valueSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"))FROM\n(\n  SELECT \n    SAFE_DIVIDE(SUM(m_zugriffe_1),COUNT(DISTINCT headline)) AS summe \n  FROM \n    $episode_dataset\n  WHERE \n    (\"$Bereich\" = \"Alle Bereiche\" OR branding = \"$Bereich\")\n    AND (\"\"\"$Podcast\"\"\" = \"All titles\" OR REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY[$Episode]))\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "√ò Episode",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 9,
          "w": 24,
          "x": 0,
          "y": 23
        },
        "id": 45,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto",
            "height": 2000
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'zugriffe').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'date').values;\n  const type = s.fields.find((f) => f.name === 'type').values[0];\n  const zugriffe = s.fields.find((f) => f.name === 'zugriffe').values;\n  const ard_sum = s.fields.find((f) => f.name === 'ard_summe').values;\n  const apple_sum = s.fields.find((f) => f.name === 'apple_summe').values;\n  const spotify_sum = s.fields.find((f) => f.name === 'spotify_summe').values;\n  const rest_sum = s.fields.find((f) => f.name === 'rest_summe').values;\n  console.log(\"Date\", timeValues);\n  console.log(\"Type\", type);\n  console.log(\"Zugriffe Gesamt\", zugriffe);\n  console.log(\"ARD Summe\", ard_sum);\n  console.log(\"Apple Summe\", apple_sum);\n  console.log(\"Spotify Summe\", spotify_sum);\n  console.log(\"Rest Summe\", rest_sum);\n\n  if (type === \"bar\") {\n    return [\n      //{\n      //  name: 'Zugriffe',\n      //  type: type,\n      //  stack: 'total',\n      //  smooth: true,\n      // showSymbol: false,\n      //data: zugriffe.map((value, index) => [timeValues[index], value])\n      //},\n      {\n        name: 'ARD Audiothek',\n        type: type,\n        stack: 'total',\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(40, 115, 237)\"\n        },\n        data: ard_sum.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Apple Podcasts',\n        type: type,\n        stack: 'total',\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(166, 77, 204)\"\n        },\n        data: apple_sum.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Spotify',\n        type: type,\n        stack: 'total',\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(89, 169, 77)\"\n        },\n        data: spotify_sum.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Rest',\n        type: type,\n        stack: 'total',\n        label: {\n          show: true,\n          position: 'top',\n          formatter: function (params) {\n            const allSumValue = allSumData[params.dataIndex];\n            let number = Math.floor(allSumValue);\n            let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n            return formattedNumber;\n          }\n        },\n        itemStyle: {\n          color: \"rgb(158, 158, 158)\"\n        },\n        smooth: true,\n        showSymbol: false,\n        data: rest_sum.map((value, index) => [timeValues[index], value])\n      }\n    ]\n  } else {\n    return [\n      {\n        name: 'Zugriffe Gesamt',\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(255,0, 0)\"\n        },\n        data: zugriffe.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'ARD Audiothek',\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(40, 115, 237)\"\n        },\n        data: ard_sum.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Apple Podcasts',\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(166, 77, 204)\"\n        },\n        data: apple_sum.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Spotify',\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(89, 169, 77)\"\n        },\n        data: spotify_sum.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Rest',\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(158, 158, 158)\"\n        },\n        data: rest_sum.map((value, index) => [timeValues[index], value])\n      }\n    ]\n  }\n}).flat();\n\n\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startIndex = params.batch[0]?.startValue;\n  const endIndex = params.batch[0]?.endValue;\n\n  const timeValues = context.panel.data.series[0].fields.find((f) => f.name === 'date').values;\n\n  const startTime = new Date(timeValues[startIndex]).getTime();\n  const endTime = new Date(timeValues[endIndex]).getTime();\n\n  if (!isNaN(startTime) && !isNaN(endTime)) {\n    context.grafana.locationService.partial({ from: startTime, to: endTime });\n  } else {\n    console.error(\"Invalid start or end time:\", { startIndex, endIndex });\n  }\n});\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'none'\n    },\n    formatter: function (params) {\n      let tooltipContent = formatDate(params[0].axisValue) + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einf√ºgen\n        let number = Math.floor(item.data[1]);\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + item.seriesName + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      formatter: function (value) {\n        const date = new Date(value);\n        let day = ('0' + date.getDate()).slice(-2);\n        let month = ('0' + (date.getMonth() + 1)).slice(-2);\n        let year = date.getFullYear();\n        return `${day}.${month}.${year}`;\n      },\n      //showMaxLabel: '20'\n    },\n  },\n  yAxis: {\n    type: 'value',\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "height": 400,
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT\n    date,\n    SUM(CASE WHEN platform = 'ARD Audiothek' THEN m_zugriffe_1 ELSE 0 END) AS ard_summe,\n    SUM(CASE WHEN platform = 'Apple Podcasts' THEN m_zugriffe_1 ELSE 0 END) AS apple_summe,\n    SUM(CASE WHEN platform = 'Spotify' THEN m_zugriffe_1 ELSE 0 END) AS spotify_summe,\n    SUM(CASE WHEN platform NOT IN ('ARD Audiothek', 'Spotify', 'Apple Podcasts') THEN m_zugriffe_1 ELSE 0 END) AS rest_summe,\n    SUM(m_zugriffe_1) as zugriffe,\n    \"${type}\" as type,\n    DATE_DIFF(DATE('${__to:date}', \"Europe/Berlin\"),DATE('${__from:date}', \"Europe/Berlin\"),DAY) + 1 as timeRange\nFROM \n    $platform_dataset\nWHERE\n    broadcast_id IN ($podcast_ids)\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY date\nORDER BY date ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "Zugriffe pro Tag f√ºr \"$Podcast_title\"",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": false,
                "date": false,
                "f0_": false,
                "podcast_title": false,
                "publication_date_1": false,
                "ressource": true,
                "sophora_id": true,
                "tmstp": true,
                "zugriffe": false
              },
              "indexByName": {
                "f0_": 3,
                "f1_": 4,
                "headline": 2,
                "podcast_title": 1,
                "publication_date_2": 0
              },
              "renameByName": {
                "f0_": "",
                "f1_": "Tenchnische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "Datum",
                "technische_nutzer": "Technische Nutzer",
                "zugriffe": "Zugriffe gesamt"
              }
            }
          }
        ],
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 24,
          "x": 0,
          "y": 32
        },
        "id": 42,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto",
            "height": 600
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'zugriffe').values;\n  return allSum;\n})\n\nconst option = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'shadow'\n    },\n    formatter: function (params) {\n      const allSumValue = allSumData[params[0].dataIndex];\n      let formattedNumber = new Intl.NumberFormat('de-DE').format(allSumValue);\n      return `Zugriffe: ${formattedNumber}`;\n    }\n  },\n  //legend: {},\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  yAxis: { // Switched to yAxis\n    type: 'value',\n    axisLabel: {\n      formatter: function (value) {\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n      },\n    }\n  },\n  xAxis: { // Switched to xAxis\n    type: 'category',\n    data: [...new Set(context.panel.data.series.flatMap((s) => {\n      const headlines = s.fields.find((f) => f.name === 'headline').values;\n      return headlines;\n    }))]\n  },\n  series: [\n    {\n      name: 'Zugriffe',\n      type: 'bar',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = Math.floor(allSumValue);\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      itemStyle: {\n        color: \"rgb(31, 96, 196)\"\n      },\n      data: context.panel.data.series.flatMap((s) => {\n        const zugriffe = s.fields.find((f) => f.name === 'zugriffe').values;\n        return zugriffe;\n      })\n    }\n  ]\n};\n\nreturn option;\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "height": 400,
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT\n  headline,\n  SUM(m_zugriffe_1) AS zugriffe,\nFROM $episode_dataset\nWHERE \n  broadcast_id IN ($podcast_ids)\n  AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY headline\nORDER BY zugriffe DESC\nLIMIT 3",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "Top 3 Episoden von \"$Podcast_title\"",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": false,
                "date": false,
                "f0_": false,
                "podcast_title": false,
                "publication_date_1": false,
                "ressource": true,
                "sophora_id": true,
                "tmstp": true
              },
              "indexByName": {
                "f0_": 3,
                "f1_": 4,
                "headline": 2,
                "podcast_title": 1,
                "publication_date_2": 0
              },
              "renameByName": {
                "f0_": "",
                "f1_": "Tenchnische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "Datum",
                "technische_nutzer": "Technische Nutzer",
                "zugriffe": "Zugriffe"
              }
            }
          }
        ],
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 12,
          "x": 0,
          "y": 38
        },
        "id": 97,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/.*/",
            "values": true
          },
          "showPercentChange": false,
          "textMode": "auto",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \" \"",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": " ",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "custom": {
              "thresholdsStyle": {
                "mode": "color",
                "thresholds": []
              }
            },
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 6,
          "x": 12,
          "y": 38
        },
        "id": 96,
        "options": {
          "alwaysVisibleFilter": false,
          "autoScroll": false,
          "collapsedByDefault": false,
          "customValue": true,
          "displayMode": "minimize",
          "emptyValue": false,
          "favorites": {
            "addQuery": {},
            "datasource": "",
            "deleteQuery": {},
            "enabled": false,
            "getQuery": {},
            "storage": "browser"
          },
          "filter": false,
          "groupSelection": false,
          "header": false,
          "isUseLocalTime": false,
          "minimizeOutputFormat": "text",
          "padding": 20,
          "persistent": false,
          "saveSelectedGroup": false,
          "saveSelectedGroupKey": "",
          "showGroupTotal": false,
          "showLabel": true,
          "showName": false,
          "showResetButton": false,
          "showTotal": false,
          "statusSort": false,
          "sticky": false,
          "tabsInOrder": true,
          "variable": "Tage_content_lifetime"
        },
        "pluginVersion": "3.6.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawSql": "",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-variable-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Abgetragen sind die absoluten Zugriffe der jeweiligen Episode am\njeweiligen Tag. Als Standard werden die Top 8 Episoden ausgewiesen; √ºber die Episodenauswahl\nim Filtermen√º k√∂nnen stattdessen bis zu 8 spezifische Episoden ausgewiesen werden.",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 9,
          "w": 12,
          "x": 0,
          "y": 40
        },
        "id": 101,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto",
            "height": 2000
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "// Function to format timestamp into DD.MM.YYYY\nconst formatDate = (timestamp) => {\n  const date = new Date(timestamp);\n  const day = ('0' + date.getDate()).slice(-2);\n  const month = ('0' + (date.getMonth() + 1)).slice(-2);\n  const year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n};\n\n// Fixed color mapping for rang 1-8\nconst rangColors = {\n  1: '#FF4500', // Rot\n  2: '#1E90FF', // Blau\n  3: '#32CD32', // Gr√ºn\n  4: '#FFD700', // Gelb\n  5: '#00FFFF', // Cyan\n  6: '#FF00FF', // Magenta\n  7: '#FF8C00', // Orange\n  8: '#9400D3', // Lila\n};\n\n// Build a mapping from episode (headline) to its rang value\nconst episodeRang = {};\ncontext.panel.data.series.forEach((s) => {\n  const episodes = s.fields.find((f) => f.name === 'headline').values;\n  const rangen = s.fields.find((f) => f.name === 'rang').values;\n  episodes.forEach((ep, i) => {\n    // Only assign the first encountered rang for each episode\n    if (episodeRang[ep] === undefined) {\n      episodeRang[ep] = rangen[i];\n    }\n  });\n});\n\n// Function to evenly distribute colors across the spectrum\nconst getDistinctColors = (items) => {\n  return items.map((item, index) => {\n    const hue = (index * (360 / items.length)) % 360; // Evenly space hues\n    return { name: item, color: `hsl(${hue}, 80%, 50%)` };\n  });\n};\n\n// Extract unique episodes and sort them for stable color assignment\nconst uniqueEpisodes = Array.from(\n  new Set(\n    context.panel.data.series.flatMap((s) => {\n      return s.fields.find((f) => f.name === 'headline').values;\n    })\n  )\n).sort();\n\n// Separate episodes with fixed rang (1-8) and dynamic ones\nconst fixedEpisodes = uniqueEpisodes.filter(ep => {\n  const rang = episodeRang[ep];\n  return rang >= 1 && rang <= 8;\n});\nconst dynamicEpisodes = uniqueEpisodes.filter(ep => {\n  const rang = episodeRang[ep];\n  return !(rang >= 1 && rang <= 8);\n});\n\n// Create color mapping for fixed episodes using rangColors\nconst fixedColorMapping = Object.fromEntries(\n  fixedEpisodes.map(ep => [ep, rangColors[episodeRang[ep]]])\n);\n\n// Generate distinct colors for dynamic episodes and create a mapping\nconst dynamicColorMapping = Object.fromEntries(\n  getDistinctColors(dynamicEpisodes).map(({ name, color }) => [name, color])\n);\n\n// Merge both mappings: episodes with rang 1-8 use fixed colors, the rest get dynamic colors\nconst colorMapping = { ...fixedColorMapping, ...dynamicColorMapping };\n\n// Step 1: Collect all unique dates globally and sort them\nconst allDates = Array.from(\n  new Set(\n    context.panel.data.series.flatMap((s) =>\n      s.fields.find((f) => f.name === 'date').values\n    )\n  )\n).sort((a, b) => new Date(a) - new Date(b));\n\n// Step 2: Generate series dynamically for each unique episode\nconst series = uniqueEpisodes.map((episode) => {\n  // Extract data only for this episode\n  const episodeData = context.panel.data.series\n    .flatMap((s) => {\n      const timeValues = s.fields.find((f) => f.name === 'date').values;\n      const episodeValues = s.fields.find((f) => f.name === 'headline').values;\n      const zugriffe = s.fields.find((f) => f.name === 'zugriffe').values;\n\n      return timeValues.map((time, index) => ({\n        time,\n        zugriffe: zugriffe[index],\n        episode: episodeValues[index],\n      }));\n    })\n    .filter((d) => d.episode === episode);\n\n  // Step 3: Align episode data to global date range\n  const alignedData = allDates.map((date) => {\n    const entry = episodeData.find((d) => d.time === date);\n    return entry ? [date, entry.zugriffe] : [date, null]; // Fill gaps with null\n  });\n\n  return {\n    name: episode,\n    type: 'line',\n    smooth: true,\n    showSymbol: false,\n    itemStyle: { color: colorMapping[episode] },\n    data: alignedData,\n  };\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: { type: 'none' },\n    confine: true,\n    formatter: function (params) {\n      let tooltipContent = formatDate(params[0].axisValue) + '<br/>';\n      params.forEach((item) => {\n        if (item.data[1] !== null) {\n          const formattedValue = new Intl.NumberFormat('de-DE').format(\n            Math.floor(item.data[1])\n          );\n          tooltipContent += item.marker + item.seriesName + ': ' + formattedValue + '<br/>';\n        }\n      });\n      return tooltipContent;\n    },\n  },\n\n\n  legend: {\n    data: uniqueEpisodes,\n    orient: 'horizontal',\n    left: 'left',\n    bottom: -2,\n    itemGap: 15,\n    textStyle: {\n      fontSize: 12,\n    },\n  },\n  xAxis: {\n    type: 'category',\n    data: allDates,\n    axisLabel: {\n      formatter: function (value) {\n        return formatDate(value);\n      },\n    },\n  },\n  yAxis: {\n    type: 'value',\n    min: 0,\n    axisLabel: {\n      formatter: function (value) {\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n      },\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 120,\n    containLabel: true,\n  },\n  series,\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "height": 400,
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'category',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [
              {
                "name": "headline",
                "source": "A"
              },
              {
                "name": "summe",
                "source": "A"
              },
              {
                "name": "date",
                "source": "A"
              }
            ],
            "series": [
              {
                "encode": {
                  "x": [],
                  "y": []
                },
                "id": "data",
                "name": "",
                "type": "line",
                "uid": "e14a8c7b-c493-48ba-98cc-98eedff43c34"
              }
            ]
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH raw_data AS (\r\n  SELECT \r\n    date,\r\n    headline, \r\n    SUM(IFNULL(m_zugriffe_1,0)) AS zugriffe,\r\n    publication_date_6,\r\n  FROM $episode_dataset\r\n  LEFT JOIN Piano.NDR_podcast_episode_publication_dates \r\n  USING (headline)\r\n  WHERE \r\n    (\"$Bereich\" = \"Alle Bereiche\" OR branding = \"$Bereich\")\r\n    AND (\"\"\"$Podcast\"\"\" = \"All titles\" OR REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY[$Episode]))\r\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n  GROUP BY date, headline, publication_date_6\r\n), ranked_episodes AS(\r\n  SELECT\r\n    headline,\r\n    publication_date_6,\r\n    RANK() OVER(ORDER BY zugriffe DESC) AS rang\r\n  FROM (\r\n  SELECT \r\n    headline,\r\n    publication_date_6,\r\n    SUM(zugriffe) AS zugriffe,\r\n  FROM raw_data\r\n  GROUP BY headline, publication_date_6\r\n  )\r\n  QUALIFY rang <= 8\r\n), date_range AS (\r\n  SELECT \r\n    date \r\n  FROM UNNEST(GENERATE_DATE_ARRAY(DATE('${__from:date}', \"Europe/Berlin\"), DATE('${__to:date}', \"Europe/Berlin\"))) AS date\r\n), filtered_date_range AS (\r\n  SELECT date, headline, rang\r\n  FROM date_range\r\n  JOIN ranked_episodes\r\n  ON date >= publication_date_6 AND date <= \"$max_date\"\r\n)\r\nSELECT \r\n  filtered_date_range.headline, \r\n  filtered_date_range.date, \r\n  IFNULL(zugriffe,0) AS zugriffe, \r\n  \"${type}\" AS type, \r\n  filtered_date_range.rang\r\nFROM filtered_date_range\r\nLEFT JOIN raw_data\r\nON filtered_date_range.date = raw_data.date AND REPLACE(filtered_date_range.headline, \"'\", \"\") = REPLACE(raw_data.headline, \"'\", \"\")\r\nORDER BY headline, date ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "Zugriffe pro Tag f√ºr ausgew√§hlte Episoden von \"$Podcast_title\"",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": false,
                "date": false,
                "f0_": false,
                "podcast_title": false,
                "publication_date_1": false,
                "ressource": true,
                "sophora_id": true,
                "tmstp": true,
                "zugriffe": false
              },
              "includeByName": {},
              "indexByName": {
                "f0_": 3,
                "f1_": 4,
                "headline": 2,
                "podcast_title": 1,
                "publication_date_2": 0
              },
              "renameByName": {
                "f0_": "",
                "f1_": "Tenchnische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "Datum",
                "technische_nutzer": "Technische Nutzer",
                "zugriffe": "summe"
              }
            }
          }
        ],
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Abgetragen sind die kumulierten Zugriffe nach 1, 2, ..., X Tagen f√ºr im\nausgew√§hlten Analysezeitraum neu ver√∂ffentlichte Episoden. Der Durchschnitt bezieht sich auf\ns√§mtliche neue Episoden, nicht nur auf die in der Grafik einzeln dargestellten. Als Standard\nwerden die Top 8 neuen Episoden ausgewiesen; √ºber die Episodenauswahl im Filtermen√º k√∂nnen\nstattdessen bis zu 8 spezifische Episoden ausgewiesen werden.",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 9,
          "w": 12,
          "x": 12,
          "y": 40
        },
        "id": 84,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto",
            "height": 2000
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "// Fixed color mapping for rang 1-8\nconst rangColors = {\n  0: 'RGB(0,139,139)',\n  1: '#FF4500', // Rot\n  2: '#1E90FF', // Blau\n  3: '#32CD32', // Gr√ºn\n  4: '#FFD700', // Gelb\n  5: '#00FFFF', // Cyan\n  6: '#FF00FF', // Magenta\n  7: '#FF8C00', // Orange\n  8: '#9400D3', // Lila\n};\n\n// Build a mapping from episode (headline) to its rang value\nconst episodeRang = {};\ncontext.panel.data.series.forEach((s) => {\n  const episodes = s.fields.find((f) => f.name === 'headline').values;\n  const rangen = s.fields.find((f) => f.name === 'rang').values;\n  episodes.forEach((ep, i) => {\n    // Only assign the first encountered rang for each episode\n    if (episodeRang[ep] === undefined) {\n      episodeRang[ep] = rangen[i];\n    }\n  });\n});\n\n// Find all unique episodes (headlines)\nconst uniqueEpisodes = Array.from(\n  new Set(\n    context.panel.data.series.flatMap((s) =>\n      s.fields.find((f) => f.name === 'headline').values\n    )\n  )\n).sort();\n\nconsole.log(\"Unique Episodes:\", uniqueEpisodes);\n\n// Separate episodes with a fixed rang (1-8) from the others\nconst fixedEpisodes = uniqueEpisodes.filter(ep => {\n  const rang = episodeRang[ep];\n  return rang >= 0 && rang <= 8;\n});\n\nconst dynamicEpisodes = uniqueEpisodes.filter(ep => {\n  const rang = episodeRang[ep];\n  return !(rang >= 0 && rang <= 8);\n});\n\n// Create a color mapping for fixed episodes using the rangColors\nconst fixedColorMapping = Object.fromEntries(\n  fixedEpisodes.map(ep => [ep, rangColors[episodeRang[ep]]])\n);\n\n// Function to generate distinct colors for each non-fixed episode\nfunction getDistinctColors(items) {\n  return items.map((item, index) => {\n    const hue = (index * (360 / items.length)) % 360; // Evenly distribute hues\n    return { name: item, color: `hsl(${hue}, 80%, 50%)` };\n  });\n}\n\n// Generate colors for dynamic episodes and create a mapping\nconst dynamicColors = getDistinctColors(dynamicEpisodes);\nconst dynamicColorMapping = Object.fromEntries(\n  dynamicColors.map(({ name, color }) => [name, color])\n);\n\n// Merge the two mappings (fixed episodes take precedence)\nconst colorMapping = { ...fixedColorMapping, ...dynamicColorMapping };\n\nconst series = uniqueEpisodes.flatMap((episode) => {\n  const episodeData = [];\n\n  context.panel.data.series.forEach((s) => {\n    const daysSincePub = s.fields.find((f) => f.name === 'days_since_pub').values;\n    const zugriffe = s.fields.find((f) => f.name === 'summe').values;\n    const episodes = s.fields.find((f) => f.name === 'headline').values;\n\n    daysSincePub.forEach((day, idx) => {\n      if (episodes[idx] === episode) {\n        episodeData.push([day, zugriffe[idx]]);\n      }\n    });\n  });\n\n  // Sort data by days_since_pub\n  episodeData.sort((a, b) => a[0] - b[0]);\n\n  return {\n    name: episode,\n    type: 'line',\n    smooth: false,\n    showSymbol: false,\n    itemStyle: {\n      color: colorMapping[episode],\n    },\n    lineStyle: episode === \"Durchschnitt alle neuen Episoden\" ? { type: 'dashed' } : {},\n    data: episodeData,\n  };\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'none',\n    },\n    formatter: function (params) {\n      let tooltipContent = \"\";\n      params.forEach(function (item) {\n        let number = Math.round(item.data[1]);\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + item.seriesName + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    },\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'left',\n    bottom: -2,\n    itemGap: 15,\n    textStyle: {\n      fontSize: 12,\n    },\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    },\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: false,\n      formatter: function (value) {\n        return value;\n      },\n    },\n  },\n  yAxis: {\n    type: 'value',\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n      },\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 120,\n    containLabel: true,\n  },\n  series,\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "height": 400,
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'category',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [
              {
                "name": "headline",
                "source": "A"
              },
              {
                "name": "summe",
                "source": "A"
              },
              {
                "name": "date",
                "source": "A"
              }
            ],
            "series": [
              {
                "encode": {
                  "x": [],
                  "y": []
                },
                "id": "data",
                "name": "",
                "type": "line",
                "uid": "e14a8c7b-c493-48ba-98cc-98eedff43c34"
              }
            ]
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH raw_data AS (\r\n  -- This is the raw data, including either all episodes or only the selected ones, ensuring their podcasts are included in the average calculation, and the publication date falls within the selected time period\r\n  SELECT \r\n    date,\r\n    headline, \r\n    SUM(IFNULL(m_zugriffe_1,0)) AS zugriffe,\r\n    publication_date_6,\r\n  FROM $episode_dataset AS episode_dataset\r\n  LEFT JOIN $profiles_dataset AS pd\r\n  USING(podcast_title)\r\n  LEFT JOIN Piano.NDR_podcast_episode_publication_dates \r\n  USING (headline)\r\n  WHERE \r\n    (\"$Bereich\" = \"Alle Bereiche\" OR episode_dataset.branding = \"$Bereich\")\r\n    AND (\"\"\"$Podcast\"\"\" = \"All titles\" OR REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY[$Episode]))\r\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND publication_date_6 BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND $episodenschnitt_condition \r\n  GROUP BY date, headline, publication_date_6\r\n), ranked_episodes AS(\r\n  -- This step ranks episodes according to their total zugriffe across the entire period\r\n  SELECT\r\n    headline,\r\n    publication_date_6,\r\n    RANK() OVER(ORDER BY zugriffe DESC) AS rang\r\n  FROM (\r\n  SELECT \r\n    headline,\r\n    publication_date_6,\r\n    SUM(zugriffe) AS zugriffe,\r\n  FROM raw_data\r\n  GROUP BY headline, publication_date_6\r\n  )\r\n), date_range AS (\r\n  -- Create a full date range to handle cases where episodes have no zugriffe on some days\r\n  SELECT \r\n    date \r\n  FROM UNNEST(GENERATE_DATE_ARRAY(DATE('${__from:date}', \"Europe/Berlin\"), DATE('${__to:date}', \"Europe/Berlin\"))) AS date\r\n), filtered_date_range AS (\r\n  -- Join date range with episodes, keeping only dates between publication and max date (to include the 5-day delay) \r\n  SELECT date, headline, publication_date_6, rang\r\n  FROM date_range\r\n  JOIN ranked_episodes\r\n  ON date >= publication_date_6 AND date <= \"$max_date\"\r\n), cumulative_sum_ranked_episodes AS (\r\nSELECT \r\n  -- Calculate the cumulative sum of zugriffe and the number of days since publication for each episode\r\n  filtered_date_range.headline, \r\n  DATE_DIFF(filtered_date_range.date, filtered_date_range.publication_date_6, DAY) + 1 AS days_since_pub,\r\n  SUM(IFNULL(zugriffe, 0)) OVER (PARTITION BY filtered_date_range.headline ORDER BY filtered_date_range.date) AS summe, \r\n  \"${type}\" AS type, \r\n  filtered_date_range.rang\r\nFROM filtered_date_range\r\nLEFT JOIN raw_data\r\nON filtered_date_range.date = raw_data.date AND REPLACE(filtered_date_range.headline, \"'\", \"\") = REPLACE(raw_data.headline, \"'\", \"\")\r\n), top_episodes AS (\r\n  -- Top episodes\r\n  SELECT * FROM cumulative_sum_ranked_episodes\r\n  WHERE rang <= 8\r\n), max_days_since_pub_top_episodes AS(\r\n  -- Retrieve the highest days_since_pub value from top episodes\r\n  SELECT MAX(days_since_pub) AS max_day_since_pub\r\n  FROM top_episodes\r\n), avg_data AS (\r\n  -- Compute the daily average zugriffe across all episodes for days up to max_day_since_pub\r\n  SELECT \r\n    \"Durchschnitt alle neuen Episoden\" AS headline,\r\n    days_since_pub,\r\n    AVG(summe) AS summe,\r\n    \"${type}\" AS type,\r\n    0 AS rang\r\n  FROM cumulative_sum_ranked_episodes\r\n  --JOIN max_days_since_pub_top_episodes\r\n  --ON days_since_pub <= max_day_since_pub\r\n  GROUP BY days_since_pub\r\n), final_data AS(\r\n  -- Final data\r\n  SELECT * FROM top_episodes\r\n  WHERE days_since_pub <= $Tage_content_lifetime\r\n  UNION ALL\r\n  SELECT * FROM avg_data\r\n  WHERE days_since_pub <= $Tage_content_lifetime\r\n), day_zero AS(\r\n  -- Create day zero to ensure all episodes and the average start at 0\r\n  SELECT DISTINCT\r\n    headline, \r\n    0 AS days_since_pub,\r\n    0 AS summe, \r\n    \"${type}\" AS type, \r\n    rang\r\n  FROM final_data\r\n)\r\nSELECT * FROM final_data\r\nUNION DISTINCT\r\nSELECT * FROM day_zero\r\nORDER BY headline, days_since_pub ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "Tage nach Erstver√∂ffentlichung f√ºr ausgew√§hlte Episoden von \"$Podcast_title\"",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": false,
                "date": false,
                "f0_": false,
                "podcast_title": false,
                "publication_date_1": false,
                "rang": false,
                "ressource": true,
                "sophora_id": true,
                "tmstp": true,
                "zugriffe": false
              },
              "includeByName": {},
              "indexByName": {
                "f0_": 3,
                "f1_": 4,
                "headline": 2,
                "podcast_title": 1,
                "publication_date_2": 0
              },
              "renameByName": {
                "f0_": "",
                "f1_": "Tenchnische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "Datum",
                "technische_nutzer": "Technische Nutzer",
                "zugriffe": "Zugriffe gesamt"
              }
            }
          }
        ],
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": "auto",
              "cellOptions": {
                "type": "auto"
              },
              "filterable": true,
              "inspect": false
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Episode"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 530
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Podcast"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 474
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Zugriffe"
              },
              "properties": [
                {
                  "id": "custom.minWidth",
                  "value": 200
                },
                {
                  "id": "custom.align",
                  "value": "left"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "V√ñ Datum"
              },
              "properties": [
                {
                  "id": "unit",
                  "value": "time: DD.MM.YYYY"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 12,
          "w": 24,
          "x": 0,
          "y": 49
        },
        "id": 66,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "enablePagination": true,
            "fields": "",
            "reducer": [
              "sum"
            ],
            "show": false
          },
          "showHeader": true,
          "sortBy": []
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT\n  podcast_title,\n  headline,\n  publication_date_6,\n  SUM(m_zugriffe_1) as zugriffe\nFROM $episode_dataset\nLEFT JOIN Piano.NDR_podcast_episode_publication_dates \nUSING (headline)\nWHERE \n  (\"$Bereich\" = \"Alle Bereiche\" OR branding = \"$Bereich\")\n  AND (\"\"\"$Podcast\"\"\" = \"All titles\" OR REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY[$Episode]))\n  AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY podcast_title, headline, publication_date_6\nORDER BY zugriffe DESC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "Episoden",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": true,
                "date": false,
                "f0_": true,
                "podcast_title": false,
                "publication_date_1": false,
                "ressource": true,
                "sophora_id": true,
                "technische_nutzer": true,
                "tmstp": true
              },
              "includeByName": {},
              "indexByName": {
                "headline": 1,
                "podcast_title": 0,
                "publication_date_6": 2,
                "zugriffe": 3
              },
              "renameByName": {
                "f0_": "Technische Nutzer",
                "f1_": "Technische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "V√ñ Datum",
                "publication_date_6": "V√ñ Datum",
                "publication_date_new": "V√ñ Datum",
                "publication_date_old": "V√ñ Datum (Alt)",
                "technische_nutzer": "Technische Nutzer pro Tag",
                "zugriffe": "Zugriffe"
              }
            }
          }
        ],
        "type": "table"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "mappings": [],
            "noValue": "-",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Episode"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Podcast"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Zugriffe"
              },
              "properties": []
            }
          ]
        },
        "gridPos": {
          "h": 13,
          "w": 24,
          "x": 0,
          "y": 61
        },
        "id": 86,
        "options": {
          "nestedObjects": [],
          "tables": [
            {
              "actionsColumnConfig": {
                "alignment": "start",
                "fontSize": "sm",
                "label": "",
                "width": {
                  "auto": false,
                  "value": 100
                }
              },
              "addRow": {
                "enabled": false,
                "permission": {
                  "mode": "",
                  "userRole": []
                },
                "request": {
                  "datasource": "",
                  "payload": {}
                }
              },
              "deleteRow": {
                "enabled": false,
                "permission": {
                  "mode": "",
                  "userRole": []
                },
                "request": {
                  "datasource": "",
                  "payload": {}
                }
              },
              "expanded": false,
              "items": [
                {
                  "aggregation": "none",
                  "appearance": {
                    "alignment": "start",
                    "background": {
                      "applyToRow": false
                    },
                    "colors": {},
                    "header": {
                      "backgroundColor": "#ff0000",
                      "fontSize": "md"
                    },
                    "width": {
                      "auto": true,
                      "min": 20,
                      "value": 100
                    },
                    "wrap": true
                  },
                  "edit": {
                    "editor": {
                      "type": "string"
                    },
                    "enabled": false,
                    "permission": {
                      "mode": "",
                      "userRole": []
                    }
                  },
                  "enabled": true,
                  "field": {
                    "name": "zugriffe",
                    "source": "A"
                  },
                  "filter": {
                    "enabled": false,
                    "mode": "client",
                    "variable": ""
                  },
                  "footer": [],
                  "gauge": {
                    "mode": "basic",
                    "valueDisplayMode": "text",
                    "valueSize": 14
                  },
                  "group": false,
                  "label": "",
                  "newRowEdit": {
                    "editor": {
                      "type": "string"
                    },
                    "enabled": false
                  },
                  "objectId": "",
                  "pin": "",
                  "preformattedStyle": false,
                  "scale": "auto",
                  "showingRows": 20,
                  "sort": {
                    "descFirst": true,
                    "enabled": true
                  },
                  "type": "auto"
                },
                {
                  "aggregation": "none",
                  "appearance": {
                    "alignment": "start",
                    "background": {
                      "applyToRow": false
                    },
                    "colors": {},
                    "header": {
                      "fontSize": "md"
                    },
                    "width": {
                      "auto": false,
                      "min": 20,
                      "value": 474
                    },
                    "wrap": true
                  },
                  "edit": {
                    "editor": {
                      "type": "string"
                    },
                    "enabled": false,
                    "permission": {
                      "mode": "",
                      "userRole": []
                    }
                  },
                  "enabled": true,
                  "field": {
                    "name": "Title",
                    "source": "A"
                  },
                  "filter": {
                    "enabled": true,
                    "mode": "client",
                    "variable": ""
                  },
                  "footer": [],
                  "gauge": {
                    "mode": "basic",
                    "valueDisplayMode": "text",
                    "valueSize": 14
                  },
                  "group": false,
                  "label": "",
                  "newRowEdit": {
                    "editor": {
                      "type": "string"
                    },
                    "enabled": false
                  },
                  "objectId": "",
                  "pin": "left",
                  "showingRows": 20,
                  "sort": {
                    "descFirst": false,
                    "enabled": true
                  },
                  "type": "auto"
                },
                {
                  "aggregation": "none",
                  "appearance": {
                    "alignment": "start",
                    "background": {
                      "applyToRow": false
                    },
                    "colors": {},
                    "header": {
                      "backgroundColor": "#5794f2",
                      "fontSize": "md"
                    },
                    "width": {
                      "auto": true,
                      "min": 20,
                      "value": 100
                    },
                    "wrap": true
                  },
                  "edit": {
                    "editor": {
                      "type": "string"
                    },
                    "enabled": false,
                    "permission": {
                      "mode": "",
                      "userRole": []
                    }
                  },
                  "enabled": true,
                  "field": {
                    "name": "ard_summe",
                    "source": "A"
                  },
                  "filter": {
                    "enabled": true,
                    "mode": "client",
                    "variable": ""
                  },
                  "footer": [],
                  "gauge": {
                    "mode": "basic",
                    "valueDisplayMode": "text",
                    "valueSize": 14
                  },
                  "group": false,
                  "label": "",
                  "newRowEdit": {
                    "editor": {
                      "type": "string"
                    },
                    "enabled": false
                  },
                  "objectId": "",
                  "pin": "",
                  "preformattedStyle": false,
                  "scale": "auto",
                  "showingRows": 20,
                  "sort": {
                    "descFirst": false,
                    "enabled": true
                  },
                  "type": "auto"
                },
                {
                  "aggregation": "none",
                  "appearance": {
                    "alignment": "start",
                    "background": {
                      "applyToRow": false
                    },
                    "colors": {},
                    "header": {
                      "backgroundColor": "#73bf69",
                      "fontSize": "md"
                    },
                    "width": {
                      "auto": true,
                      "min": 20,
                      "value": 100
                    },
                    "wrap": true
                  },
                  "edit": {
                    "editor": {
                      "type": "string"
                    },
                    "enabled": false,
                    "permission": {
                      "mode": "",
                      "userRole": []
                    }
                  },
                  "enabled": true,
                  "field": {
                    "name": "spotify_summe",
                    "source": "A"
                  },
                  "filter": {
                    "enabled": true,
                    "mode": "client",
                    "variable": ""
                  },
                  "footer": [],
                  "gauge": {
                    "mode": "basic",
                    "valueDisplayMode": "text",
                    "valueSize": 14
                  },
                  "group": false,
                  "label": "",
                  "newRowEdit": {
                    "editor": {
                      "type": "string"
                    },
                    "enabled": false
                  },
                  "objectId": "",
                  "pin": "",
                  "showingRows": 20,
                  "sort": {
                    "descFirst": false,
                    "enabled": true
                  },
                  "type": "auto"
                },
                {
                  "aggregation": "none",
                  "appearance": {
                    "alignment": "start",
                    "background": {
                      "applyToRow": false
                    },
                    "colors": {},
                    "header": {
                      "backgroundColor": "#b877d9",
                      "fontSize": "md"
                    },
                    "width": {
                      "auto": true,
                      "min": 20,
                      "value": 100
                    },
                    "wrap": true
                  },
                  "edit": {
                    "editor": {
                      "type": "string"
                    },
                    "enabled": false,
                    "permission": {
                      "mode": "",
                      "userRole": []
                    }
                  },
                  "enabled": true,
                  "field": {
                    "name": "apple_summe",
                    "source": "A"
                  },
                  "filter": {
                    "enabled": true,
                    "mode": "client",
                    "variable": ""
                  },
                  "footer": [],
                  "gauge": {
                    "mode": "basic",
                    "valueDisplayMode": "text",
                    "valueSize": 14
                  },
                  "group": false,
                  "label": "",
                  "newRowEdit": {
                    "editor": {
                      "type": "string"
                    },
                    "enabled": false
                  },
                  "objectId": "",
                  "pin": "",
                  "showingRows": 20,
                  "sort": {
                    "descFirst": false,
                    "enabled": true
                  },
                  "type": "auto"
                }
              ],
              "name": "Podcasts",
              "pagination": {
                "enabled": true,
                "mode": "client"
              },
              "rowHighlight": {
                "backgroundColor": "transparent",
                "columnId": "",
                "enabled": false,
                "scrollTo": "",
                "smooth": false,
                "variable": ""
              },
              "showHeader": true,
              "update": {
                "datasource": "",
                "payload": {}
              }
            }
          ],
          "tabsSorting": false,
          "toolbar": {
            "alignment": "left",
            "export": false
          }
        },
        "pluginVersion": "1.9.0",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT\n    podcast_title AS Title,\n    SUM(CASE WHEN platform = 'ARD Audiothek' THEN m_zugriffe_1 ELSE NULL END) AS ard_summe,\n    SUM(CASE WHEN platform = 'Apple Podcasts' THEN m_zugriffe_1 ELSE NULL END) AS apple_summe,\n    SUM(CASE WHEN platform = 'Spotify' THEN m_zugriffe_1 ELSE NULL END) AS spotify_summe,\n    SUM(m_zugriffe_1) AS zugriffe,\nFROM \n    $platform_dataset AS platform_table\nLEFT JOIN $profiles_dataset AS profiles_table\nON platform_table.broadcast_id = profiles_table.broadcast_id[0]\nWHERE\n    platform_table.broadcast_id IN ($podcast_ids)\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY podcast_title\nORDER BY zugriffe DESC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": true,
                "date": false,
                "f0_": true,
                "podcast_title": false,
                "publication_date_1": false,
                "ressource": true,
                "sophora_id": true,
                "technische_nutzer": true,
                "tmstp": true
              },
              "includeByName": {},
              "indexByName": {
                "Title": 0,
                "apple_summe": 2,
                "ard_summe": 1,
                "spotify_summe": 3,
                "zugriffe": 4
              },
              "renameByName": {
                "Title": "Podcast",
                "apple_summe": "Apple Podcasts",
                "ard_summe": "ARD Audiothek",
                "f0_": "Technische Nutzer",
                "f1_": "Technische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "V√ñ Datum",
                "spotify_summe": "Spotify",
                "technische_nutzer": "Technische Nutzer pro Tag",
                "zugriffe": "Zugriffe Gesamt"
              }
            }
          }
        ],
        "type": "volkovlabs-table-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "custom": {
              "thresholdsStyle": {
                "mode": "color",
                "thresholds": []
              }
            },
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 5,
          "x": 0,
          "y": 74
        },
        "id": 78,
        "options": {
          "alwaysVisibleFilter": false,
          "autoScroll": false,
          "collapsedByDefault": false,
          "customValue": true,
          "displayMode": "minimize",
          "emptyValue": false,
          "favorites": {
            "addQuery": {},
            "datasource": "",
            "deleteQuery": {},
            "enabled": false,
            "getQuery": {},
            "storage": "browser"
          },
          "filter": false,
          "groupSelection": false,
          "header": false,
          "isUseLocalTime": false,
          "minimizeOutputFormat": "text",
          "padding": 20,
          "persistent": false,
          "saveSelectedGroup": false,
          "saveSelectedGroupKey": "",
          "showGroupTotal": false,
          "showLabel": true,
          "showName": false,
          "showResetButton": false,
          "showTotal": false,
          "statusSort": false,
          "sticky": false,
          "tabsInOrder": true,
          "variable": "Tage"
        },
        "pluginVersion": "3.6.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawSql": "",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-variable-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Abgetragen sind die kumulierten Zugriffe nach 7, 14, 28, 56 und 91 Tagen\nf√ºr im ausgew√§hlten Analysezeitraum neu ver√∂ffentlichte Episoden aller ausgew√§hlten Podcasts.\n√úber das Dropdown-Men√º oben links kann ein individueller Zeitraum zwischen 1 und 99 Tagen\ndefiniert werden. ACHTUNG: Die Stichprobe der Episoden variiert je nach betrachtetem\nZeitintervall. So ist unter Umst√§nden auch ein kleinerer Wert f√ºr 56 Tage als f√ºr 28 Tage m√∂glich.\nF√ºr robuste Ergebnisse bitte einen m√∂glichst langen Analysezeitraum w√§hlen.",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": "left",
              "cellOptions": {
                "type": "auto"
              },
              "filterable": true,
              "inspect": false
            },
            "decimals": 0,
            "fieldMinMax": false,
            "mappings": [],
            "noValue": "-",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "days7"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "nach 7 Tagen"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "days14"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "nach 14 Tagen"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "days28"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "nach 28 Tagen"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "days56"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "nach 56 Tagen"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "days91"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "nach 91 Tagen"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "daysCustom"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "nach $Tage Tagen"
                }
              ]
            },
            {
              "matcher": {
                "id": "byRegexp",
                "options": "/.*3484.*/"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "asd"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "nach 7 Tagen"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 254
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "nach 14 Tagen"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 281
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "nach 28 Tagen"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 290
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Podcast"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 474
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "nach 56 Tagen"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 285
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 12,
          "w": 24,
          "x": 0,
          "y": 76
        },
        "id": 88,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "enablePagination": true,
            "fields": "",
            "reducer": [
              "mean"
            ],
            "show": false
          },
          "showHeader": true,
          "sortBy": []
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH raw_data AS (\r\n  -- This is the raw data, including either all episodes or only the selected ones, ensuring their podcasts are included in the average calculation, and the publication date falls within the selected time period\r\n  SELECT \r\n    date,\r\n    podcast_title,\r\n    headline, \r\n    SUM(IFNULL(m_zugriffe_1,0)) AS zugriffe,\r\n    publication_date_6,\r\n  FROM $episode_dataset AS episode_dataset\r\n  LEFT JOIN $profiles_dataset AS pd\r\n  USING(podcast_title)\r\n  LEFT JOIN Piano.NDR_podcast_episode_publication_dates \r\n  USING (headline)\r\n  WHERE \r\n    (\"$Bereich\" = \"Alle Bereiche\" OR episode_dataset.branding = \"$Bereich\")\r\n    AND (\"\"\"$Podcast\"\"\" = \"All titles\" OR REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY[$Episode]))\r\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND publication_date_6 BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND $episodenschnitt_condition \r\n  GROUP BY date, podcast_title, headline, publication_date_6\r\n), ranked_episodes AS(\r\n  -- This step ranks episodes according to their total zugriffe across the entire period\r\n  SELECT\r\n    podcast_title,\r\n    headline,\r\n    publication_date_6,\r\n    RANK() OVER(ORDER BY zugriffe DESC) AS rang\r\n  FROM (\r\n  SELECT\r\n    podcast_title, \r\n    headline,\r\n    publication_date_6,\r\n    SUM(zugriffe) AS zugriffe,\r\n  FROM raw_data\r\n  GROUP BY podcast_title, headline, publication_date_6\r\n  )\r\n), date_range AS (\r\n  -- Create a full date range to handle cases where episodes have no zugriffe on some days\r\n  SELECT \r\n    date \r\n  FROM UNNEST(GENERATE_DATE_ARRAY(DATE('${__from:date}', \"Europe/Berlin\"), DATE('${__to:date}', \"Europe/Berlin\"))) AS date\r\n), filtered_date_range AS (\r\n  -- Join date range with episodes, keeping only dates between publication and max date (to include the 5-day delay) \r\n  SELECT date, podcast_title, headline, publication_date_6, rang\r\n  FROM date_range\r\n  JOIN ranked_episodes\r\n  ON date >= publication_date_6 AND date <= \"$max_date\"\r\n), cumulative_sum_ranked_episodes AS (\r\nSELECT \r\n  -- Calculate the cumulative sum of zugriffe and the number of days since publication for each episode\r\n  filtered_date_range.podcast_title,\r\n  filtered_date_range.headline, \r\n  DATE_DIFF(filtered_date_range.date, filtered_date_range.publication_date_6, DAY) + 1 AS days_since_pub,\r\n  SUM(IFNULL(zugriffe, 0)) OVER (PARTITION BY filtered_date_range.headline ORDER BY filtered_date_range.date) AS summe, \r\n  \"${type}\" AS type, \r\n  filtered_date_range.rang\r\nFROM filtered_date_range\r\nLEFT JOIN raw_data\r\nON filtered_date_range.date = raw_data.date AND REPLACE(filtered_date_range.headline, \"'\", \"\") = REPLACE(raw_data.headline, \"'\", \"\")\r\n), avg_data AS (\r\n  -- Compute the daily average zugriffe across all episodes for days up to max_day_since_pub\r\n  SELECT \r\n    podcast_title,\r\n    days_since_pub,\r\n    AVG(summe) AS summe,\r\n    \"${type}\" AS type,\r\n    0 AS rang\r\n  FROM cumulative_sum_ranked_episodes\r\n  GROUP BY podcast_title,days_since_pub\r\n)\r\nSELECT \r\n  podcast_title,\r\n  ROUND(MAX(CASE WHEN days_since_pub = 7 THEN summe END)) AS days7,\r\n  ROUND(MAX(CASE WHEN days_since_pub = 14 THEN summe END)) AS days14,\r\n  ROUND(MAX(CASE WHEN days_since_pub = 28 THEN summe END)) AS days28,\r\n  ROUND(MAX(CASE WHEN days_since_pub = 56 THEN summe END)) AS days56,\r\n  ROUND(MAX(CASE WHEN days_since_pub = 91 THEN summe END)) AS days91,\r\n  ROUND(MAX(CASE WHEN days_since_pub = $Tage THEN summe END)) AS daysCustom,\r\nFROM avg_data\r\nGROUP BY podcast_title\r\nORDER BY podcast_title\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "Durchschnitt pro Episode f√ºr neu ver√∂ffentlichte Episoden",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": true,
                "date": false,
                "f0_": true,
                "podcast_title": false,
                "publication_date_1": false,
                "ressource": true,
                "sophora_id": true,
                "technische_nutzer": true,
                "tmstp": true
              },
              "includeByName": {},
              "indexByName": {
                "broadcast_id": 3,
                "headline": 1,
                "podcast_title": 0,
                "publication_date_2": 2,
                "technische_nutzer": 4,
                "zugriffe": 5
              },
              "renameByName": {
                "Mean": "Durschschnitt",
                "days7": "",
                "f0_": "Technische Nutzer",
                "f1_": "Technische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "V√ñ Datum",
                "technische_nutzer": "Technische Nutzer pro Tag",
                "zugriffe": "Zugriffe"
              }
            }
          }
        ],
        "type": "table"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#1250b0",
              "mode": "fixed"
            },
            "custom": {
              "align": "left",
              "cellOptions": {
                "mode": "basic",
                "type": "color-background"
              },
              "filterable": true,
              "inspect": false
            },
            "decimals": 0,
            "fieldMinMax": false,
            "mappings": [],
            "noValue": "-",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "days7"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "nach 7 Tagen"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "days14"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "nach 14 Tagen"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "days28"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "nach 28 Tagen"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "days56"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "nach 56 Tagen"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "days91"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "nach 91 Tagen"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "daysCustom"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "nach $Tage Tagen"
                }
              ]
            },
            {
              "matcher": {
                "id": "byRegexp",
                "options": "/.*3484.*/"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "asd"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Podcast"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 474
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "nach 7 Tagen"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 255
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "nach 14 Tagen"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 290
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "nach 28 Tagen"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 287
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "nach 56 Tagen"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 286
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 2,
          "w": 24,
          "x": 0,
          "y": 88
        },
        "id": 98,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "enablePagination": false,
            "fields": "",
            "reducer": [
              "mean"
            ],
            "show": false
          },
          "showHeader": false,
          "sortBy": []
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH raw_data AS (\r\n  -- This is the raw data, including either all episodes or only the selected ones, ensuring their podcasts are included in the average calculation, and the publication date falls within the selected time period\r\n  SELECT \r\n    date,\r\n    podcast_title,\r\n    headline, \r\n    SUM(IFNULL(m_zugriffe_1,0)) AS zugriffe,\r\n    publication_date_6,\r\n  FROM $episode_dataset AS episode_dataset\r\n  LEFT JOIN $profiles_dataset AS pd\r\n  USING(podcast_title)\r\n  LEFT JOIN Piano.NDR_podcast_episode_publication_dates \r\n  USING (headline)\r\n  WHERE \r\n    (\"$Bereich\" = \"Alle Bereiche\" OR episode_dataset.branding = \"$Bereich\")\r\n    AND (\"\"\"$Podcast\"\"\" = \"All titles\" OR REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY[$Episode]))\r\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND publication_date_6 BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND $episodenschnitt_condition \r\n  GROUP BY date, podcast_title, headline, publication_date_6\r\n), ranked_episodes AS(\r\n  -- This step ranks episodes according to their total zugriffe across the entire period\r\n  SELECT\r\n    podcast_title,\r\n    headline,\r\n    publication_date_6,\r\n    RANK() OVER(ORDER BY zugriffe DESC) AS rang\r\n  FROM (\r\n  SELECT\r\n    podcast_title, \r\n    headline,\r\n    publication_date_6,\r\n    SUM(zugriffe) AS zugriffe,\r\n  FROM raw_data\r\n  GROUP BY podcast_title, headline, publication_date_6\r\n  )\r\n), date_range AS (\r\n  -- Create a full date range to handle cases where episodes have no zugriffe on some days\r\n  SELECT \r\n    date \r\n  FROM UNNEST(GENERATE_DATE_ARRAY(DATE('${__from:date}', \"Europe/Berlin\"), DATE('${__to:date}', \"Europe/Berlin\"))) AS date\r\n), filtered_date_range AS (\r\n  -- Join date range with episodes, keeping only dates between publication and max date (to include the 5-day delay) \r\n  SELECT date, podcast_title, headline, publication_date_6, rang\r\n  FROM date_range\r\n  JOIN ranked_episodes\r\n  ON date >= publication_date_6 AND date <= \"$max_date\"\r\n), cumulative_sum_ranked_episodes AS (\r\nSELECT \r\n  -- Calculate the cumulative sum of zugriffe and the number of days since publication for each episode\r\n  filtered_date_range.podcast_title,\r\n  filtered_date_range.headline, \r\n  DATE_DIFF(filtered_date_range.date, filtered_date_range.publication_date_6, DAY) + 1 AS days_since_pub,\r\n  SUM(IFNULL(zugriffe, 0)) OVER (PARTITION BY filtered_date_range.headline ORDER BY filtered_date_range.date) AS summe, \r\n  \"${type}\" AS type, \r\n  filtered_date_range.rang\r\nFROM filtered_date_range\r\nLEFT JOIN raw_data\r\nON filtered_date_range.date = raw_data.date AND REPLACE(filtered_date_range.headline, \"'\", \"\") = REPLACE(raw_data.headline, \"'\", \"\")\r\n), avg_data AS (\r\n  -- Compute the daily average zugriffe across all episodes for days up to max_day_since_pub\r\n  SELECT \r\n    podcast_title,\r\n    days_since_pub,\r\n    AVG(summe) AS summe,\r\n    \"${type}\" AS type,\r\n    0 AS rang\r\n  FROM cumulative_sum_ranked_episodes\r\n  GROUP BY podcast_title,days_since_pub\r\n), avg_per_podcast AS(\r\nSELECT \r\n  podcast_title,\r\n  ROUND(MAX(CASE WHEN days_since_pub = 7 THEN summe END)) AS days7,\r\n  ROUND(MAX(CASE WHEN days_since_pub = 14 THEN summe END)) AS days14,\r\n  ROUND(MAX(CASE WHEN days_since_pub = 28 THEN summe END)) AS days28,\r\n  ROUND(MAX(CASE WHEN days_since_pub = 56 THEN summe END)) AS days56,\r\n  ROUND(MAX(CASE WHEN days_since_pub = 91 THEN summe END)) AS days91,\r\n  ROUND(MAX(CASE WHEN days_since_pub = $Tage THEN summe END)) AS daysCustom,\r\nFROM avg_data\r\nGROUP BY podcast_title)\r\nSELECT\r\n  \"Durchschnitt $Podcast_title\",\r\n  ROUND(AVG(days7)) AS days7,\r\n  ROUND(AVG(days14)) AS days14,\r\n  ROUND(AVG(days28)) AS days28,\r\n  ROUND(AVG(days56)) AS days56,\r\n  ROUND(AVG(days91)) AS days91,\r\n  ROUND(AVG(daysCustom)) AS daysCustom,\r\n  FROM avg_per_podcast\r\n ",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": true,
                "date": false,
                "f0_": false,
                "podcast_title": false,
                "publication_date_1": false,
                "ressource": true,
                "sophora_id": true,
                "technische_nutzer": true,
                "tmstp": true
              },
              "includeByName": {},
              "indexByName": {
                "broadcast_id": 3,
                "headline": 1,
                "podcast_title": 0,
                "publication_date_2": 2,
                "technische_nutzer": 4,
                "zugriffe": 5
              },
              "renameByName": {
                "Mean": "Durschschnitt",
                "days7": "",
                "f0_": "Podcast",
                "f1_": "Technische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "V√ñ Datum",
                "technische_nutzer": "Technische Nutzer pro Tag",
                "zugriffe": "Zugriffe"
              }
            }
          }
        ],
        "transparent": true,
        "type": "table"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "custom": {
              "thresholdsStyle": {
                "mode": "color",
                "thresholds": []
              }
            },
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 5,
          "x": 0,
          "y": 90
        },
        "id": 87,
        "options": {
          "alwaysVisibleFilter": false,
          "autoScroll": false,
          "collapsedByDefault": false,
          "customValue": false,
          "displayMode": "minimize",
          "emptyValue": false,
          "favorites": {
            "addQuery": {},
            "datasource": "",
            "deleteQuery": {},
            "enabled": false,
            "getQuery": {},
            "storage": "browser"
          },
          "filter": false,
          "groupSelection": false,
          "header": false,
          "isUseLocalTime": false,
          "minimizeOutputFormat": "text",
          "padding": 20,
          "persistent": false,
          "saveSelectedGroup": false,
          "saveSelectedGroupKey": "",
          "showGroupTotal": false,
          "showLabel": false,
          "showName": false,
          "showResetButton": false,
          "showTotal": false,
          "statusSort": false,
          "sticky": false,
          "tabsInOrder": true,
          "variable": "Plattformen"
        },
        "pluginVersion": "3.6.0",
        "targets": [
          {
            "refId": "A"
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-variable-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 9,
          "w": 24,
          "x": 0,
          "y": 92
        },
        "id": 76,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto",
            "height": 2000
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'zugriffe').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'date').values;\n  const type = s.fields.find((f) => f.name === 'type').values[0];\n  const zugriffe = s.fields.find((f) => f.name === 'zugriffe').values;\n  const platform = s.fields.find((f) => f.name === 'platform').values[0];\n\n\n\n  if (type === \"bar\") {\n    return [\n      //{\n      //  name: 'Zugriffe',\n      //  type: type,\n      //  stack: 'total',\n      //  smooth: true,\n      // showSymbol: false,\n      //data: zugriffe.map((value, index) => [timeValues[index], value])\n      //},\n      {\n        name: platform,\n        type: type,\n        stack: 'total',\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(143, 178, 231)\"\n        },\n        data: zugriffe.map((value, index) => [timeValues[index], value])\n      },\n    ]\n  } else {\n    return [\n      {\n        name: platform,\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(143, 178, 231)\"\n        },\n        data: zugriffe.map((value, index) => [timeValues[index], value])\n      },\n    ]\n  }\n}).flat();\n\n\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  context.grafana.locationService.partial({ from: startValue, to: endValue });\n});\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'none'\n    },\n    formatter: function (params) {\n      let tooltipContent = formatDate(params[0].axisValue) + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einf√ºgen\n        let number = Math.floor(item.data[1]);\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + item.seriesName + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      formatter: function (value) {\n        const date = new Date(value);\n        let day = ('0' + date.getDate()).slice(-2);\n        let month = ('0' + (date.getMonth() + 1)).slice(-2);\n        let year = date.getFullYear();\n        return `${day}.${month}.${year}`;\n      },\n      //showMaxLabel: '20'\n    },\n  },\n  yAxis: {\n    type: 'value',\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "height": 400,
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT\n    date,\n    \"${type}\" as type,\n    SUM(m_zugriffe_1) AS zugriffe,\n    \"$Plattformen\" as platform,\n    DATE_DIFF(DATE('${__to:date}', \"Europe/Berlin\"),DATE('${__from:date}', \"Europe/Berlin\"),DAY) + 1 as timeRange\nFROM \n    $platform_dataset\nWHERE\n    broadcast_id IN ($podcast_ids)\n    AND (\"$Plattformen\" = \"Alle Plattformen\" OR platform = \"$Plattformen\")\n    AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY date\nORDER BY date ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "Zugriffe pro Tag f√ºr \"$Podcast_title\"",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": false,
                "date": false,
                "f0_": false,
                "podcast_title": false,
                "publication_date_1": false,
                "ressource": true,
                "sophora_id": true,
                "tmstp": true,
                "zugriffe": false
              },
              "indexByName": {
                "f0_": 3,
                "f1_": 4,
                "headline": 2,
                "podcast_title": 1,
                "publication_date_2": 0
              },
              "renameByName": {
                "f0_": "",
                "f1_": "Tenchnische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "Datum",
                "technische_nutzer": "Technische Nutzer",
                "zugriffe": "Zugriffe gesamt "
              }
            }
          }
        ],
        "type": "volkovlabs-echarts-panel"
      }
    ],
    "preload": false,
    "refresh": "",
    "schemaVersion": 40,
    "tags": [],
    "templating": {
      "list": [
        {
          "current": {
            "text": "NDR",
            "value": "NDR"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "includeAll": false,
          "label": "LRA:",
          "name": "LRA",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT a.LRA\r\nFROM (\r\nSELECT \"NDR\" as LRA\r\n) as a\r\nORDER BY (\r\n  CASE\r\n    WHEN REGEXP_CONTAINS(LOWER(\"${__user.email}\"), LOWER(a.LRA))\r\n    THEN 1\r\n    ELSE 0\r\n  END\r\n) DESC",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        },
        {
          "current": {
            "text": "04.04.2025",
            "value": "04.04.2025"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "datenstand",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \nFORMAT_DATETIME(\"%d.%m.%Y\", DATE(MAX(date)))\nFROM $episode_dataset\nWHERE CASE WHEN \"$Bereich\" = \"Alle Bereiche\" THEN TRUE\nELSE CASE WHEN \"$Podcast\" = \"All titles\" THEN TRUE\nELSE broadcast_id = \"${broadcast_id_branding}\" END END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Alle Bereiche ‚Äì alle Podcastreihen",
            "value": "Alle Bereiche ‚Äì alle Podcastreihen"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "Podcast_title",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \nCASE \n  WHEN '$Podcast' = 'All titles' \n  THEN '$Bereich ‚Äì alle Podcastreihen'\n  ELSE '$Podcast'\nEND \n",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "True",
            "value": "True"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "AllePodcastsCondition",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \n    CASE \"\"\"$AllePodcasts\"\"\"\n    WHEN \"None\"\n    THEN \"True\"\n    ELSE CAST(\"\"\" REPLACE(podcast_title,'\"','') = \"$AllePodcasts\" \"\"\" as string) \n    END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "all_titles_platforms",
            "value": "all_titles_platforms"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "dataset",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"\"\"${Podcast}\"\"\"\r\nWHEN \"All titles\" THEN \"all_titles_platforms\"\r\nELSE \"not_all_titles_platforms\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "allValue": "*",
          "current": {
            "text": "Alle Bereiche",
            "value": "Alle Bereiche"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "includeAll": false,
          "label": "Bereich:",
          "name": "Bereich",
          "options": [],
          "query": {
            "dataset": "Piano",
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT branding FROM (SELECT DISTINCT branding, 1 as sort \nFROM   $profiles_dataset\nWHERE $AllePodcastsCondition\nUNION DISTINCT\nSELECT CASE\nWHEN \"$AllePodcasts\" = \"None\" THEN \"Alle Bereiche\" END, 0 as sort)\nWHERE branding != \"\"\nOrder by sort, branding ASC",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "branding",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_podcasts"
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        },
        {
          "current": {
            "text": "All titles",
            "value": "All titles"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "includeAll": false,
          "label": "Podcast:",
          "name": "Podcast",
          "options": [],
          "query": {
            "dataset": "Piano",
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH all_podcasts AS(\n  SELECT podcast_title FROM $profiles_dataset\n  WHERE branding = \"$Bereich\"\n  UNION ALL\n  SELECT \"All titles\" as podcast_title \n)\nSELECT podcast_title FROM(\nSELECT DISTINCT REPLACE(podcast_title,'\"','') AS podcast_title, CASE podcast_title WHEN \"All titles\" THEN 0 ELSE 1 END AS sort  FROM all_podcasts\nWHERE $AllePodcastsCondition\nORDER BY sort,podcast_title DESC\n)\nORDER BY SORT, LOWER(podcast_title) ASC",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "podcast_title",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_podcasts"
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        },
        {
          "current": {
            "text": "All",
            "value": "$__all"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "includeAll": true,
          "label": "Episode:",
          "multi": true,
          "name": "Episode",
          "options": [],
          "query": {
            "dataset": "Piano",
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT REPLACE(headline,\"'\",\"\") FROM(\nSELECT DISTINCT headline, CASE headline WHEN \"All headlines\" THEN 0 ELSE 1 END AS sort  FROM $episode_dataset\nWHERE \nbranding = \"$Bereich\" \nAND REPLACE(podcast_title,'\"','') = \"\"\"$Podcast\"\"\"\nAND date > \"2022-01-01\"\nAND headline != \"All headlines\"\nORDER BY sort,headline DESC\n--ORDER BY podcast_title ASC\n)\nORDER BY SORT, headline ASC",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "headline",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        },
        {
          "current": {
            "text": "10",
            "value": "10"
          },
          "description": "",
          "hide": 2,
          "includeAll": false,
          "name": "filled_size_big",
          "options": [
            {
              "selected": true,
              "text": "10",
              "value": "10"
            }
          ],
          "query": "10",
          "skipUrlSync": true,
          "type": "custom"
        },
        {
          "current": {
            "text": "20",
            "value": "20"
          },
          "hide": 2,
          "includeAll": false,
          "name": "filled_size",
          "options": [
            {
              "selected": true,
              "text": "20",
              "value": "20"
            }
          ],
          "query": "20",
          "skipUrlSync": true,
          "type": "custom"
        },
        {
          "current": {
            "text": "44",
            "value": "44"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "filled_size_headline",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CAST(CHAR_LENGTH('$Podcast_title') + 10 AS STRING)",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "44",
            "value": "44"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "filled_size_headline_small",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CAST(CHAR_LENGTH('$Podcast_title') + 10 AS STRING)",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "",
            "value": ""
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "broadcast_id_branding",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT COALESCE(broadcast_id[0]) \nFROM $profiles_dataset\nWHERE \nbranding = \"$Bereich\" \nAND REPLACE(podcast_title,'\"','') = \"\"\"$Podcast\"\"\"",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvZmlsZVwvUXhLeVZObTkxemdFTTkxcmhIbnAuanBnIn0:norddeutscher-rundfunk:180WVEn3aprq-qhbFSwOtq-KZKuRXLnHIopbn4yYmvk?width=2400",
            "value": "https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvZmlsZVwvUXhLeVZObTkxemdFTTkxcmhIbnAuanBnIn0:norddeutscher-rundfunk:180WVEn3aprq-qhbFSwOtq-KZKuRXLnHIopbn4yYmvk?width=2400"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "Image",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH image AS (\n    SELECT coverart\n    FROM $profiles_dataset\n \n    WHERE broadcast_id[0] = \"$broadcast_id_branding\"\n)\nSELECT\n    CASE\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"N-JOY\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvNVwvYXNzZXRzXC8wOFwvMTk2XC9iYTlkZTc1MWZlZWMwNmViZDM0NDM2ODhmOGY0NzYxZS0xNjM2NjE2ODc3LmpwZyJ9:norddeutscher-rundfunk:uUTFFV1WGpZwfUFx0sn3hdp1-H5CQITeEe_0gdQHSHg?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR Info\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMThcL2Fzc2V0c1wvM2VcLzkxOVwvNjRhZjYzMmI2N2ZkYmVmZWJmY2Y0YThhNzAyNWIwZTAtMTY1MDQ0ODIzNS5qcGcifQ:norddeutscher-rundfunk:M9tIBD7laDLn0TY8Noqz3TQpSz1MpVJusNud1OhIXf4?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR 1 Niedersachsen\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMThcL2Fzc2V0c1wvYzRcLzkyM1wvMTcxMDY2ZmJhZDhjNDMxYmFiMDQ0Y2U2MWM0Mzg3OTEtMTY1MDQ0ODI2MC5qcGcifQ:norddeutscher-rundfunk:ZzBYV5x3vQVySQGINjGO7Nn1rD2IBf2U-aVvkcGLUKQ?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR Kultur\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMTNcL2Fzc2V0c1wvNzlcLzgyNlwvZGIyN2FjYWU0Yzg2OGM3ZTI3NTQxZDkxNzE0MjAwNGEtMTY1MDQ0MjE4NC5qcGcifQ:norddeutscher-rundfunk:25eKPn2M3tFARjFh3t6R-bPmSLoLn9wyrjcjYV2PDUU?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR Schlager\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMTNcL2Fzc2V0c1wvMGJcLzMzNTFcLzE3ODVkMGRhMWE4ODgzYmI0NDY2MDVkM2YzZTg1MzFlLTE2NTIwODIyNzkuanBnIn0:norddeutscher-rundfunk:VwGM84mU2ky8KhCMjG-Pi_TspF6g3RlDWjXLax_ldtg?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR Blue\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMTNcL2Fzc2V0c1wvZTJcLzgyMFwvOWIzM2FlYTk0MTc0NWRhMjg0N2Q0ZDAzMjk1NTBiZDUtMTY1MDQ0MjI5My5qcGcifQ:norddeutscher-rundfunk:_MP-DSfjU7vkyKTBphNKu6e1DpkneV6XbqU0p0jMTTc?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR 2\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMThcL2Fzc2V0c1wvN2ZcLzkyNVwvYWZmN2M4NDRlODA5YzZiZTc2M2VmOTQ3NmJkYzk2MjQtMTY1MDQ0ODI3NC5qcGcifQ:norddeutscher-rundfunk:mMzYVpGonLkg92QxTPEk_FRMnQSvl2YLWJUn9AO1MCw?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR 1 Welle Nord\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMThcL2Fzc2V0c1wvYmVcLzkyNFwvOGU3YmYyNGMwODMyYTE3OWIxMWMwZmFjNTVjNDc1YjItMTY1MDQ0ODI2Ny5qcGcifQ:norddeutscher-rundfunk:_ErYbOOYoM-EZW2RkoB8hGeCVRp_QREQd88PJUsWVmA?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR 90,3\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMTNcL2Fzc2V0c1wvM2JcLzgxOVwvMmY0ZDczYTFkYWU1OWVmYmM4NWY3YzhlODgwNTgwYmMtMTY1MDQ0MjMwMy5qcGcifQ:norddeutscher-rundfunk:oCxfVO8es9CwKcWtE71_1X0jed2e7AuB6zWTIClXjQU?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR 1 Radio MV\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMThcL2Fzc2V0c1wvY2NcLzkyMlwvNTQ5OWEyOGJkYmMxZTY2YjlmYTBhOTUyNmU0YzUzOGYtMTY1MDQ0ODI1NC5qcGcifQ:norddeutscher-rundfunk:XNlgWY1sGUwnrol98RYiWpBC3RxRi24hwB_pmYOjGxY?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"Sportschau\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://share.ard-zdf-box.de/apps/files_sharing/publicpreview/d3JyzdAbr4jmimG?file=/&fileId=259065425&x=2560&y=1440&a=true&etag=1abf7e86e7ef727f72ffdb803cd8d05a\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"Tagesschau\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://share.ard-zdf-box.de/apps/files_sharing/publicpreview/wNi9i6qxrr6F7w5?file=/&fileId=259065467&x=2560&y=1440&a=true&etag=60b50b9cfcc81c41877602f1c610f24a\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" THEN '$NDR_default_image'\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"MDR\" THEN '$MDR_default_image'\n        ELSE MAX(coverart)\n    END AS coverart\nFROM image;",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "line",
            "value": "line"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "type",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  \r\n  CASE \r\n    WHEN (DATE_DIFF(DATE('${__to:date}', \"Europe/Berlin\"), DATE('${__from:date}', \"Europe/Berlin\"), DAY) + 1) < 7 THEN \"bar\"\r\n    ELSE \"line\"\r\n  END;\r\n",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvZmlsZVwvUXhLeVZObTkxemdFTTkxcmhIbnAuanBnIn0:norddeutscher-rundfunk:180WVEn3aprq-qhbFSwOtq-KZKuRXLnHIopbn4yYmvk?width=2400",
            "value": "https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvZmlsZVwvUXhLeVZObTkxemdFTTkxcmhIbnAuanBnIn0:norddeutscher-rundfunk:180WVEn3aprq-qhbFSwOtq-KZKuRXLnHIopbn4yYmvk?width=2400"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "NDR_default_image",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvZmlsZVwvUXhLeVZObTkxemdFTTkxcmhIbnAuanBnIn0:norddeutscher-rundfunk:180WVEn3aprq-qhbFSwOtq-KZKuRXLnHIopbn4yYmvk?width=2400\" -- rechteckiges Social Media NDR\n--\"https://api.ardmediathek.de/image-service/images/urn:ard:image:02f00fc2617f6b55?w=256&ch=e14976ec4f71faec\" Quadratische NDR Dachmarke\n--\"https://www.ndr.de/der_ndr/unternehmen/logoihrndr100_v-contentxl.jpg\" Rechteckickes NDR Logo",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "09.04.2025 | 08:00 Uhr",
            "value": "09.04.2025 | 08:00 Uhr"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "lastUpdate",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \nCASE MAX(tmstp)\n  WHEN NULL THEN \"N/A\"\n  ELSE FORMAT_DATETIME(\"%d.%m.%Y | %H:%M Uhr\", DATETIME((TIMESTAMP(MAX(tmstp))),\"Europe/Berlin\") )\n  END\nFROM `ndr-code-bi-dashboard.Piano.NDR_podcast_episode_daily_f`\nWHERE date > DATE_SUB(CURRENT_DATE(), INTERVAL 10 day)\nAND CASE WHEN \"$Bereich\" = \"Alle Bereiche\" THEN TRUE\nELSE CASE WHEN \"$Podcast\" = \"All titles\" THEN TRUE\nELSE broadcast_id = \"${broadcast_id_branding}\" END END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "",
            "value": ""
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "mapping_dataset",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$Podcast\"\r\nWHEN \"All titles\" THEN \"\"\r\nELSE \"_mapped\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://share.ard-zdf-box.de/apps/files_sharing/publicpreview/Sxorbc6WLzk84iy?file=/&fileId=257042098&x=2132&y=1104&a=true&etag=31cb74f497586f722c788a3861963167",
            "value": "https://share.ard-zdf-box.de/apps/files_sharing/publicpreview/Sxorbc6WLzk84iy?file=/&fileId=257042098&x=2132&y=1104&a=true&etag=31cb74f497586f722c788a3861963167"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "MDR_default_image",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "-- SELECT \"https://cdn.mdr.de/presse/logos/mdr-dachmarke-100_v-variantBig16x9_wm-true_zc-ecbbafc6.png?version=17833\"\r\nSELECT \"https://share.ard-zdf-box.de/apps/files_sharing/publicpreview/Sxorbc6WLzk84iy?file=/&fileId=257042098&x=2132&y=1104&a=true&etag=31cb74f497586f722c788a3861963167\"",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "None",
            "value": "None"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "description": "Verwenden Sie das Dropdown-Men√º \"AllePodcasts\". In diesem Men√º finden Sie alle von uns gef√ºhrten Podcasts. Soll diese Option nicht verwendet werden, muss der Wert auf \"None\" gesetzt werden.",
          "includeAll": false,
          "label": "Podcastsuche:",
          "name": "AllePodcasts",
          "options": [],
          "query": {
            "dataset": "Piano",
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT podcast_title FROM(\n(SELECT DISTINCT REPLACE(podcast_title,'\"','') AS podcast_title,  1 AS sort  FROM $profiles_dataset\nORDER BY sort,podcast_title DESC\n)\nUNION ALL (SELECT \"None\", -1 as sort)\n)\nORDER BY SORT, LOWER(podcast_title) ASC\n\n",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "podcast_title",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_podcasts"
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        },
        {
          "current": {
            "text": "86",
            "value": "86"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "number_of_days",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH toDate AS(\r\n  SELECT CASE \r\n  WHEN DATE(TIMESTAMP('${__to:date:iso}'),'Europe/Berlin') >= DATE_SUB(CURRENT_DATE(), INTERVAL 5 DAY) THEN DATE_SUB(CURRENT_DATE(), INTERVAL 5 DAY)\r\n  ELSE DATE(TIMESTAMP('${__to:date:iso}'),'Europe/Berlin') END AS bisDatum\r\n)\r\nSELECT CAST(DATE_DIFF(bisDatum,DATE(TIMESTAMP('${__from:date:iso}'),'Europe/Berlin'), DAY) + 1 AS STRING)\r\nFROM toDate",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "_mapped",
            "value": "_mapped"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "dataset_suffix",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\nWHEN \"NDR\" THEN \"_mapped\"\nWHEN \"MDR\" THEN \"\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Piano.NDR_podcast_episode_daily_f_mapped",
            "value": "Piano.NDR_podcast_episode_daily_f_mapped"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "episode_dataset",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\nWHEN \"NDR\" THEN \"Piano.NDR_podcast_episode_daily_f_mapped\"\nWHEN \"MDR\" THEN \"Piano.MDR_podcast_episode_daily_f\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Piano.NDR_podcast_platform_daily_f_mapped",
            "value": "Piano.NDR_podcast_platform_daily_f_mapped"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "platform_dataset",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\nWHEN \"NDR\" THEN \"Piano.NDR_podcast_platform_daily_f_mapped\"\nWHEN \"MDR\" THEN \"Piano.MDR_podcast_platform_daily_f\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Piano.NDR_podcast_profiles",
            "value": "Piano.NDR_podcast_profiles"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "profiles_dataset",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\nWHEN \"NDR\" THEN \"Piano.NDR_podcast_profiles\"\nWHEN \"MDR\" THEN \"Piano.MDR_podcast_profiles_mapping\" END",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "## Der ausgewertete Zeitraum lautet: 10.01.25 - 04.04.2025 ",
            "value": "## Der ausgewertete Zeitraum lautet: 10.01.25 - 04.04.2025 "
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "hinweis",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE CONTAINS_SUBSTR(\"\"\"${zeitraum}\"\"\", \"DATE_ADD\")\nWHEN True  THEN \"## Hinweis: F√ºr den ausgew√§hlten Zeitraum liegen keine Daten vor.\"\nELSE \"\"\"## Der ausgewertete Zeitraum lautet: $fromDay - $toDay \"\"\"\nEND\n\n--Um Daten auswerten zu k√∂nnen, bitte gestern oder gr√∂√üere Zeitr√§ume ausw√§hlen.",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "10.01.25",
            "value": "10.01.25"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "fromDay",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT FORMAT_DATE(\"%d.%m.%y\",DATE(TIMESTAMP('${__from:date:iso}'),'Europe/Berlin'))",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "04.04.2025",
            "value": "04.04.2025"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "toDay_NDR",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \n-- case: last x<24 hours\n    WHEN TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), HOUR) = 24 AND EXTRACT(DAY FROM DATETIME('${__from:date:iso}', \"Europe/Berlin\")) != EXTRACT(DAY FROM DATETIME('${__to:date:iso}', \"Europe/Berlin\")) OR TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), MINUTE) < 1439\n    THEN   FORMAT_DATE(\"%d.%m.%y\",DATE_ADD(CURRENT_DATE,INTERVAL 1 DAY))\n-- SECOND case: today or bigger\n    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 4 DAY) AND EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= \"$datenstand_not_formated\"\n    THEN \"$datenstand\"\n    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 4 DAY) AND EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) < \"$datenstand_not_formated\"\n    THEN FORMAT_DATE(\"%d.%m.%y\",DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 5 DAY))\nELSE CASE \nWHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= \"$datenstand_not_formated\" THEN \"$datenstand\"\nELSE FORMAT_DATE(\"%d.%m.%y\",DATE_SUB(DATE('${__to:date}', \"Europe/Berlin\"), INTERVAL 0 DAY))\nEND \nEND\n--    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 4 DAY) \n--    THEN FORMAT_DATE(\"%d.%m.%y\",DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 5 DAY))\n--ELSE FORMAT_DATE(\"%d.%m.%y\",DATE_SUB(DATE('${__to:date}', \"Europe/Berlin\"), INTERVAL 0 DAY))\n--END \n\n",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE_SUB(\"2025-04-10\", INTERVAL 5 DAY))",
            "value": "(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE_SUB(\"2025-04-10\", INTERVAL 5 DAY))"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "zeitraum_NDR",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": " SELECT CASE \n\n       --  case: \"Last 24 HOURS \"\n    WHEN DATE('${__from:date:iso}', \"Europe/Berlin\") >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 4 DAY)  OR TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), HOUR) = 24 AND EXTRACT(DAY FROM DATETIME('${__from:date:iso}', \"Europe/Berlin\")) != EXTRACT(DAY FROM DATETIME('${__to:date:iso}', \"Europe/Berlin\")) OR TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), MINUTE) < 1439\n    THEN \"\"\"(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\"))  = DATE_ADD(CURRENT_DATE,INTERVAL 1 DAY))\"\"\"\n    -- case: CURRENT_DATE()\n    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 4 DAY) \n    THEN  \"\"\"(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE_SUB(\"$HeuteDatum\", INTERVAL 5 DAY))\"\"\"\n    ELSE  \"\"\"(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\"))\"\"\"\n\n    END \n",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "2025-04-10",
            "value": "2025-04-10"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "HeuteDatum",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CURRENT_DATE(\"Europe/Berlin\")",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "episodenschnitt = 1",
            "value": "episodenschnitt = 1"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "episodenschnitt_condition",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\r\nWHEN \"NDR\" THEN \"episodenschnitt = 1\"\r\nELSE \"TRUE = TRUE\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Podcast-Daten werden mit 5 Tagen Verz√∂gerung zur Verf√ºgung gestellt.",
            "value": "Podcast-Daten werden mit 5 Tagen Verz√∂gerung zur Verf√ºgung gestellt."
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "delay_text",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\r\nWHEN \"NDR\" THEN \"Podcast-Daten werden mit 5 Tagen Verz√∂gerung zur Verf√ºgung gestellt.\"\r\nWHEN \"MDR\" THEN \"Podcast-Daten werden mit 3 Tagen Verz√∂gerung zur Verf√ºgung gestellt.\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE_SUB(\"2025-04-10\", INTERVAL 3 DAY))",
            "value": "(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE_SUB(\"2025-04-10\", INTERVAL 3 DAY))"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "zeitraum_MDR",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": " SELECT CASE \n\n       --  case: \"Last 24 HOURS \"\n    WHEN DATE('${__from:date:iso}', \"Europe/Berlin\") >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 2 DAY)  OR TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), HOUR) = 24 AND EXTRACT(DAY FROM DATETIME('${__from:date:iso}', \"Europe/Berlin\")) != EXTRACT(DAY FROM DATETIME('${__to:date:iso}', \"Europe/Berlin\")) OR TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), MINUTE) < 1439\n    THEN \"\"\"(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\"))  = DATE_ADD(CURRENT_DATE,INTERVAL 1 DAY))\"\"\"\n    -- case: CURRENT_DATE()\n    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 2 DAY) \n    THEN  \"\"\"(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE_SUB(\"$HeuteDatum\", INTERVAL 3 DAY))\"\"\"\n    ELSE  \"\"\"(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\"))\"\"\"\n\n    END \n",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE_SUB(\"2025-04-10\", INTERVAL 5 DAY))",
            "value": "(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE_SUB(\"2025-04-10\", INTERVAL 5 DAY))"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "zeitraum",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\r\nWHEN \"NDR\" THEN \"\"\"$zeitraum_NDR\"\"\"\r\nWHEN \"MDR\" THEN \"\"\"$zeitraum_MDR\"\"\"\r\nEND",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "04.04.2025",
            "value": "04.04.2025"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "toDay_MDR",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \n-- case: last x<24 hours\n    WHEN TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), HOUR) = 24 AND EXTRACT(DAY FROM DATETIME('${__from:date:iso}', \"Europe/Berlin\")) != EXTRACT(DAY FROM DATETIME('${__to:date:iso}', \"Europe/Berlin\")) OR TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), MINUTE) < 1439\n    THEN   FORMAT_DATE(\"%d.%m.%y\",DATE_ADD(CURRENT_DATE,INTERVAL 1 DAY))\n-- SECOND case: today or bigger\n    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 2 DAY) AND EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= \"$datenstand_not_formated\"\n    THEN \"$datenstand\"\n    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 2 DAY) AND EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) < \"$datenstand_not_formated\"\n    THEN FORMAT_DATE(\"%d.%m.%y\",DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 3 DAY))\nELSE CASE \nWHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= \"$datenstand_not_formated\" THEN \"$datenstand\"\nELSE FORMAT_DATE(\"%d.%m.%y\",DATE_SUB(DATE('${__to:date}', \"Europe/Berlin\"), INTERVAL 0 DAY))\nEND \nEND\n\n--FORMAT_DATETIME(\"%d.%m.%Y\", )\n",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "04.04.2025",
            "value": "04.04.2025"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "toDay",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\r\nWHEN \"NDR\" THEN \"\"\"$toDay_NDR\"\"\"\r\nWHEN \"MDR\" THEN \"\"\"$toDay_MDR\"\"\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "2025-04-04",
            "value": "2025-04-04"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "datenstand_not_formated",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \nDATE(MAX(date))\nFROM $episode_dataset\nWHERE CASE WHEN \"$Bereich\" = \"Alle Bereiche\" THEN TRUE\nELSE CASE WHEN \"$Podcast\" = \"All titles\" THEN TRUE\nELSE broadcast_id = \"${broadcast_id_branding}\" END END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Alle Plattformen",
            "value": "Alle Plattformen"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "Plattformen",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT platform FROM (SELECT DISTINCT platform, 1 as sort \r\nFROM   $platform_dataset\r\nUNION DISTINCT\r\nSELECT \"Alle Plattformen\", 0 as sort)\r\nWHERE platform != \"\"\r\nOrder by sort, platform ASC",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        },
        {
          "current": {
            "text": "check",
            "value": "check"
          },
          "hide": 2,
          "includeAll": false,
          "name": "import_check",
          "options": [
            {
              "selected": true,
              "text": "check",
              "value": "check"
            }
          ],
          "query": "check",
          "skipUrlSync": true,
          "type": "custom"
        },
        {
          "current": {
            "text": "LIMIT 8",
            "value": "LIMIT 8"
          },
          "definition": "",
          "hide": 2,
          "name": "episodes_lim",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \r\nWHEN \"$Podcast\" = \"All titles\" THEN \"LIMIT 8\"\r\nWHEN \"${Episode:text}\" = \"All\" THEN \"LIMIT 8\"\r\nELSE \"\" END",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "2025-04-04",
            "value": "2025-04-04"
          },
          "definition": "",
          "hide": 2,
          "name": "max_date",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT MAX(date) FROM $episode_dataset\r\nWHERE date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY)",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "28",
            "value": "28"
          },
          "hide": 2,
          "label": "Anzahl Tage nach V√ñ",
          "name": "Tage",
          "options": [
            {
              "selected": false,
              "text": "0",
              "value": "0"
            },
            {
              "selected": false,
              "text": "1",
              "value": "1"
            },
            {
              "selected": false,
              "text": "2",
              "value": "2"
            },
            {
              "selected": false,
              "text": "3",
              "value": "3"
            },
            {
              "selected": false,
              "text": "4",
              "value": "4"
            },
            {
              "selected": false,
              "text": "5",
              "value": "5"
            },
            {
              "selected": false,
              "text": "6",
              "value": "6"
            },
            {
              "selected": false,
              "text": "7",
              "value": "7"
            },
            {
              "selected": false,
              "text": "8",
              "value": "8"
            },
            {
              "selected": false,
              "text": "9",
              "value": "9"
            },
            {
              "selected": false,
              "text": "10",
              "value": "10"
            },
            {
              "selected": false,
              "text": "11",
              "value": "11"
            },
            {
              "selected": false,
              "text": "12",
              "value": "12"
            },
            {
              "selected": false,
              "text": "13",
              "value": "13"
            },
            {
              "selected": false,
              "text": "14",
              "value": "14"
            },
            {
              "selected": false,
              "text": "15",
              "value": "15"
            },
            {
              "selected": false,
              "text": "16",
              "value": "16"
            },
            {
              "selected": false,
              "text": "17",
              "value": "17"
            },
            {
              "selected": false,
              "text": "18",
              "value": "18"
            },
            {
              "selected": false,
              "text": "19",
              "value": "19"
            },
            {
              "selected": false,
              "text": "20",
              "value": "20"
            },
            {
              "selected": false,
              "text": "21",
              "value": "21"
            },
            {
              "selected": false,
              "text": "22",
              "value": "22"
            },
            {
              "selected": false,
              "text": "23",
              "value": "23"
            },
            {
              "selected": false,
              "text": "24",
              "value": "24"
            },
            {
              "selected": false,
              "text": "25",
              "value": "25"
            },
            {
              "selected": false,
              "text": "26",
              "value": "26"
            },
            {
              "selected": false,
              "text": "27",
              "value": "27"
            },
            {
              "selected": true,
              "text": "28",
              "value": "28"
            },
            {
              "selected": false,
              "text": "29",
              "value": "29"
            },
            {
              "selected": false,
              "text": "30",
              "value": "30"
            },
            {
              "selected": false,
              "text": "31",
              "value": "31"
            },
            {
              "selected": false,
              "text": "32",
              "value": "32"
            },
            {
              "selected": false,
              "text": "33",
              "value": "33"
            },
            {
              "selected": false,
              "text": "34",
              "value": "34"
            },
            {
              "selected": false,
              "text": "35",
              "value": "35"
            },
            {
              "selected": false,
              "text": "36",
              "value": "36"
            },
            {
              "selected": false,
              "text": "37",
              "value": "37"
            },
            {
              "selected": false,
              "text": "38",
              "value": "38"
            },
            {
              "selected": false,
              "text": "39",
              "value": "39"
            },
            {
              "selected": false,
              "text": "40",
              "value": "40"
            },
            {
              "selected": false,
              "text": "41",
              "value": "41"
            },
            {
              "selected": false,
              "text": "42",
              "value": "42"
            },
            {
              "selected": false,
              "text": "43",
              "value": "43"
            },
            {
              "selected": false,
              "text": "44",
              "value": "44"
            },
            {
              "selected": false,
              "text": "45",
              "value": "45"
            },
            {
              "selected": false,
              "text": "46",
              "value": "46"
            },
            {
              "selected": false,
              "text": "47",
              "value": "47"
            },
            {
              "selected": false,
              "text": "48",
              "value": "48"
            },
            {
              "selected": false,
              "text": "49",
              "value": "49"
            },
            {
              "selected": false,
              "text": "50",
              "value": "50"
            },
            {
              "selected": false,
              "text": "51",
              "value": "51"
            },
            {
              "selected": false,
              "text": "52",
              "value": "52"
            },
            {
              "selected": false,
              "text": "53",
              "value": "53"
            },
            {
              "selected": false,
              "text": "54",
              "value": "54"
            },
            {
              "selected": false,
              "text": "55",
              "value": "55"
            },
            {
              "selected": false,
              "text": "56",
              "value": "56"
            },
            {
              "selected": false,
              "text": "57",
              "value": "57"
            },
            {
              "selected": false,
              "text": "58",
              "value": "58"
            },
            {
              "selected": false,
              "text": "59",
              "value": "59"
            },
            {
              "selected": false,
              "text": "60",
              "value": "60"
            },
            {
              "selected": false,
              "text": "61",
              "value": "61"
            },
            {
              "selected": false,
              "text": "62",
              "value": "62"
            },
            {
              "selected": false,
              "text": "63",
              "value": "63"
            },
            {
              "selected": false,
              "text": "64",
              "value": "64"
            },
            {
              "selected": false,
              "text": "65",
              "value": "65"
            },
            {
              "selected": false,
              "text": "66",
              "value": "66"
            },
            {
              "selected": false,
              "text": "67",
              "value": "67"
            },
            {
              "selected": false,
              "text": "68",
              "value": "68"
            },
            {
              "selected": false,
              "text": "69",
              "value": "69"
            },
            {
              "selected": false,
              "text": "70",
              "value": "70"
            },
            {
              "selected": false,
              "text": "71",
              "value": "71"
            },
            {
              "selected": false,
              "text": "72",
              "value": "72"
            },
            {
              "selected": false,
              "text": "73",
              "value": "73"
            },
            {
              "selected": false,
              "text": "74",
              "value": "74"
            },
            {
              "selected": false,
              "text": "75",
              "value": "75"
            },
            {
              "selected": false,
              "text": "76",
              "value": "76"
            },
            {
              "selected": false,
              "text": "77",
              "value": "77"
            },
            {
              "selected": false,
              "text": "78",
              "value": "78"
            },
            {
              "selected": false,
              "text": "79",
              "value": "79"
            },
            {
              "selected": false,
              "text": "80",
              "value": "80"
            },
            {
              "selected": false,
              "text": "81",
              "value": "81"
            },
            {
              "selected": false,
              "text": "82",
              "value": "82"
            },
            {
              "selected": false,
              "text": "83",
              "value": "83"
            },
            {
              "selected": false,
              "text": "84",
              "value": "84"
            },
            {
              "selected": false,
              "text": "85",
              "value": "85"
            },
            {
              "selected": false,
              "text": "86",
              "value": "86"
            },
            {
              "selected": false,
              "text": "87",
              "value": "87"
            },
            {
              "selected": false,
              "text": "88",
              "value": "88"
            },
            {
              "selected": false,
              "text": "89",
              "value": "89"
            },
            {
              "selected": false,
              "text": "90",
              "value": "90"
            },
            {
              "selected": false,
              "text": "91",
              "value": "91"
            },
            {
              "selected": false,
              "text": "92",
              "value": "92"
            },
            {
              "selected": false,
              "text": "93",
              "value": "93"
            },
            {
              "selected": false,
              "text": "94",
              "value": "94"
            },
            {
              "selected": false,
              "text": "95",
              "value": "95"
            },
            {
              "selected": false,
              "text": "96",
              "value": "96"
            },
            {
              "selected": false,
              "text": "97",
              "value": "97"
            },
            {
              "selected": false,
              "text": "98",
              "value": "98"
            },
            {
              "selected": false,
              "text": "99",
              "value": "99"
            }
          ],
          "query": "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99",
          "type": "custom"
        },
        {
          "current": {
            "text": "28",
            "value": "28"
          },
          "hide": 2,
          "label": "Anzahl Tage nach V√ñ",
          "name": "Tage_content_lifetime",
          "options": [
            {
              "selected": false,
              "text": "0",
              "value": "0"
            },
            {
              "selected": false,
              "text": "1",
              "value": "1"
            },
            {
              "selected": false,
              "text": "2",
              "value": "2"
            },
            {
              "selected": false,
              "text": "3",
              "value": "3"
            },
            {
              "selected": false,
              "text": "4",
              "value": "4"
            },
            {
              "selected": false,
              "text": "5",
              "value": "5"
            },
            {
              "selected": false,
              "text": "6",
              "value": "6"
            },
            {
              "selected": false,
              "text": "7",
              "value": "7"
            },
            {
              "selected": false,
              "text": "8",
              "value": "8"
            },
            {
              "selected": false,
              "text": "9",
              "value": "9"
            },
            {
              "selected": false,
              "text": "10",
              "value": "10"
            },
            {
              "selected": false,
              "text": "11",
              "value": "11"
            },
            {
              "selected": false,
              "text": "12",
              "value": "12"
            },
            {
              "selected": false,
              "text": "13",
              "value": "13"
            },
            {
              "selected": false,
              "text": "14",
              "value": "14"
            },
            {
              "selected": false,
              "text": "15",
              "value": "15"
            },
            {
              "selected": false,
              "text": "16",
              "value": "16"
            },
            {
              "selected": false,
              "text": "17",
              "value": "17"
            },
            {
              "selected": false,
              "text": "18",
              "value": "18"
            },
            {
              "selected": false,
              "text": "19",
              "value": "19"
            },
            {
              "selected": false,
              "text": "20",
              "value": "20"
            },
            {
              "selected": false,
              "text": "21",
              "value": "21"
            },
            {
              "selected": false,
              "text": "22",
              "value": "22"
            },
            {
              "selected": false,
              "text": "23",
              "value": "23"
            },
            {
              "selected": false,
              "text": "24",
              "value": "24"
            },
            {
              "selected": false,
              "text": "25",
              "value": "25"
            },
            {
              "selected": false,
              "text": "26",
              "value": "26"
            },
            {
              "selected": false,
              "text": "27",
              "value": "27"
            },
            {
              "selected": true,
              "text": "28",
              "value": "28"
            },
            {
              "selected": false,
              "text": "29",
              "value": "29"
            },
            {
              "selected": false,
              "text": "30",
              "value": "30"
            },
            {
              "selected": false,
              "text": "31",
              "value": "31"
            },
            {
              "selected": false,
              "text": "32",
              "value": "32"
            },
            {
              "selected": false,
              "text": "33",
              "value": "33"
            },
            {
              "selected": false,
              "text": "34",
              "value": "34"
            },
            {
              "selected": false,
              "text": "35",
              "value": "35"
            },
            {
              "selected": false,
              "text": "36",
              "value": "36"
            },
            {
              "selected": false,
              "text": "37",
              "value": "37"
            },
            {
              "selected": false,
              "text": "38",
              "value": "38"
            },
            {
              "selected": false,
              "text": "39",
              "value": "39"
            },
            {
              "selected": false,
              "text": "40",
              "value": "40"
            },
            {
              "selected": false,
              "text": "41",
              "value": "41"
            },
            {
              "selected": false,
              "text": "42",
              "value": "42"
            },
            {
              "selected": false,
              "text": "43",
              "value": "43"
            },
            {
              "selected": false,
              "text": "44",
              "value": "44"
            },
            {
              "selected": false,
              "text": "45",
              "value": "45"
            },
            {
              "selected": false,
              "text": "46",
              "value": "46"
            },
            {
              "selected": false,
              "text": "47",
              "value": "47"
            },
            {
              "selected": false,
              "text": "48",
              "value": "48"
            },
            {
              "selected": false,
              "text": "49",
              "value": "49"
            },
            {
              "selected": false,
              "text": "50",
              "value": "50"
            },
            {
              "selected": false,
              "text": "51",
              "value": "51"
            },
            {
              "selected": false,
              "text": "52",
              "value": "52"
            },
            {
              "selected": false,
              "text": "53",
              "value": "53"
            },
            {
              "selected": false,
              "text": "54",
              "value": "54"
            },
            {
              "selected": false,
              "text": "55",
              "value": "55"
            },
            {
              "selected": false,
              "text": "56",
              "value": "56"
            },
            {
              "selected": false,
              "text": "57",
              "value": "57"
            },
            {
              "selected": false,
              "text": "58",
              "value": "58"
            },
            {
              "selected": false,
              "text": "59",
              "value": "59"
            },
            {
              "selected": false,
              "text": "60",
              "value": "60"
            },
            {
              "selected": false,
              "text": "61",
              "value": "61"
            },
            {
              "selected": false,
              "text": "62",
              "value": "62"
            },
            {
              "selected": false,
              "text": "63",
              "value": "63"
            },
            {
              "selected": false,
              "text": "64",
              "value": "64"
            },
            {
              "selected": false,
              "text": "65",
              "value": "65"
            },
            {
              "selected": false,
              "text": "66",
              "value": "66"
            },
            {
              "selected": false,
              "text": "67",
              "value": "67"
            },
            {
              "selected": false,
              "text": "68",
              "value": "68"
            },
            {
              "selected": false,
              "text": "69",
              "value": "69"
            },
            {
              "selected": false,
              "text": "70",
              "value": "70"
            },
            {
              "selected": false,
              "text": "71",
              "value": "71"
            },
            {
              "selected": false,
              "text": "72",
              "value": "72"
            },
            {
              "selected": false,
              "text": "73",
              "value": "73"
            },
            {
              "selected": false,
              "text": "74",
              "value": "74"
            },
            {
              "selected": false,
              "text": "75",
              "value": "75"
            },
            {
              "selected": false,
              "text": "76",
              "value": "76"
            },
            {
              "selected": false,
              "text": "77",
              "value": "77"
            },
            {
              "selected": false,
              "text": "78",
              "value": "78"
            },
            {
              "selected": false,
              "text": "79",
              "value": "79"
            },
            {
              "selected": false,
              "text": "80",
              "value": "80"
            },
            {
              "selected": false,
              "text": "81",
              "value": "81"
            },
            {
              "selected": false,
              "text": "82",
              "value": "82"
            },
            {
              "selected": false,
              "text": "83",
              "value": "83"
            },
            {
              "selected": false,
              "text": "84",
              "value": "84"
            },
            {
              "selected": false,
              "text": "85",
              "value": "85"
            },
            {
              "selected": false,
              "text": "86",
              "value": "86"
            },
            {
              "selected": false,
              "text": "87",
              "value": "87"
            },
            {
              "selected": false,
              "text": "88",
              "value": "88"
            },
            {
              "selected": false,
              "text": "89",
              "value": "89"
            },
            {
              "selected": false,
              "text": "90",
              "value": "90"
            },
            {
              "selected": false,
              "text": "91",
              "value": "91"
            },
            {
              "selected": false,
              "text": "92",
              "value": "92"
            },
            {
              "selected": false,
              "text": "93",
              "value": "93"
            },
            {
              "selected": false,
              "text": "94",
              "value": "94"
            },
            {
              "selected": false,
              "text": "95",
              "value": "95"
            },
            {
              "selected": false,
              "text": "96",
              "value": "96"
            },
            {
              "selected": false,
              "text": "97",
              "value": "97"
            },
            {
              "selected": false,
              "text": "98",
              "value": "98"
            },
            {
              "selected": false,
              "text": "99",
              "value": "99"
            }
          ],
          "query": "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99",
          "type": "custom"
        },
        {
          "current": {
            "text": "days7, days14, days28, days56, days91, daysCustom",
            "value": "days7, days14, days28, days56, days91, daysCustom"
          },
          "definition": "",
          "hide": 2,
          "name": "avgEpisodesQueryCols",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \r\n    CASE \r\n        WHEN SUM(days91) > 0 AND SUM(daysCustom) > 0 THEN \"days7, days14, days28, days56, days91, daysCustom\"\r\n        WHEN SUM(days56) > 0 AND SUM(daysCustom) > 0 THEN \"days7, days14, days28, days56, daysCustom\"\r\n        WHEN SUM(days28) > 0 AND SUM(daysCustom) > 0 THEN \"days7, days14, days28, daysCustom\"\r\n        WHEN SUM(days14) > 0 AND SUM(daysCustom) > 0 THEN \"days7, days14, daysCustom\"\r\n        WHEN SUM(days7) > 0 AND SUM(daysCustom) > 0 THEN \"days7, daysCustom\"\r\n        WHEN SUM(daysCustom) > 0 THEN \"daysCustom\"\r\n        WHEN SUM(days91) > 0 THEN \"days7, days14, days28, days56, days91\"\r\n        WHEN SUM(days56) > 0 THEN \"days7, days14, days28, days56\"\r\n        WHEN SUM(days28) > 0 THEN \"days7, days14, days28\"\r\n        WHEN SUM(days14) > 0 THEN \"days7, days14\"\r\n        WHEN SUM(days7) > 0 THEN \"days7\"\r\n        ELSE \"daysElse\"\r\n    END AS col\r\nFROM (\r\n    $avgEpisodesQuery\r\n)\r\n",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "AVG(days7) as days7, AVG(days14) as days14, AVG(days28) as days28, AVG(days56) as days56, AVG(days91) as days91, AVG(daysCustom) as daysCustom",
            "value": "AVG(days7) as days7, AVG(days14) as days14, AVG(days28) as days28, AVG(days56) as days56, AVG(days91) as days91, AVG(daysCustom) as daysCustom"
          },
          "definition": "",
          "hide": 2,
          "name": "avg_avgEpisodesQueryCols",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \r\n    CASE \r\n        WHEN SUM(days91) > 0 AND SUM(daysCustom) > 0 THEN \"AVG(days7) as days7, AVG(days14) as days14, AVG(days28) as days28, AVG(days56) as days56, AVG(days91) as days91, AVG(daysCustom) as daysCustom\"\r\n        WHEN SUM(days56) > 0 AND SUM(daysCustom) > 0 THEN \"AVG(days7) as days7, AVG(days14) as days14, AVG(days28) as days28, AVG(days56) as days56, AVG(daysCustom) as daysCustom\"\r\n        WHEN SUM(days28) > 0 AND SUM(daysCustom) > 0 THEN \"AVG(days7) as days7, AVG(days14) as days14, AVG(days28) as days28, AVG(daysCustom) as daysCustom\"\r\n        WHEN SUM(days14) > 0 AND SUM(daysCustom) > 0 THEN \"AVG(days7) as days7, AVG(days14) as days14, AVG(daysCustom) as daysCustom\"\r\n        WHEN SUM(days7) > 0 AND SUM(daysCustom) > 0 THEN \"AVG(days7) as days7, AVG(daysCustom) as daysCustom\"\r\n        WHEN SUM(daysCustom) > 0 THEN \"AVG(daysCustom) as daysCustom\"\r\n        WHEN SUM(days91) > 0 THEN \"AVG(days7) as days7, AVG(days14) as days14, AVG(days28) as days28, AVG(days56) as days56, AVG(days91) as days91\"\r\n        WHEN SUM(days56) > 0 THEN \"AVG(days7) as days7, AVG(days14) as days14, AVG(days28) as days28, AVG(days56) as days56\"\r\n        WHEN SUM(days28) > 0 THEN \"AVG(days7) as days7, AVG(days14) as days14, AVG(days28) as days28\"\r\n        WHEN SUM(days14) > 0 THEN \"AVG(days7) as days7, AVG(days14) as days14\"\r\n        WHEN SUM(days7) > 0 THEN \"AVG(days7) as days7\"\r\n        ELSE \" 0 as daysElse\"\r\n    END AS col\r\nFROM (\r\n    $avgEpisodesQuery\r\n)\r\n",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "WITH episodes_headline AS (\n  SELECT headline, first_pub_date, RANK() OVER(ORDER BY zugriffe DESC) as rang, podcast_title FROM(\n  \n  SELECT headline, MIN(publication_date_6) AS first_pub_date, SUM(IFNULL(m_zugriffe_1,0)) as zugriffe, podcast_title\n  FROM `Piano.NDR_podcast_episode_daily_f_mapped`\n  JOIN Piano.NDR_podcast_episode_publication_dates USING (headline)\n  WHERE date BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND publication_date_6 BETWEEN  DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND CASE \"Alle Bereiche\"\n      WHEN \"Alle Bereiche\" THEN TRUE\n      ELSE branding = \"Alle Bereiche\"\n    END\n    AND CASE \"All titles\"\n      WHEN \"All titles\" THEN TRUE\n      ELSE REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY_CONCAT(ARRAY[], ARRAY['None'])) -- \n    END\n  GROUP BY headline, podcast_title\n  ORDER BY zugriffe DESC)\n  ORDER BY rang ASC\n  \n  --LIMIT 8\n),\ndate_range AS (\n SELECT\n  headline,\n  DATE_ADD(first_pub_date, INTERVAL seq DAY) AS date\nFROM episodes_headline\nCROSS JOIN UNNEST(\n  GENERATE_ARRAY(0, LEAST(91, DATE_DIFF(CURRENT_DATE(), first_pub_date, DAY)))\n) AS seq\n),\ncumulative_data AS (\n  SELECT\n  distinct\n    d.headline,\n    e.podcast_title,\n    DATE_DIFF(d.date, e.first_pub_date, DAY) + 1 AS days_since_pub,\n    SUM(IFNULL(p.m_zugriffe_1, 0)) OVER (PARTITION BY d.headline ORDER BY d.date) AS cumulative_zugriffe, \n    e.rang\n  FROM date_range d\n  JOIN episodes_headline e USING (headline)\n  LEFT JOIN `Piano.NDR_podcast_episode_daily_f_mapped` p \n    ON d.headline = p.headline \n    AND d.date = p.date\n), day_zero AS(\n  SELECT distinct headline, rang, days_since_pub, cumulative_zugriffe\n  FROM episodes_headline\n  CROSS JOIN (SELECT 0 as days_since_pub, 0 as cumulative_zugriffe)\n)\n  SELECT\n  podcast_title,\n  ROUND(AVG(CASE WHEN days_since_pub = 7 THEN cumulative_zugriffe END)) AS days7,\n  ROUND(AVG(CASE WHEN days_since_pub = 14 THEN cumulative_zugriffe END)) AS days14,\n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS days28,\n  ROUND(AVG(CASE WHEN days_since_pub = 56 THEN cumulative_zugriffe END)) AS days56,\n  ROUND(AVG(CASE WHEN days_since_pub = 91 THEN cumulative_zugriffe END)) AS days91, \n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS daysCustom,\nFROM\n  cumulative_data\nWHERE\n  days_since_pub IN (7, 14, 28, 28, 56, 91)\nGROUP BY\n  podcast_title",
            "value": "WITH episodes_headline AS (\n  SELECT headline, first_pub_date, RANK() OVER(ORDER BY zugriffe DESC) as rang, podcast_title FROM(\n  \n  SELECT headline, MIN(publication_date_6) AS first_pub_date, SUM(IFNULL(m_zugriffe_1,0)) as zugriffe, podcast_title\n  FROM `Piano.NDR_podcast_episode_daily_f_mapped`\n  JOIN Piano.NDR_podcast_episode_publication_dates USING (headline)\n  WHERE date BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND publication_date_6 BETWEEN  DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND CASE \"Alle Bereiche\"\n      WHEN \"Alle Bereiche\" THEN TRUE\n      ELSE branding = \"Alle Bereiche\"\n    END\n    AND CASE \"All titles\"\n      WHEN \"All titles\" THEN TRUE\n      ELSE REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY_CONCAT(ARRAY[], ARRAY['None'])) -- \n    END\n  GROUP BY headline, podcast_title\n  ORDER BY zugriffe DESC)\n  ORDER BY rang ASC\n  \n  --LIMIT 8\n),\ndate_range AS (\n SELECT\n  headline,\n  DATE_ADD(first_pub_date, INTERVAL seq DAY) AS date\nFROM episodes_headline\nCROSS JOIN UNNEST(\n  GENERATE_ARRAY(0, LEAST(91, DATE_DIFF(CURRENT_DATE(), first_pub_date, DAY)))\n) AS seq\n),\ncumulative_data AS (\n  SELECT\n  distinct\n    d.headline,\n    e.podcast_title,\n    DATE_DIFF(d.date, e.first_pub_date, DAY) + 1 AS days_since_pub,\n    SUM(IFNULL(p.m_zugriffe_1, 0)) OVER (PARTITION BY d.headline ORDER BY d.date) AS cumulative_zugriffe, \n    e.rang\n  FROM date_range d\n  JOIN episodes_headline e USING (headline)\n  LEFT JOIN `Piano.NDR_podcast_episode_daily_f_mapped` p \n    ON d.headline = p.headline \n    AND d.date = p.date\n), day_zero AS(\n  SELECT distinct headline, rang, days_since_pub, cumulative_zugriffe\n  FROM episodes_headline\n  CROSS JOIN (SELECT 0 as days_since_pub, 0 as cumulative_zugriffe)\n)\n  SELECT\n  podcast_title,\n  ROUND(AVG(CASE WHEN days_since_pub = 7 THEN cumulative_zugriffe END)) AS days7,\n  ROUND(AVG(CASE WHEN days_since_pub = 14 THEN cumulative_zugriffe END)) AS days14,\n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS days28,\n  ROUND(AVG(CASE WHEN days_since_pub = 56 THEN cumulative_zugriffe END)) AS days56,\n  ROUND(AVG(CASE WHEN days_since_pub = 91 THEN cumulative_zugriffe END)) AS days91, \n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS daysCustom,\nFROM\n  cumulative_data\nWHERE\n  days_since_pub IN (7, 14, 28, 28, 56, 91)\nGROUP BY\n  podcast_title"
          },
          "definition": "",
          "hide": 2,
          "label": "query_test",
          "name": "avgEpisodesQuery",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"\"\"WITH episodes_headline AS (\r\n  SELECT headline, first_pub_date, RANK() OVER(ORDER BY zugriffe DESC) as rang, podcast_title FROM(\r\n  \r\n  SELECT headline, MIN($pub_date_field) AS first_pub_date, SUM(IFNULL(m_zugriffe_1,0)) as zugriffe, podcast_title\r\n  FROM `$episode_dataset`\r\n  JOIN Piano.NDR_podcast_episode_publication_dates USING (headline)\r\n  WHERE date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND $pub_date_field BETWEEN  DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND CASE \"$Bereich\"\r\n      WHEN \"Alle Bereiche\" THEN TRUE\r\n      ELSE branding = \"$Bereich\"\r\n    END\r\n    AND CASE \"$Podcast\"\r\n      WHEN \"All titles\" THEN TRUE\r\n      ELSE REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY_CONCAT(ARRAY[$Episode], ARRAY['None'])) -- \r\n    END\r\n  GROUP BY headline, podcast_title\r\n  ORDER BY zugriffe DESC)\r\n  ORDER BY rang ASC\r\n  \r\n  --${episodes_lim}\r\n),\r\ndate_range AS (\r\n SELECT\r\n  headline,\r\n  DATE_ADD(first_pub_date, INTERVAL seq DAY) AS date\r\nFROM episodes_headline\r\nCROSS JOIN UNNEST(\r\n  GENERATE_ARRAY(0, LEAST(91, DATE_DIFF(CURRENT_DATE(), first_pub_date, DAY)))\r\n) AS seq\r\n),\r\ncumulative_data AS (\r\n  SELECT\r\n  distinct\r\n    d.headline,\r\n    e.podcast_title,\r\n    DATE_DIFF(d.date, e.first_pub_date, DAY) + 1 AS days_since_pub,\r\n    SUM(IFNULL(p.m_zugriffe_1, 0)) OVER (PARTITION BY d.headline ORDER BY d.date) AS cumulative_zugriffe, \r\n    e.rang\r\n  FROM date_range d\r\n  JOIN episodes_headline e USING (headline)\r\n  LEFT JOIN `$episode_dataset` p \r\n    ON d.headline = p.headline \r\n    AND d.date = p.date\r\n), day_zero AS(\r\n  SELECT distinct headline, rang, days_since_pub, cumulative_zugriffe\r\n  FROM episodes_headline\r\n  CROSS JOIN (SELECT 0 as days_since_pub, 0 as cumulative_zugriffe)\r\n)\r\n  SELECT\r\n  podcast_title,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 7 THEN cumulative_zugriffe END)) AS days7,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 14 THEN cumulative_zugriffe END)) AS days14,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS days28,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 56 THEN cumulative_zugriffe END)) AS days56,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 91 THEN cumulative_zugriffe END)) AS days91, \r\n  ROUND(AVG(CASE WHEN days_since_pub = $Tage THEN cumulative_zugriffe END)) AS daysCustom,\r\nFROM\r\n  cumulative_data\r\nWHERE\r\n  days_since_pub IN (7, 14, 28, $Tage, 56, 91)\r\nGROUP BY\r\n  podcast_title\"\"\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "WITH episodes_headline AS (\n  SELECT headline, first_pub_date, RANK() OVER(ORDER BY zugriffe DESC) as rang FROM(\n  \n  SELECT headline, MIN(publication_date_6) AS first_pub_date, SUM(IFNULL(m_zugriffe_1,0)) as zugriffe\n  FROM `Piano.NDR_podcast_episode_daily_f_mapped`\n  JOIN Piano.NDR_podcast_episode_publication_dates USING (headline)\n  WHERE date BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND publication_date_6 BETWEEN  DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND CASE \"Alle Bereiche\"\n      WHEN \"Alle Bereiche\" THEN TRUE\n      ELSE branding = \"Alle Bereiche\"\n    END\n    AND CASE \"All titles\"\n      WHEN \"All titles\" THEN TRUE\n      ELSE REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY_CONCAT(ARRAY[], ARRAY['None'])) -- \n    END\n  GROUP BY headline\n  ORDER BY zugriffe DESC)\n  ORDER BY rang ASC\n  \n  --LIMIT 8\n),\ndate_range AS (\n SELECT\n  headline,\n  DATE_ADD(first_pub_date, INTERVAL seq DAY) AS date\nFROM episodes_headline\nCROSS JOIN UNNEST(\n  GENERATE_ARRAY(0, LEAST(91, DATE_DIFF(CURRENT_DATE(), first_pub_date, DAY)))\n) AS seq\n),\ncumulative_data AS (\n  SELECT\n  DISTINCT\n    d.headline,\n    DATE_DIFF(d.date, e.first_pub_date, DAY) + 1 AS days_since_pub,\n    SUM(IFNULL(p.m_zugriffe_1, 0)) OVER (PARTITION BY d.headline ORDER BY d.date) AS cumulative_zugriffe, \n    e.rang\n  FROM date_range d\n  JOIN episodes_headline e USING (headline)\n  LEFT JOIN `Piano.NDR_podcast_episode_daily_f_mapped` p \n    ON d.headline = p.headline \n    AND d.date = p.date\n), day_zero AS(\n  SELECT distinct headline, rang, days_since_pub, cumulative_zugriffe\n  FROM episodes_headline\n  CROSS JOIN (SELECT 0 as days_since_pub, 0 as cumulative_zugriffe)\n)\n  SELECT\n  ROUND(AVG(CASE WHEN days_since_pub = 7 THEN cumulative_zugriffe END)) AS days7,\n  ROUND(AVG(CASE WHEN days_since_pub = 14 THEN cumulative_zugriffe END)) AS days14,\n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS days28,\n  ROUND(AVG(CASE WHEN days_since_pub = 56 THEN cumulative_zugriffe END)) AS days56,\n  ROUND(AVG(CASE WHEN days_since_pub = 91 THEN cumulative_zugriffe END)) AS days91, \n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS daysCustom,\nFROM\n  cumulative_data\nWHERE\n  days_since_pub   IN (7, 14, 28, 28, 56, 91)\n",
            "value": "WITH episodes_headline AS (\n  SELECT headline, first_pub_date, RANK() OVER(ORDER BY zugriffe DESC) as rang FROM(\n  \n  SELECT headline, MIN(publication_date_6) AS first_pub_date, SUM(IFNULL(m_zugriffe_1,0)) as zugriffe\n  FROM `Piano.NDR_podcast_episode_daily_f_mapped`\n  JOIN Piano.NDR_podcast_episode_publication_dates USING (headline)\n  WHERE date BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND publication_date_6 BETWEEN  DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND CASE \"Alle Bereiche\"\n      WHEN \"Alle Bereiche\" THEN TRUE\n      ELSE branding = \"Alle Bereiche\"\n    END\n    AND CASE \"All titles\"\n      WHEN \"All titles\" THEN TRUE\n      ELSE REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY_CONCAT(ARRAY[], ARRAY['None'])) -- \n    END\n  GROUP BY headline\n  ORDER BY zugriffe DESC)\n  ORDER BY rang ASC\n  \n  --LIMIT 8\n),\ndate_range AS (\n SELECT\n  headline,\n  DATE_ADD(first_pub_date, INTERVAL seq DAY) AS date\nFROM episodes_headline\nCROSS JOIN UNNEST(\n  GENERATE_ARRAY(0, LEAST(91, DATE_DIFF(CURRENT_DATE(), first_pub_date, DAY)))\n) AS seq\n),\ncumulative_data AS (\n  SELECT\n  DISTINCT\n    d.headline,\n    DATE_DIFF(d.date, e.first_pub_date, DAY) + 1 AS days_since_pub,\n    SUM(IFNULL(p.m_zugriffe_1, 0)) OVER (PARTITION BY d.headline ORDER BY d.date) AS cumulative_zugriffe, \n    e.rang\n  FROM date_range d\n  JOIN episodes_headline e USING (headline)\n  LEFT JOIN `Piano.NDR_podcast_episode_daily_f_mapped` p \n    ON d.headline = p.headline \n    AND d.date = p.date\n), day_zero AS(\n  SELECT distinct headline, rang, days_since_pub, cumulative_zugriffe\n  FROM episodes_headline\n  CROSS JOIN (SELECT 0 as days_since_pub, 0 as cumulative_zugriffe)\n)\n  SELECT\n  ROUND(AVG(CASE WHEN days_since_pub = 7 THEN cumulative_zugriffe END)) AS days7,\n  ROUND(AVG(CASE WHEN days_since_pub = 14 THEN cumulative_zugriffe END)) AS days14,\n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS days28,\n  ROUND(AVG(CASE WHEN days_since_pub = 56 THEN cumulative_zugriffe END)) AS days56,\n  ROUND(AVG(CASE WHEN days_since_pub = 91 THEN cumulative_zugriffe END)) AS days91, \n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS daysCustom,\nFROM\n  cumulative_data\nWHERE\n  days_since_pub   IN (7, 14, 28, 28, 56, 91)\n"
          },
          "definition": "",
          "hide": 2,
          "label": "query_test",
          "name": "avgEpisodesQueryForPodcastTable",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"\"\"WITH episodes_headline AS (\r\n  SELECT headline, first_pub_date, RANK() OVER(ORDER BY zugriffe DESC) as rang FROM(\r\n  \r\n  SELECT headline, MIN($pub_date_field) AS first_pub_date, SUM(IFNULL(m_zugriffe_1,0)) as zugriffe\r\n  FROM `$episode_dataset`\r\n  JOIN Piano.NDR_podcast_episode_publication_dates USING (headline)\r\n  WHERE date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND $pub_date_field BETWEEN  DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND CASE \"$Bereich\"\r\n      WHEN \"Alle Bereiche\" THEN TRUE\r\n      ELSE branding = \"$Bereich\"\r\n    END\r\n    AND CASE \"$Podcast\"\r\n      WHEN \"All titles\" THEN TRUE\r\n      ELSE REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY_CONCAT(ARRAY[$Episode], ARRAY['None'])) -- \r\n    END\r\n  GROUP BY headline\r\n  ORDER BY zugriffe DESC)\r\n  ORDER BY rang ASC\r\n  \r\n  --${episodes_lim}\r\n),\r\ndate_range AS (\r\n SELECT\r\n  headline,\r\n  DATE_ADD(first_pub_date, INTERVAL seq DAY) AS date\r\nFROM episodes_headline\r\nCROSS JOIN UNNEST(\r\n  GENERATE_ARRAY(0, LEAST(91, DATE_DIFF(CURRENT_DATE(), first_pub_date, DAY)))\r\n) AS seq\r\n),\r\ncumulative_data AS (\r\n  SELECT\r\n  DISTINCT\r\n    d.headline,\r\n    DATE_DIFF(d.date, e.first_pub_date, DAY) + 1 AS days_since_pub,\r\n    SUM(IFNULL(p.m_zugriffe_1, 0)) OVER (PARTITION BY d.headline ORDER BY d.date) AS cumulative_zugriffe, \r\n    e.rang\r\n  FROM date_range d\r\n  JOIN episodes_headline e USING (headline)\r\n  LEFT JOIN `$episode_dataset` p \r\n    ON d.headline = p.headline \r\n    AND d.date = p.date\r\n), day_zero AS(\r\n  SELECT distinct headline, rang, days_since_pub, cumulative_zugriffe\r\n  FROM episodes_headline\r\n  CROSS JOIN (SELECT 0 as days_since_pub, 0 as cumulative_zugriffe)\r\n)\r\n  SELECT\r\n  ROUND(AVG(CASE WHEN days_since_pub = 7 THEN cumulative_zugriffe END)) AS days7,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 14 THEN cumulative_zugriffe END)) AS days14,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS days28,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 56 THEN cumulative_zugriffe END)) AS days56,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 91 THEN cumulative_zugriffe END)) AS days91, \r\n  ROUND(AVG(CASE WHEN days_since_pub = $Tage THEN cumulative_zugriffe END)) AS daysCustom,\r\nFROM\r\n  cumulative_data\r\nWHERE\r\n  days_since_pub   IN (7, 14, 28, $Tage, 56, 91)\r\n\"\"\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "WITH episodes_headline AS (\n  SELECT headline, first_pub_date, RANK() OVER(ORDER BY zugriffe DESC) as rang FROM(\n  \n  SELECT headline, MIN(publication_date_6) AS first_pub_date, SUM(IFNULL(m_zugriffe_1,0)) as zugriffe\n  FROM `Piano.NDR_podcast_episode_daily_f_mapped`\n  JOIN Piano.NDR_podcast_episode_publication_dates USING (headline)\n  WHERE date BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND publication_date_6 BETWEEN  DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND CASE \"Alle Bereiche\"\n      WHEN \"Alle Bereiche\" THEN TRUE\n      ELSE branding = \"Alle Bereiche\"\n    END\n    AND CASE \"All titles\"\n      WHEN \"All titles\" THEN TRUE\n      ELSE REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY_CONCAT(ARRAY[], ARRAY['None'])) -- \n    END\n  GROUP BY headline\n  ORDER BY zugriffe DESC)\n  ORDER BY rang ASC\n  \n  --LIMIT 8\n),\ndate_range AS (\n SELECT\n  headline,\n  DATE_ADD(first_pub_date, INTERVAL seq DAY) AS date\nFROM episodes_headline\nCROSS JOIN UNNEST(\n  GENERATE_ARRAY(0, LEAST(91, DATE_DIFF(CURRENT_DATE(), first_pub_date, DAY)))\n) AS seq\n),\ncumulative_data AS (\n  SELECT\n    d.headline,\n    DATE_DIFF(d.date, e.first_pub_date, DAY) + 1 AS days_since_pub,\n    SUM(IFNULL(p.m_zugriffe_1, 0)) OVER (PARTITION BY d.headline ORDER BY d.date) AS cumulative_zugriffe, \n    e.rang\n  FROM date_range d\n  JOIN episodes_headline e USING (headline)\n  LEFT JOIN `Piano.NDR_podcast_episode_daily_f_mapped` p \n    ON d.headline = p.headline \n    AND d.date = p.date\n), day_zero AS(\n  SELECT distinct headline, rang, days_since_pub, cumulative_zugriffe\n  FROM episodes_headline\n  CROSS JOIN (SELECT 0 as days_since_pub, 0 as cumulative_zugriffe)\n)\n  SELECT\n  ROUND(AVG(CASE WHEN days_since_pub = 7 THEN cumulative_zugriffe END)) AS days7,\n  ROUND(AVG(CASE WHEN days_since_pub = 14 THEN cumulative_zugriffe END)) AS days14,\n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS days28,\n  ROUND(AVG(CASE WHEN days_since_pub = 56 THEN cumulative_zugriffe END)) AS days56,\n  ROUND(AVG(CASE WHEN days_since_pub = 91 THEN cumulative_zugriffe END)) AS days91, \n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS daysCustom,\nFROM\n  cumulative_data\nWHERE\n  days_since_pub   IN (7, 14, 28, 28, 56, 91)\n",
            "value": "WITH episodes_headline AS (\n  SELECT headline, first_pub_date, RANK() OVER(ORDER BY zugriffe DESC) as rang FROM(\n  \n  SELECT headline, MIN(publication_date_6) AS first_pub_date, SUM(IFNULL(m_zugriffe_1,0)) as zugriffe\n  FROM `Piano.NDR_podcast_episode_daily_f_mapped`\n  JOIN Piano.NDR_podcast_episode_publication_dates USING (headline)\n  WHERE date BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND publication_date_6 BETWEEN  DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\") AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND CASE \"Alle Bereiche\"\n      WHEN \"Alle Bereiche\" THEN TRUE\n      ELSE branding = \"Alle Bereiche\"\n    END\n    AND CASE \"All titles\"\n      WHEN \"All titles\" THEN TRUE\n      ELSE REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY_CONCAT(ARRAY[], ARRAY['None'])) -- \n    END\n  GROUP BY headline\n  ORDER BY zugriffe DESC)\n  ORDER BY rang ASC\n  \n  --LIMIT 8\n),\ndate_range AS (\n SELECT\n  headline,\n  DATE_ADD(first_pub_date, INTERVAL seq DAY) AS date\nFROM episodes_headline\nCROSS JOIN UNNEST(\n  GENERATE_ARRAY(0, LEAST(91, DATE_DIFF(CURRENT_DATE(), first_pub_date, DAY)))\n) AS seq\n),\ncumulative_data AS (\n  SELECT\n    d.headline,\n    DATE_DIFF(d.date, e.first_pub_date, DAY) + 1 AS days_since_pub,\n    SUM(IFNULL(p.m_zugriffe_1, 0)) OVER (PARTITION BY d.headline ORDER BY d.date) AS cumulative_zugriffe, \n    e.rang\n  FROM date_range d\n  JOIN episodes_headline e USING (headline)\n  LEFT JOIN `Piano.NDR_podcast_episode_daily_f_mapped` p \n    ON d.headline = p.headline \n    AND d.date = p.date\n), day_zero AS(\n  SELECT distinct headline, rang, days_since_pub, cumulative_zugriffe\n  FROM episodes_headline\n  CROSS JOIN (SELECT 0 as days_since_pub, 0 as cumulative_zugriffe)\n)\n  SELECT\n  ROUND(AVG(CASE WHEN days_since_pub = 7 THEN cumulative_zugriffe END)) AS days7,\n  ROUND(AVG(CASE WHEN days_since_pub = 14 THEN cumulative_zugriffe END)) AS days14,\n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS days28,\n  ROUND(AVG(CASE WHEN days_since_pub = 56 THEN cumulative_zugriffe END)) AS days56,\n  ROUND(AVG(CASE WHEN days_since_pub = 91 THEN cumulative_zugriffe END)) AS days91, \n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS daysCustom,\nFROM\n  cumulative_data\nWHERE\n  days_since_pub   IN (7, 14, 28, 28, 56, 91)\n"
          },
          "definition": "",
          "hide": 2,
          "label": "query_test",
          "name": "copy_of_avgEpisodesQueryForPodcastTable",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"\"\"WITH episodes_headline AS (\r\n  SELECT headline, first_pub_date, RANK() OVER(ORDER BY zugriffe DESC) as rang FROM(\r\n  \r\n  SELECT headline, MIN($pub_date_field) AS first_pub_date, SUM(IFNULL(m_zugriffe_1,0)) as zugriffe\r\n  FROM `$episode_dataset`\r\n  JOIN Piano.NDR_podcast_episode_publication_dates USING (headline)\r\n  WHERE date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND $pub_date_field BETWEEN  DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND CASE \"$Bereich\"\r\n      WHEN \"Alle Bereiche\" THEN TRUE\r\n      ELSE branding = \"$Bereich\"\r\n    END\r\n    AND CASE \"$Podcast\"\r\n      WHEN \"All titles\" THEN TRUE\r\n      ELSE REPLACE(headline, \"'\", \"\") IN UNNEST(ARRAY_CONCAT(ARRAY[$Episode], ARRAY['None'])) -- \r\n    END\r\n  GROUP BY headline\r\n  ORDER BY zugriffe DESC)\r\n  ORDER BY rang ASC\r\n  \r\n  --${episodes_lim}\r\n),\r\ndate_range AS (\r\n SELECT\r\n  headline,\r\n  DATE_ADD(first_pub_date, INTERVAL seq DAY) AS date\r\nFROM episodes_headline\r\nCROSS JOIN UNNEST(\r\n  GENERATE_ARRAY(0, LEAST(91, DATE_DIFF(CURRENT_DATE(), first_pub_date, DAY)))\r\n) AS seq\r\n),\r\ncumulative_data AS (\r\n  SELECT\r\n    d.headline,\r\n    DATE_DIFF(d.date, e.first_pub_date, DAY) + 1 AS days_since_pub,\r\n    SUM(IFNULL(p.m_zugriffe_1, 0)) OVER (PARTITION BY d.headline ORDER BY d.date) AS cumulative_zugriffe, \r\n    e.rang\r\n  FROM date_range d\r\n  JOIN episodes_headline e USING (headline)\r\n  LEFT JOIN `$episode_dataset` p \r\n    ON d.headline = p.headline \r\n    AND d.date = p.date\r\n), day_zero AS(\r\n  SELECT distinct headline, rang, days_since_pub, cumulative_zugriffe\r\n  FROM episodes_headline\r\n  CROSS JOIN (SELECT 0 as days_since_pub, 0 as cumulative_zugriffe)\r\n)\r\n  SELECT\r\n  ROUND(AVG(CASE WHEN days_since_pub = 7 THEN cumulative_zugriffe END)) AS days7,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 14 THEN cumulative_zugriffe END)) AS days14,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS days28,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 56 THEN cumulative_zugriffe END)) AS days56,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 91 THEN cumulative_zugriffe END)) AS days91, \r\n  ROUND(AVG(CASE WHEN days_since_pub = $Tage THEN cumulative_zugriffe END)) AS daysCustom,\r\nFROM\r\n  cumulative_data\r\nWHERE\r\n  days_since_pub   IN (7, 14, 28, $Tage, 56, 91)\r\n\"\"\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "WITH cumulative_data AS (\n  SELECT\n    podcast_title,\n    -- Calculate days since publication\n    DATE_DIFF(d.date, MIN(publication_date_6) OVER (PARTITION BY d.headline), DAY) AS days_since_pub,\n    -- Calculate cumulative sum of visits\n    SUM(d.m_zugriffe_1) OVER (PARTITION BY d.headline ORDER BY d.date) AS cumulative_zugriffe\n  FROM\n    `Piano.NDR_podcast_episode_daily_f_mapped` d\n    LEFT JOIN Piano.NDR_podcast_episode_publication_dates USING (headline)\n  WHERE\n    d.date BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\")\n    AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND publication_date_6 BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\")\n    AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND CASE \"Alle Bereiche\"\n        WHEN \"Alle Bereiche\" THEN TRUE\n        ELSE branding = \"Alle Bereiche\" END\n    AND CASE  \"All titles\"\n        WHEN \"All titles\" THEN TRUE\n        ELSE podcast_title = \"All titles\" END\n)SELECT podcast_title, AVG(days7), AVG(days14), AVG(days28), AVG(days56), AVG(days91), AVG(daysCustom)\n  SELECT\n  podcast_title,\n  ROUND(AVG(CASE WHEN days_since_pub = 7 THEN cumulative_zugriffe END)) AS days7,\n  ROUND(AVG(CASE WHEN days_since_pub = 14 THEN cumulative_zugriffe END)) AS days14,\n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS days28,\n  ROUND(AVG(CASE WHEN days_since_pub = 56 THEN cumulative_zugriffe END)) AS days56,\n  ROUND(AVG(CASE WHEN days_since_pub = 91 THEN cumulative_zugriffe END)) AS days91, \n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS daysCustom,\nFROM\n  cumulative_data\nWHERE\n  days_since_pub IN (7, 14, 28, 28, 56, 91)\nGROUP BY\n  podcast_title",
            "value": "WITH cumulative_data AS (\n  SELECT\n    podcast_title,\n    -- Calculate days since publication\n    DATE_DIFF(d.date, MIN(publication_date_6) OVER (PARTITION BY d.headline), DAY) AS days_since_pub,\n    -- Calculate cumulative sum of visits\n    SUM(d.m_zugriffe_1) OVER (PARTITION BY d.headline ORDER BY d.date) AS cumulative_zugriffe\n  FROM\n    `Piano.NDR_podcast_episode_daily_f_mapped` d\n    LEFT JOIN Piano.NDR_podcast_episode_publication_dates USING (headline)\n  WHERE\n    d.date BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\")\n    AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND publication_date_6 BETWEEN DATE('2025-01-10T07:15:06.782Z', \"Europe/Berlin\")\n    AND DATE('2025-04-10T06:15:06.782Z', \"Europe/Berlin\")\n    AND CASE \"Alle Bereiche\"\n        WHEN \"Alle Bereiche\" THEN TRUE\n        ELSE branding = \"Alle Bereiche\" END\n    AND CASE  \"All titles\"\n        WHEN \"All titles\" THEN TRUE\n        ELSE podcast_title = \"All titles\" END\n)SELECT podcast_title, AVG(days7), AVG(days14), AVG(days28), AVG(days56), AVG(days91), AVG(daysCustom)\n  SELECT\n  podcast_title,\n  ROUND(AVG(CASE WHEN days_since_pub = 7 THEN cumulative_zugriffe END)) AS days7,\n  ROUND(AVG(CASE WHEN days_since_pub = 14 THEN cumulative_zugriffe END)) AS days14,\n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS days28,\n  ROUND(AVG(CASE WHEN days_since_pub = 56 THEN cumulative_zugriffe END)) AS days56,\n  ROUND(AVG(CASE WHEN days_since_pub = 91 THEN cumulative_zugriffe END)) AS days91, \n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS daysCustom,\nFROM\n  cumulative_data\nWHERE\n  days_since_pub IN (7, 14, 28, 28, 56, 91)\nGROUP BY\n  podcast_title"
          },
          "definition": "",
          "hide": 2,
          "label": "query_test",
          "name": "avgOfavgEpisodesQuery",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"\"\"WITH cumulative_data AS (\r\n  SELECT\r\n    podcast_title,\r\n    -- Calculate days since publication\r\n    DATE_DIFF(d.date, MIN($pub_date_field) OVER (PARTITION BY d.headline), DAY) AS days_since_pub,\r\n    -- Calculate cumulative sum of visits\r\n    SUM(d.m_zugriffe_1) OVER (PARTITION BY d.headline ORDER BY d.date) AS cumulative_zugriffe\r\n  FROM\r\n    `$episode_dataset` d\r\n    LEFT JOIN Piano.NDR_podcast_episode_publication_dates USING (headline)\r\n  WHERE\r\n    d.date BETWEEN DATE('${__from:date}', \"Europe/Berlin\")\r\n    AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND $pub_date_field BETWEEN DATE('${__from:date}', \"Europe/Berlin\")\r\n    AND DATE('${__to:date}', \"Europe/Berlin\")\r\n    AND CASE \"$Bereich\"\r\n        WHEN \"Alle Bereiche\" THEN TRUE\r\n        ELSE branding = \"$Bereich\" END\r\n    AND CASE  \"$Podcast\"\r\n        WHEN \"All titles\" THEN TRUE\r\n        ELSE podcast_title = \"$Podcast\" END\r\n)SELECT podcast_title, AVG(days7), AVG(days14), AVG(days28), AVG(days56), AVG(days91), AVG(daysCustom)\r\n  SELECT\r\n  podcast_title,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 7 THEN cumulative_zugriffe END)) AS days7,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 14 THEN cumulative_zugriffe END)) AS days14,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 28 THEN cumulative_zugriffe END)) AS days28,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 56 THEN cumulative_zugriffe END)) AS days56,\r\n  ROUND(AVG(CASE WHEN days_since_pub = 91 THEN cumulative_zugriffe END)) AS days91, \r\n  ROUND(AVG(CASE WHEN days_since_pub = $Tage THEN cumulative_zugriffe END)) AS daysCustom,\r\nFROM\r\n  cumulative_data\r\nWHERE\r\n  days_since_pub IN (7, 14, 28, $Tage, 56, 91)\r\nGROUP BY\r\n  podcast_title\"\"\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Pub Date 6",
            "value": "Pub Date 6"
          },
          "description": "",
          "hide": 2,
          "label": "Pub Date Version",
          "name": "PubDate",
          "options": [
            {
              "selected": true,
              "text": "Pub Date 6",
              "value": "Pub Date 6"
            }
          ],
          "query": "Pub Date 6",
          "skipUrlSync": true,
          "type": "custom"
        },
        {
          "current": {
            "text": "publication_date_6",
            "value": "publication_date_6"
          },
          "definition": "",
          "hide": 2,
          "name": "pub_date_field",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$PubDate\"\r\nWHEN \"Pub Date 2\" THEN \"publication_date_2\"\r\nWHEN \"Pub Date 3\" THEN \"publication_date_3\"\r\nWHEN \"Pub Date 4\" THEN \"publication_date_4\"\r\nWHEN \"Pub Date 5\" THEN \"publication_date_5\"\r\nWHEN \"Pub Date 6\" THEN \"publication_date_6\"\r\n\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "'1003','1011','1015','1020','1026','1028','1032','1041','1052','1063','1064','1069','1074','1077','1093','1096','1103','1106','1112','1117','1130','1139','1147','1149','1150','1155','1209','1218','1219','1221','129','1291','1313','1334','1341','1343','1345','1347','1349','1350','1353','1361','1362','1363','1364','1365','1366','1367','1393','1456','1466','1491','1497','1525','1526','1534','1592','1593','1611','1616','1619','1625','2000','4325','4411','4452','4482','4485','4491','4516','4521','4524','4532','4538','4545','4549','4551','4552','4556','4561','4564','4565','4568','4583','4589','4592','4596','4597','4600','4601','4614','4615','4616','4618','4620','4622','4625','4626','4635','4636','4637','4642','4646','4648','4649','4651','4663','4665','4667','4677','4680','4684','4688','4698','4699','4700','4701','4702','4703','4704','4705','4716','4724','4725','4730','4733','4745','4751','4755','4756','4757','4768','4769','4770','4771','4772','4773','4774','4777','4778','4779','4781','4787','4789','4790','4801','4811','4818','4819','4821','4824','4829','4831','4832','4833','4835','4837','4839','4843','4847','4848','4849','4855','4856','4859','4861','4862','4873','4882','4884','4886','4889','4890','4892','4895','4896','4897','4909','4919','4920','4923','4925','4941','4942','4943','4944','4945','4946','4947','4949','4950','4952','4953','4959','4974','4978','4980','4986','4991','4995','5001','5002','5003','5004','5008','5016','5020','5027','5028','5029','5037','5038','5039','5042','5044','5049','5050','5061','5066','5082','5083','652'",
            "value": "'1003','1011','1015','1020','1026','1028','1032','1041','1052','1063','1064','1069','1074','1077','1093','1096','1103','1106','1112','1117','1130','1139','1147','1149','1150','1155','1209','1218','1219','1221','129','1291','1313','1334','1341','1343','1345','1347','1349','1350','1353','1361','1362','1363','1364','1365','1366','1367','1393','1456','1466','1491','1497','1525','1526','1534','1592','1593','1611','1616','1619','1625','2000','4325','4411','4452','4482','4485','4491','4516','4521','4524','4532','4538','4545','4549','4551','4552','4556','4561','4564','4565','4568','4583','4589','4592','4596','4597','4600','4601','4614','4615','4616','4618','4620','4622','4625','4626','4635','4636','4637','4642','4646','4648','4649','4651','4663','4665','4667','4677','4680','4684','4688','4698','4699','4700','4701','4702','4703','4704','4705','4716','4724','4725','4730','4733','4745','4751','4755','4756','4757','4768','4769','4770','4771','4772','4773','4774','4777','4778','4779','4781','4787','4789','4790','4801','4811','4818','4819','4821','4824','4829','4831','4832','4833','4835','4837','4839','4843','4847','4848','4849','4855','4856','4859','4861','4862','4873','4882','4884','4886','4889','4890','4892','4895','4896','4897','4909','4919','4920','4923','4925','4941','4942','4943','4944','4945','4946','4947','4949','4950','4952','4953','4959','4974','4978','4980','4986','4991','4995','5001','5002','5003','5004','5008','5016','5020','5027','5028','5029','5037','5038','5039','5042','5044','5049','5050','5061','5066','5082','5083','652'"
          },
          "definition": "",
          "hide": 2,
          "name": "podcast_ids",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \r\n  CONCAT(\"'\",STRING_AGG(broadcast_id, \"','\" ORDER BY broadcast_id ASC), \"'\") \r\nFROM\r\n  (\r\n    SELECT \r\n      DISTINCT CAST(broadcast_id[0] AS STRING) AS broadcast_id\r\n    FROM \r\n      $profiles_dataset\r\n    WHERE \r\n      (\"$Bereich\" = \"Alle Bereiche\" OR branding = \"$Bereich\")\r\n      AND (\"\"\"$Podcast\"\"\" = \"All titles\" OR broadcast_id[0] = \"$broadcast_id_branding\")\r\n  )",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://vqggwrz.pa-cd.com/event?s=645199&idclient=minerva&events=%5B%7B%22name%22%3A%22page.display%22%2C%22data%22%3A%7B%22page%22%3A%22Podcast NDR%22%2C%22m_visits%22%3A1%2C%22minerva_dashboard_id%22%3A%22degsov7hnpr0gf%22%2C%22minerva_lra%22%3A%22dev%22%2C%22minerva_filter%22%3A%22\nLRA=NDR|::|Bereich=Alle Bereiche|::|Podcast=All titles|::|Episode=|::|Podcastsuche=None|::|Zeitraum_von=08.04.25|::|Zeitraum_bis=03.05.2025\n%22%7D%7D%5D",
            "value": "https://vqggwrz.pa-cd.com/event?s=645199&idclient=minerva&events=%5B%7B%22name%22%3A%22page.display%22%2C%22data%22%3A%7B%22page%22%3A%22Podcast NDR%22%2C%22m_visits%22%3A1%2C%22minerva_dashboard_id%22%3A%22degsov7hnpr0gf%22%2C%22minerva_lra%22%3A%22dev%22%2C%22minerva_filter%22%3A%22\nLRA=NDR|::|Bereich=Alle Bereiche|::|Podcast=All titles|::|Episode=|::|Podcastsuche=None|::|Zeitraum_von=08.04.25|::|Zeitraum_bis=03.05.2025\n%22%7D%7D%5D"
          },
          "definition": "",
          "hide": 2,
          "name": "src_url",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH nutzer AS (\n  SELECT\nCASE\n    WHEN CONTAINS_SUBSTR(\"${__user.login}\", \"dev\") THEN \"dev\"\n    WHEN CONTAINS_SUBSTR(\"${__user.login}\", \"mefo\") THEN \"mefo\"\n    WHEN CONTAINS_SUBSTR(\"${__user.email}\", \"@\") THEN\n      REGEXP_EXTRACT(\"${__user.email}\", r'@([^\\.]+)')  -- Extracts part after '@' and before the first '.' Example: ad.westphal@ndr.de => ndr\n    WHEN NOT CONTAINS_SUBSTR(\"${__user.email}\", \"@\")\n         AND (CONTAINS_SUBSTR(\"${__user.email}\", \"viewer\") \n         OR CONTAINS_SUBSTR(\"${__user.email}\", \"podcast\")) THEN\n            REGEXP_EXTRACT(\"${__user.email}\", r'^([^-\\s]+)')  -- Extracts part before the first '-'. Example: ndr-viewer => ndr\n    ELSE\n      \"Anonym\"\n  END AS nutzer_lra\n),\nfilter_string AS (\n  SELECT \"\"\"\nLRA=${LRA}|::|Bereich=${Bereich}|::|Podcast=${Podcast}|::|Episode=${Episode}|::|Podcastsuche=${AllePodcasts}|::|Zeitraum_von=${fromDay}|::|Zeitraum_bis=${toDay_NDR}\n\"\"\" AS filter\n)\n\nSELECT CONCAT(\n  \"https://vqggwrz.pa-cd.com/event?s=645199&idclient=minerva&events=%5B%7B%22name%22%3A%22page.display%22%2C%22data%22%3A%7B%22page%22%3A%22\",\n  \"${__dashboard.name}\",\n  \"%22%2C%22m_visits%22%3A1%2C%22minerva_dashboard_id%22%3A%22\",\n  \"${__dashboard.uid}\",\n  \"%22%2C%22minerva_lra%22%3A%22\",\n  nutzer.nutzer_lra,\n  \"%22%2C%22minerva_filter%22%3A%22\",\n  filter_string.filter,\n  \"%22%7D%7D%5D\"\n) AS event_url\nFROM nutzer, filter_string",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        }
      ]
    },
    "time": {
      "from": "now-30d",
      "to": "now"
    },
    "timepicker": {},
    "timezone": "",
    "title": "Podcast NDR",
    "uid": "degsov7hnpr0gf",
    "version": 58,
    "weekStart": ""
  }
}

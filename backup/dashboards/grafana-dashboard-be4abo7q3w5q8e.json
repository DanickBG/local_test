{
  "meta": {
    "type": "db",
    "canSave": true,
    "canEdit": true,
    "canAdmin": true,
    "canStar": true,
    "canDelete": true,
    "slug": "report-kompetenzcenter-mvp",
    "url": "/d/be4abo7q3w5q8e/report-kompetenzcenter-mvp",
    "expires": "0001-01-01T00:00:00Z",
    "created": "2024-11-18T05:09:42Z",
    "updated": "2025-03-26T13:51:40Z",
    "updatedBy": "bernd kuch dev",
    "createdBy": "adrian westphal dev",
    "version": 170,
    "hasAcl": false,
    "isFolder": false,
    "folderId": 660,
    "folderUid": "folder-F9a5Uxn4k",
    "folderTitle": "Prototypes",
    "folderUrl": "/dashboards/f/folder-F9a5Uxn4k/prototypes",
    "provisioned": false,
    "provisionedExternalId": "",
    "annotationsPermissions": {
      "dashboard": {
        "canAdd": true,
        "canEdit": true,
        "canDelete": true
      },
      "organization": {
        "canAdd": true,
        "canEdit": true,
        "canDelete": true
      }
    }
  },
  "dashboard": {
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": {
            "type": "grafana",
            "uid": "-- Grafana --"
          },
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "type": "dashboard"
        }
      ]
    },
    "editable": true,
    "fiscalYearStartMonth": 0,
    "graphTooltip": 0,
    "id": 1572,
    "links": [],
    "panels": [
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 0
        },
        "id": 8,
        "panels": [],
        "title": "KPIs",
        "type": "row"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 21,
          "x": 0,
          "y": 1
        },
        "id": 58,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; align-items: center; background-color: rgb(0, 51, 179); padding: 25px; border-radius: 10px; color: white;\">\n    <h3 style=\"margin: 0; font-weight: bold;\">ABRUFE NACH PLATTFORMEN (Views in Mio.)</h3>\n</div>\n\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "description": "Zuschauer:innen sahen mind. eine Sendung für mind. eine Minute am Stück im ausgewerteten Quartal (kumulierter Nettowert).",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 21,
          "y": 1
        },
        "id": 61,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; align-items: center; background-color: rgb(0, 51, 179); padding: 25px; border-radius: 5px; color: white;\">\n    <h3 style=\"margin: 0; font-weight: bold; font-size: 20px;\">(Seher in Mio.)</h3>\n</div>\n\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 0,
          "y": 4
        },
        "id": 20,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img width=\"65\" height=\"65\" src=\"$image_yt\" style=\"display: block; \n           margin-left: auto;\n           margin-right: auto;\"/>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 3,
          "y": 4
        },
        "id": 19,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img width=\"65\" height=\"65\" src=\"$image_fb\" style=\"display: block; \n           margin-left: auto;\n           margin-right: auto;\"/>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 6,
          "y": 4
        },
        "id": 18,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img width=\"65\" height=\"65\" src=\"$image_insta\" style=\"display: block; \n           margin-left: auto;\n           margin-right: auto;\"/>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 9,
          "y": 4
        },
        "id": 21,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img width=\"65\" height=\"65\" src=\"$image_tt\" style=\"display: block; \n           margin-left: auto;\n           margin-right: auto;\"/>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 12,
          "y": 4
        },
        "id": 22,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img width=\"180\" height=\"50\" src=\"$ard_audiothek\" style=\"display: block; \n           margin-left: auto;\n           margin-right: auto;\"/>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 15,
          "y": 4
        },
        "id": 23,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; justify-content: center; align-items: center; height: 9vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Web &amp; App</h3>\r\n</div>\r\n",
          "mode": "html"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 18,
          "y": 4
        },
        "id": 24,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img width=\"180\" height=\"50\" src=\"$ard_mediathek\" style=\"display: block; \n           margin-left: auto;\n           margin-right: auto;\"/>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 21,
          "y": 4
        },
        "id": 27,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; justify-content: center; align-items: center; height: 9vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">TV / ARD</h3>\r\n</div>\r\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 0,
          "y": 7
        },
        "id": 1,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n(\r\nSELECT IFNULL(SUM(views_daily),0)/1000000 as summe\r\nFROM KC.yt_video_metrics\r\nWHERE $Zeitraum_condition\r\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 3,
          "y": 7
        },
        "id": 2,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n(\r\nSELECT IFNULL(SUM(video_views_daily),0)/1000000 as summe\r\nFROM KC.fb_profile_metrics\r\nWHERE $Zeitraum_condition\r\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 6,
          "y": 7
        },
        "id": 38,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT IFNULL(SUM(video_views_quintly),0)/1000000\r\nFROM KC.ig_insight_kc\r\nWHERE $Zeitraum_condition\r\nAND profileId IN ($ig_ids) ",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 9,
          "y": 7
        },
        "id": 39,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n(\r\nSELECT IFNULL(SUM(views_daily),0)/1000000 as summe\r\nFROM KC.tt_insight_kc\r\nWHERE $Zeitraum_condition\r\nAND profileId IN ($tt_ids) \r\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 12,
          "y": 7
        },
        "id": 40,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n(\r\nSELECT 0.705 as summe\r\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 15,
          "y": 7
        },
        "id": 41,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n(\r\nSELECT \"0.917\" as summe\r\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 18,
          "y": 7
        },
        "id": 42,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n\r\n(SELECT \"1.731\" as summe )",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 21,
          "y": 7
        },
        "id": 43,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n\r\n(SELECT \"12.577\" as summe)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 24,
          "x": 0,
          "y": 10
        },
        "id": 60,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; align-items: center; background-color: rgb(0, 51, 179); padding: 25px; border-radius: 10px; color: white;\">\n    <h3 style=\"margin: 0; font-weight: bold;\">NUTZUNGSDAUER NACH PLATTFORMEN (Stunden in Mio.)</h3>\n</div>\n\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 0,
          "y": 13
        },
        "id": 30,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img width=\"65\" height=\"65\" src=\"$image_yt\" style=\"display: block; \n           margin-left: auto;\n           margin-right: auto;\"/>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 3,
          "y": 13
        },
        "id": 31,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img width=\"65\" height=\"65\" src=\"$image_fb\" style=\"display: block; \n           margin-left: auto;\n           margin-right: auto;\"/>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 6,
          "y": 13
        },
        "id": 32,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img width=\"65\" height=\"65\" src=\"$image_insta\" style=\"display: block; \n           margin-left: auto;\n           margin-right: auto;\"/>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 9,
          "y": 13
        },
        "id": 33,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img width=\"65\" height=\"65\" src=\"$image_tt\" style=\"display: block; \n           margin-left: auto;\n           margin-right: auto;\"/>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 12,
          "y": 13
        },
        "id": 34,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img width=\"180\" height=\"50\" src=\"$ard_audiothek\" style=\"display: block; \n           margin-left: auto;\n           margin-right: auto;\"/>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 15,
          "y": 13
        },
        "id": 35,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; justify-content: center; align-items: center; height: 9vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Web &amp; App</h3>\r\n</div>\r\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 18,
          "y": 13
        },
        "id": 37,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<img width=\"180\" height=\"50\" src=\"$ard_mediathek\" style=\"display: block; \n           margin-left: auto;\n           margin-right: auto;\"/>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 21,
          "y": 13
        },
        "id": 28,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; justify-content: center; align-items: center; height: 9vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">TV / ARD</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 0,
          "y": 16
        },
        "id": 44,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \",\", \".\")) FROM\r\n(\r\nSELECT IFNULL(ROUND(SUM(watch_time_sec_daily)/60/60),0)/1000000 AS summe\r\nFROM KC.yt_video_metrics\r\nWHERE $Zeitraum_condition\r\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 3,
          "y": 16
        },
        "id": 45,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/.*/",
            "values": true
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n(SELECT IFNULL(ROUND(Sum(video_view_time_ms_daily/1000/60/60)),0)/1000000 as summe\r\nFROM KC.fb_profile_metrics\r\nWHERE $Zeitraum_condition)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "convertFieldType",
            "options": {
              "conversions": [
                {
                  "destinationType": "string",
                  "targetField": "f0_"
                }
              ],
              "fields": {}
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Die Nutzungsdauer kann derzeit nur für Reels ausgewiesen werden und liegt deutlich unter 1 Mio. Sehstunden.",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 6,
          "y": 16
        },
        "id": 46,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n\r\n(SELECT IFNULL( ROUND(Sum(reels_total_watch_time_ms_quintly*1.0/1000/60/60)),0)/1000000 as summe\r\nFROM KC.ig_insight_kc\r\nWHERE $Zeitraum_condition\r\nAND profileId IN ($ig_ids))\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 9,
          "y": 16
        },
        "id": 47,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "valueSize": 20
          },
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"Die Nutzungsdauer kann derzeit nicht ausgewiesen werden.\"",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 12,
          "y": 16
        },
        "id": 48,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n(\r\nSELECT \"0.290\" as summe)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 15,
          "y": 16
        },
        "id": 49,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n(\r\nSELECT \"0.110\" as summe) ",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 18,
          "y": 16
        },
        "id": 50,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n(\r\nSELECT \"0.310\" AS SUMME)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "text",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 21,
          "y": 16
        },
        "id": 51,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^f0_$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "value",
          "wideLayout": true
        },
        "pluginVersion": "11.3.1",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CAST(CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.3f\", CAST(summe as NUMERIC)) AS STRING), \".\", \",\")) AS STRING) FROM\r\n(\r\nSELECT \"14.750\" as summe\r\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "stat"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 19
        },
        "id": 52,
        "panels": [],
        "title": "ARD Mediathek",
        "type": "row"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 24,
          "x": 0,
          "y": 20
        },
        "id": 59,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; align-items: center; background-color: rgb(0, 51, 179); padding: 5px; border-radius: 5px; color: white;\">\n    <img width=\"180\" height=\"50\" src=\"$ard_mediathek\" style=\"margin-right: 10px;\"/>\n    <h3 style=\"margin: 0; font-weight: bold;\">ARD Mediathek</h3>\n</div>\n\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.1",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "transparent",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 1,
          "w": 6,
          "x": 0,
          "y": 23
        },
        "id": 54,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20,
            "valueSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  'Bitte beachten: jew. unterschiedliche Skala'\nFROM(\nSELECT 'Bitte beachten: jew. unterschiedliche Skala' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "transparent",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 1,
          "w": 9,
          "x": 10,
          "y": 23
        },
        "id": 72,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20,
            "valueSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \" \"",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "description": "Visite enthält die Abrufe von Natur-Docs.",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 24,
          "x": 0,
          "y": 24
        },
        "id": 127,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: inline-flex; align-items: center;\">\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #013480; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Bin ich schön?</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #4067a0; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Visite</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #7f99bf; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Abenteuer Diagnose</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #bfccdf; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Die Ernährungs-Docs</span>\n  </div>\n</div>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 12,
          "x": 0,
          "y": 26
        },
        "id": 62,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Videoabrufe</h3>\r\n    <h3>bundesweit in Mio.</h3>\r\n</div>\r\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 12,
          "x": 12,
          "y": 26
        },
        "id": 63,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Sehvolumen</h3>\r\n    <h3>bundesweit in Mio. Stunden</h3>\r\n</div>\r\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 11,
          "w": 12,
          "x": 0,
          "y": 29
        },
        "id": 55,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'Gesamt').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'time').values;\n  const bin_ich_schoen = s.fields.find((f) => f.name === 'bin_ich_schoen').values;\n  const visite = s.fields.find((f) => f.name === 'visite').values;\n  const abenteuer_diagnose = s.fields.find((f) => f.name === 'abenteuer_diagnose').values;\n  const die_ernaehrungs_docs = s.fields.find((f) => f.name === 'die_ernaehrungs_docs').values;\n\n  return [\n    {\n      name: 'Bin ich schön?',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(1, 52, 128)\"\n      },\n      data: bin_ich_schoen.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Visite',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(64, 103, 160)\"\n      },\n      data: visite.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Abenteuer Diagnose',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(127, 153, 191)\"\n      },\n      data: abenteuer_diagnose.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Die Ernährungs-Docs',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        },\n        style: {\n          fontWeight: 'bold' // Apply bold style here\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(191, 204, 223)\"\n      },\n      data: die_ernaehrungs_docs.map((value, index) => [timeValues[index], value])\n    }\n  ]\n}).flat();\n\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    show: false,\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16,\n      bold: true\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      // Additional style settings\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    }\n  }\n  ,\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH data AS (\r\n  SELECT \"Juli 24\" AS time, \"Bin ich schön?\" AS profil, 31272/1000000 AS video_view, 1 AS order_num\r\n  UNION ALL\r\n  SELECT \"Juli 24\" AS time, \"Visite\" AS profil, 489248/1000000 AS video_view, 1 AS order_num\r\n  UNION ALL\r\n  SELECT \"Juli 24\" AS time, \"Abenteuer Diagnose\" AS profil, 77979/1000000 AS video_view, 1 AS order_num\r\n  UNION ALL\r\n  SELECT \"Juli 24\" AS time, \"Die Ernährungs-Docs\" AS profil, 101898/1000000 AS video_view, 1 AS order_num\r\n  UNION ALL\r\n  SELECT \"Juli 24\" AS time, \"Gesamt\" AS profil, 700397/1000000 AS video_view, 1 AS order_num\r\n  UNION ALL\r\n  SELECT \"Aug. 24\" AS time, \"Bin ich schön?\" AS profil, 8905/1000000 AS video_view, 2 AS order_num\r\n  UNION ALL\r\n  SELECT \"Aug. 24\" AS time, \"Visite\" AS profil, 271635/1000000 AS video_view, 2 AS order_num\r\n  UNION ALL\r\n  SELECT \"Aug. 24\" AS time, \"Abenteuer Diagnose\" AS profil, 63110/1000000 AS video_view, 2 AS order_num\r\n  UNION ALL\r\n  SELECT \"Aug. 24\" AS time, \"Die Ernährungs-Docs\" AS profil, 81040/1000000 AS video_view, 2 AS order_num\r\n  UNION ALL\r\n  SELECT \"Aug. 24\" AS time, \"Gesamt\" AS profil, 424690/1000000 AS video_view, 2 AS order_num\r\n  UNION ALL\r\n  SELECT \"Sep. 24\" AS time, \"Bin ich schön?\" AS profil, 20692/1000000 AS video_view, 3 AS order_num\r\n  UNION ALL\r\n  SELECT \"Sep. 24\" AS time, \"Visite\" AS profil, 403585/1000000 AS video_view, 3 AS order_num\r\n  UNION ALL\r\n  SELECT \"Sep. 24\" AS time, \"Abenteuer Diagnose\" AS profil, 62857/1000000 AS video_view, 3 AS order_num\r\n  UNION ALL\r\n  SELECT \"Sep. 24\" AS time, \"Die Ernährungs-Docs\" AS profil, 118858/1000000 AS video_view, 3 AS order_num\r\n  UNION ALL\r\n  SELECT \"Sep. 24\" AS time, \"Gesamt\" AS profil, 605992/1000000 AS video_view, 3 AS order_num\r\n)\r\nSELECT * \r\nFROM data\r\nPIVOT (\r\n  SUM(video_view) \r\n  FOR profil IN (\"Bin ich schön?\" AS bin_ich_schoen, \r\n                 \"Visite\" AS visite, \r\n                 \"Abenteuer Diagnose\" AS abenteuer_diagnose, \r\n                 \"Die Ernährungs-Docs\" AS die_ernaehrungs_docs,\r\n                 \"Gesamt\")\r\n)\r\nORDER BY order_num ASC;\r\n\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 11,
          "w": 12,
          "x": 12,
          "y": 29
        },
        "id": 64,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'Gesamt').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'time').values;\n  const bin_ich_schoen = s.fields.find((f) => f.name === 'bin_ich_schoen').values;\n  const visite = s.fields.find((f) => f.name === 'visite').values;\n  const abenteuer_diagnose = s.fields.find((f) => f.name === 'abenteuer_diagnose').values;\n  const die_ernaehrungs_docs = s.fields.find((f) => f.name === 'die_ernaehrungs_docs').values;\n\n  return [\n    {\n      name: 'Bin ich schön?',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(1, 52, 128)\"\n      },\n      data: bin_ich_schoen.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Visite',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(64, 103, 160)\"\n      },\n      data: visite.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Abenteuer Diagnose',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(127, 153, 191)\"\n      },\n      data: abenteuer_diagnose.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Die Ernährungs-Docs',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(191, 204, 223)\"\n      },\n      data: die_ernaehrungs_docs.map((value, index) => [timeValues[index], value])\n    }\n  ]\n}).flat();\n\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    show: false,\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      // Additional style settings\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    }\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH data AS (\r\n  SELECT \"Juli 24\" AS time, \"Bin ich schön?\" AS profil, 7828/1000000 AS video_view, 1 AS order_num\r\n  UNION ALL\r\n  SELECT \"Juli 24\" AS time, \"Visite\" AS profil, 68107/1000000 AS video_view, 1 AS order_num\r\n  UNION ALL\r\n  SELECT \"Juli 24\" AS time, \"Abenteuer Diagnose\" AS profil, 27637/1000000 AS video_view, 1 AS order_num\r\n  UNION ALL\r\n  SELECT \"Juli 24\" AS time, \"Die Ernährungs-Docs\" AS profil, 22949/1000000 AS video_view, 1 AS order_num\r\n  UNION ALL\r\n  SELECT \"Juli 24\" AS time, \"Gesamt\" AS profil, 126521/1000000 AS video_view, 1 AS order_num\r\n  UNION ALL\r\n  SELECT \"Aug. 24\" AS time, \"Bin ich schön?\" AS profil, 1951/1000000 AS video_view, 2 AS order_num\r\n  UNION ALL\r\n  SELECT \"Aug. 24\" AS time, \"Visite\" AS profil, 36436/1000000 AS video_view, 2 AS order_num\r\n  UNION ALL\r\n  SELECT \"Aug. 24\" AS time, \"Abenteuer Diagnose\" AS profil, 20386/1000000 AS video_view, 2 AS order_num\r\n  UNION ALL\r\n  SELECT \"Aug. 24\" AS time, \"Die Ernährungs-Docs\" AS profil, 17253/1000000 AS video_view, 2 AS order_num\r\n  UNION ALL\r\n  SELECT \"Aug. 24\" AS time, \"Gesamt\" AS profil, 76026/1000000 AS video_view, 2 AS order_num\r\n  UNION ALL\r\n  SELECT \"Sep. 24\" AS time, \"Bin ich schön?\" AS profil, 5139/1000000 AS video_view, 3 AS order_num\r\n  UNION ALL\r\n  SELECT \"Sep. 24\" AS time, \"Visite\" AS profil, 58834/1000000 AS video_view, 3 AS order_num\r\n  UNION ALL\r\n  SELECT \"Sep. 24\" AS time, \"Abenteuer Diagnose\" AS profil, 20309/1000000 AS video_view, 3 AS order_num\r\n  UNION ALL\r\n  SELECT \"Sep. 24\" AS time, \"Die Ernährungs-Docs\" AS profil, 27512/1000000 AS video_view, 3 AS order_num\r\n  UNION ALL\r\n  SELECT \"Sep. 24\" AS time, \"Gesamt\" AS profil, 111794/1000000 AS video_view, 3 AS order_num\r\n)\r\nSELECT * \r\nFROM data\r\nPIVOT (\r\n  SUM(video_view) \r\n  FOR profil IN (\"Bin ich schön?\" AS bin_ich_schoen, \r\n                 \"Visite\" AS visite, \r\n                 \"Abenteuer Diagnose\" AS abenteuer_diagnose, \r\n                 \"Die Ernährungs-Docs\" AS die_ernaehrungs_docs,\r\n                 \"Gesamt\")\r\n)\r\nORDER BY order_num ASC;\r\n\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 40
        },
        "id": 65,
        "panels": [],
        "title": "Lineares Fernsehen (Gesamtblick)",
        "type": "row"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 24,
          "x": 0,
          "y": 41
        },
        "id": 66,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; align-items: center; background-color: rgb(0, 51, 179); padding: 5px; border-radius: 5px; color: white;\">\n    <img width=\"65\" height=\"65\" src=\"$lineares_fernsehen\" style=\"margin-right: 10px;\"/>\n    <h3 style=\"margin: 0; font-weight: bold;\">Lineares Fernsehen</h3>\n</div>\n\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "transparent",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 1,
          "w": 6,
          "x": 0,
          "y": 44
        },
        "id": 73,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20,
            "valueSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  'Bitte beachten: jew. unterschiedliche Skala'\nFROM(\nSELECT 'Bitte beachten: jew. unterschiedliche Skala' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "transparent",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 1,
          "w": 9,
          "x": 10,
          "y": 44
        },
        "id": 74,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20,
            "valueSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \" \"",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 12,
          "x": 0,
          "y": 45
        },
        "id": 69,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Seher</h3>\r\n    <h3>bundesweit in Mio.</h3>\r\n</div>\r\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 12,
          "x": 12,
          "y": 45
        },
        "id": 70,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Sehvolumen</h3>\r\n    <h3>bundesweit in Mio. Stunden (kumuliert)</h3>\r\n</div>\r\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 11,
          "w": 12,
          "x": 0,
          "y": 49
        },
        "id": 67,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'lineares_fernsehen').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'time').values;\n  const lineares_fernsehen = s.fields.find((f) => f.name === 'lineares_fernsehen').values;\n\n  return [\n    {\n      name: 'Seher',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(1, 52, 128)\"\n      },\n      data: lineares_fernsehen.map((value, index) => [timeValues[index], value])\n    }\n  ]\n}).flat();\n\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    show: false,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      // Additional style settings\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    }\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH data AS (\r\n  SELECT \"3. Quartal 2024\" AS time, \"Lineares Fernsehen\" AS profil, 12577*1000/1000000 AS video_view, 1 AS order_num\r\n)\r\nSELECT * \r\nFROM data\r\nPIVOT (\r\n  SUM(video_view) \r\n  FOR profil IN (\"Lineares Fernsehen\" as lineares_fernsehen\r\n                )\r\n)\r\nORDER BY order_num ASC;\r\n\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 11,
          "w": 12,
          "x": 12,
          "y": 49
        },
        "id": 68,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'lineares_fernsehen').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'time').values;\n  const lineares_fernsehen = s.fields.find((f) => f.name === 'lineares_fernsehen').values;\n\n  return [\n    {\n      name: 'Sehvolumen',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(1, 52, 128)\"\n      },\n      data: lineares_fernsehen.map((value, index) => [timeValues[index], value])\n    }\n  ]\n}).flat();\n\n\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    show: false,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      // Additional style settings\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    }\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH data AS (\r\n  SELECT \"3. Quartal 2024\" AS time, \"Lineares Fernsehen\" AS profil, 14752*1000/1000000 AS video_view, 1 AS order_num\r\n)\r\nSELECT * \r\nFROM data\r\nPIVOT (\r\n  SUM(video_view) \r\n  FOR profil IN (\"Lineares Fernsehen\" as lineares_fernsehen\r\n                )\r\n)\r\nORDER BY order_num ASC;\r\n\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 24,
          "x": 0,
          "y": 60
        },
        "id": 111,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; align-items: center; background-color: rgb(172, 205, 255); padding: 5px; border-radius: 5px; color: white;\">\n    <h3 style=\"margin: 0; font-weight: bold; color: rgb(1, 52, 128);\">Struktur (Basis: Sehbeteiligung)</h3>\n</div>\n\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 11,
          "w": 8,
          "x": 0,
          "y": 62
        },
        "id": 76,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const ageData = [\n  { value: 0.8, name: '3-13 J.', itemStyle: { color: 'rgb(31,86,102)' } },\n  { value: 0.8, name: '14-29 J.', itemStyle: { color: 'rgb(46,128,154)' } },\n  { value: 5.9, name: '30-49 J.', itemStyle: { color: 'rgb(67,168,199)' } },\n  { value: 38.3, name: '50-69 J.', itemStyle: { color: 'rgb(142,203,221)' } },\n  { value: 54.2, name: '70+ J.', itemStyle: { color: 'rgb(180,220,232)' } },\n];\n\n\nreturn {\n  title: {\n    show: false,\n    text: 'Age Distribution',\n    left: 'center',\n    textStyle: {\n      fontSize: 16,\n    },\n  },\n  tooltip: {\n    trigger: 'item',\n    formatter: (params) => {\n      const formattedPercent = params.value.toLocaleString('de-DE', { minimumFractionDigits: 1, maximumFractionDigits: 3 });\n      return `<span style=\"font-weight:bold;\">${params.name}</span>: ${formattedPercent}%`;\n    },\n  },\n  legend: {\n    orient: 'vertical',\n    left: 'left',\n    show: false,\n    textStyle: {\n      fontSize: 14,\n    },\n  },\n  series: [\n    {\n      name: 'Age Group',\n      type: 'pie',\n      radius: ['40%', '70%'], // Inner and outer radius for donut\n      data: ageData,\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)',\n        },\n      },\n      label: {\n        show: true,\n        position: 'inside', // Places the labels inside the donut\n        formatter: (params) => {\n          // Format the value with a comma as decimal separator\n          return params.value.toLocaleString('de-DE', { minimumFractionDigits: 1, maximumFractionDigits: 3 }) + \"%\";\n        },\n        fontSize: 14,\n        fontWeight: 'bold',\n        // color: 'rgb(1, 52, 128)', // Sets label text color for visibility\n      },\n    },\n  ],\n  backgroundColor: 'transparent',\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "-- Create a dummy table\r\nWITH age_distribution AS (\r\nSELECT '3-13 J.' AS age_group, 80 AS count UNION ALL\r\nSELECT '14-29 J.' AS age_group, 80 AS count UNION ALL\r\nSELECT '30-49 J.' AS age_group, 59 AS count UNION ALL\r\nSELECT '50-69 J.' AS age_group, 383 AS count UNION ALL\r\nSELECT '70+ J.' AS age_group, 542 AS count)\r\n-- Select the data to verify\r\nSELECT * FROM age_distribution;\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 11,
          "w": 8,
          "x": 8,
          "y": 62
        },
        "id": 77,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const ageData = [\n  { value: 35.5, name: 'Frauen ab 14J.', itemStyle: { color: 'rgb(144,170,23)' } },\n  { value: 63.7, name: 'Männer ab 14J.', itemStyle: { color: 'rgb(191,225,33)' } },\n];\n\n\nreturn {\n  title: {\n    show: false,\n    text: 'Age Distribution',\n    left: 'center',\n    textStyle: {\n      fontSize: 16,\n    },\n  },\n  tooltip: {\n    trigger: 'item',\n    formatter: (params) => {\n      const formattedPercent = params.value.toLocaleString('de-DE', { minimumFractionDigits: 1, maximumFractionDigits: 3 });\n      return `<span style=\"font-weight:bold;\">${params.name}</span>: ${formattedPercent}%`;\n    },\n  },\n  legend: {\n    orient: 'vertical',\n    left: 'left',\n    show: false,\n    textStyle: {\n      fontSize: 14,\n    },\n  },\n  series: [\n    {\n      name: 'Age Group',\n      type: 'pie',\n      radius: ['40%', '70%'], // Inner and outer radius for donut\n      data: ageData,\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)',\n        },\n      },\n      label: {\n        show: true,\n        position: 'inside', // Places the labels inside the donut\n        formatter: (params) => {\n          // Format the value with a comma as decimal separator\n          return params.value.toLocaleString('de-DE', { minimumFractionDigits: 1, maximumFractionDigits: 3 }) + \"%\";\n        },\n        fontSize: 14,\n        fontWeight: 'bold',\n        // color: 'rgb(1, 52, 128)', // Sets label text color for visibility\n      },\n    },\n  ],\n  backgroundColor: 'transparent',\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "-- Create a dummy table\r\nWITH age_distribution AS (\r\nSELECT 'Frauen ab 14J.' AS age_group, 80 AS count UNION ALL\r\nSELECT 'Männer ab 14.' AS age_group, 80 AS count UNION ALL\r\nSELECT '30-49 J.' AS age_group, 59 AS count UNION ALL\r\nSELECT '50-69 J.' AS age_group, 383 AS count UNION ALL\r\nSELECT '70+ J.' AS age_group, 542 AS count)\r\n-- Select the data to verify\r\nSELECT * FROM age_distribution;\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Bildung: gering: Volks-/Hauptschule; mittel: Realschule o. Ä.; hoch: Abitur/Studium",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 11,
          "w": 8,
          "x": 16,
          "y": 62
        },
        "id": 78,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const ageData = [\n  { value: 34.7, name: 'formal gering', itemStyle: { color: 'rgb(140,112,52)' } },\n  { value: 35.9, name: 'formal mittel', itemStyle: { color: 'rgb(195,163,94)' } },\n  { value: 28.6, name: 'formal hoch', itemStyle: { color: 'rgb(235,224,200)' } },\n];\n\n\nreturn {\n  title: {\n    show: false,\n    text: 'Age Distribution',\n    left: 'center',\n    textStyle: {\n      fontSize: 16,\n    },\n  },\n  tooltip: {\n    trigger: 'item',\n    formatter: (params) => {\n      const formattedPercent = params.value.toLocaleString('de-DE', { minimumFractionDigits: 1, maximumFractionDigits: 3 });\n      return `<span style=\"font-weight:bold;\">${params.name}</span>: ${formattedPercent}%`;\n    },\n  },\n  legend: {\n    orient: 'vertical',\n    show: false,\n    left: 'left',\n    textStyle: {\n      fontSize: 14,\n    },\n  },\n  series: [\n    {\n      name: 'Age Group',\n      type: 'pie',\n      radius: ['40%', '70%'], // Inner and outer radius for donut\n      data: ageData,\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)',\n        },\n      },\n      label: {\n        show: true,\n        position: 'inside', // Places the labels inside the donut\n        formatter: (params) => {\n          // Format the value with a comma as decimal separator\n          return params.value.toLocaleString('de-DE', { minimumFractionDigits: 1, maximumFractionDigits: 3 }) + \"%\";\n        },\n        fontSize: 14,\n        fontWeight: 'bold',\n        // color: 'rgb(1, 52, 128)', // Sets label text color for visibility\n      },\n    },\n  ],\n  backgroundColor: 'transparent',\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "-- Create a dummy table\r\nWITH age_distribution AS (\r\nSELECT 'formal gering' AS age_group, 80 AS count UNION ALL\r\nSELECT 'Männer ab 14.' AS age_group, 80 AS count UNION ALL\r\nSELECT '30-49 J.' AS age_group, 59 AS count UNION ALL\r\nSELECT '50-69 J.' AS age_group, 383 AS count UNION ALL\r\nSELECT '70+ J.' AS age_group, 542 AS count)\r\n-- Select the data to verify\r\nSELECT * FROM age_distribution;\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 8,
          "x": 0,
          "y": 73
        },
        "id": 128,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: inline-flex; align-items: center;\">\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #1f5666; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>3-13 J.</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #2e809a; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>14-29 J.</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #43a8c7; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>30-49 J.</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #8ecedd; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>50-69 J.</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #b4dce8; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>70+ J.</span>\n  </div>\n</div>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 8,
          "x": 8,
          "y": 73
        },
        "id": 129,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: inline-flex; align-items: center;\">\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #90aa17; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Frauen ab 14J.</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #bfe121; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Männer ab 14J.</span>\n  </div>\n</div>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 8,
          "x": 16,
          "y": 73
        },
        "id": 130,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: inline-flex; align-items: center;\">\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #8c7034; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>formal gering</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #c3a35e; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>formal mittel</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #ebe0c8; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>formal hoch</span>\n  </div>\n</div>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 75
        },
        "id": 79,
        "panels": [],
        "title": "Programme",
        "type": "row"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 24,
          "x": 0,
          "y": 76
        },
        "id": 80,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; align-items: center; background-color: rgb(0, 51, 179); padding: 5px; border-radius: 5px; color: white;\">\n    <img width=\"140\" height=\"70\" src=$program_image style=\"margin-right: 10px;\"/>\n    <div style=\"display: flex; flex-direction: column;\">\n        <h3 style=\"margin: 0; font-weight: bold; font-size: 30px\">${Programme}</h3>\n        <h3 style=\"margin: 0; font-weight: bold; font-size: 18px\">Anzahl Sendungen:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${anzahl_hr_sendungen_programme}\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${anzahl_ndr_sendungen_programme}\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${anzahl_mdr_sendungen_programme}</h3>\n    </div>\n</div>\n\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "transparent",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 1,
          "w": 6,
          "x": 0,
          "y": 79
        },
        "id": 81,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20,
            "valueSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  'Bitte beachten: jew. unterschiedliche Skala'\nFROM(\nSELECT 'Bitte beachten: jew. unterschiedliche Skala' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 18,
          "x": 6,
          "y": 79
        },
        "id": 132,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 5,
          "x": 0,
          "y": 80
        },
        "id": 89,
        "options": {
          "alwaysVisibleFilter": false,
          "autoScroll": false,
          "customValue": false,
          "displayMode": "minimize",
          "emptyValue": false,
          "favorites": false,
          "filter": false,
          "groupSelection": false,
          "header": true,
          "padding": 20,
          "persistent": false,
          "saveSelectedGroup": false,
          "saveSelectedGroupKey": "",
          "showLabel": false,
          "showName": false,
          "statusSort": false,
          "sticky": false,
          "variable": "Programme"
        },
        "pluginVersion": "2.5.0",
        "targets": [
          {
            "refId": "A"
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-variable-panel"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 6,
          "x": 0,
          "y": 82
        },
        "id": 83,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Sehbeteiligung</h3>\r\n    <h3>bundesweit in Mio.</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 6,
          "x": 6,
          "y": 82
        },
        "id": 86,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Marktanteil</h3>\r\n    <h3>im Sendegebiet in Prozent</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 6,
          "x": 12,
          "y": 82
        },
        "id": 85,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Seher</h3>\r\n    <h3>bundesweit in Mio.</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 6,
          "x": 18,
          "y": 82
        },
        "id": 84,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Sehvolumen</h3>\r\n    <h3>bundesweit in Mio. (Ø-Wert)</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "NDR: Niedersachsen, Hamburg, Bremen, Schleswig-Holstein, Mecklenburg-Vorpommern",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 12,
          "w": 6,
          "x": 0,
          "y": 85
        },
        "id": 88,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'value').values;\n  return allSum;\n});\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'bereich').values;\n  const lineares_fernsehen = s.fields.find((f) => f.name === 'value').values;\n\n  return [\n    {\n      name: 'Sehbeteiligung',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'inside', // Adjusted for horizontal bars\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(166, 166, 166)\"\n      },\n      data: lineares_fernsehen.map((value, index) => [value, timeValues[index]])\n    }\n  ];\n}).flat();\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>';\n      params.forEach(function (item) {\n        let number = item.data[0]; // Use the value field for tooltip formatting\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    show: false,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'value', // Numeric values on the x-axis\n    show: false,\n    axisLabel: {\n      formatter: function (value) {\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n    position: 'top', // Optional: move labels to the top\n  },\n  yAxis: {\n    type: 'category', // Categories on the y-axis\n    axisLabel: {\n      hideOverlap: true,\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n    inverse: true, // Optional: flip the y-axis order for better alignment\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT bereich, value FROM KC.linear_tv_program_barcharts\r\nWHERE profile = \"$Programme\"\r\nAND category = \"Sehbeteiligung\"\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "NDR: Niedersachsen, Hamburg, Bremen, Schleswig-Holstein, Mecklenburg-Vorpommern",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 12,
          "w": 6,
          "x": 6,
          "y": 85
        },
        "id": 90,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'value').values;\n  return allSum;\n});\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'bereich').values;\n  const lineares_fernsehen = s.fields.find((f) => f.name === 'value').values;\n\n  return [\n    {\n      name: 'Sehbeteiligung',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'inside', // Adjusted for horizontal bars\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(166, 166, 166)\"\n      },\n      data: lineares_fernsehen.map((value, index) => [value, timeValues[index]])\n    }\n  ];\n}).flat();\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>';\n      params.forEach(function (item) {\n        let number = item.data[0]; // Use the value field for tooltip formatting\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    show: false,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'value', // Numeric values on the x-axis\n    show: false,\n    axisLabel: {\n      formatter: function (value) {\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n    position: 'top', // Optional: move labels to the top\n  },\n  yAxis: {\n    type: 'category', // Categories on the y-axis\n    axisLabel: {\n      hideOverlap: true,\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n    inverse: true, // Optional: flip the y-axis order for better alignment\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT bereich, value FROM KC.linear_tv_program_barcharts\r\nWHERE profile = \"$Programme\"\r\nAND category = \"Marktanteil\"\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "NDR: Niedersachsen, Hamburg, Bremen, Schleswig-Holstein, Mecklenburg-Vorpommern",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 12,
          "w": 6,
          "x": 12,
          "y": 85
        },
        "id": 91,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'value').values;\n  return allSum;\n});\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'bereich').values;\n  const lineares_fernsehen = s.fields.find((f) => f.name === 'value').values;\n\n  return [\n    {\n      name: 'Sehbeteiligung',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'inside', // Adjusted for horizontal bars\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(166, 166, 166)\"\n      },\n      data: lineares_fernsehen.map((value, index) => [value, timeValues[index]])\n    }\n  ];\n}).flat();\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>';\n      params.forEach(function (item) {\n        let number = item.data[0]; // Use the value field for tooltip formatting\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    show: false,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'value', // Numeric values on the x-axis\n    show: false,\n    axisLabel: {\n      formatter: function (value) {\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n    position: 'top', // Optional: move labels to the top\n  },\n  yAxis: {\n    type: 'category', // Categories on the y-axis\n    axisLabel: {\n      hideOverlap: true,\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n    inverse: true, // Optional: flip the y-axis order for better alignment\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT bereich, value FROM KC.linear_tv_program_barcharts\r\nWHERE profile = \"$Programme\"\r\nAND category = \"Seher\"\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "NDR: Niedersachsen, Hamburg, Bremen, Schleswig-Holstein, Mecklenburg-Vorpommern",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 12,
          "w": 6,
          "x": 18,
          "y": 85
        },
        "id": 92,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'value').values;\n  return allSum;\n});\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'bereich').values;\n  const lineares_fernsehen = s.fields.find((f) => f.name === 'value').values;\n\n  return [\n    {\n      name: 'Sehbeteiligung',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'inside', // Adjusted for horizontal bars\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(166, 166, 166)\"\n      },\n      data: lineares_fernsehen.map((value, index) => [value, timeValues[index]])\n    }\n  ];\n}).flat();\n\n\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>';\n      params.forEach(function (item) {\n        let number = item.data[0]; // Use the value field for tooltip formatting\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    show: false,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'value', // Numeric values on the x-axis\n    show: false,\n    axisLabel: {\n      formatter: function (value) {\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n    position: 'top', // Optional: move labels to the top\n  },\n  yAxis: {\n    type: 'category', // Categories on the y-axis\n    axisLabel: {\n      hideOverlap: true,\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n    inverse: true, // Optional: flip the y-axis order for better alignment\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT bereich, value FROM KC.linear_tv_program_barcharts\r\nWHERE profile = \"$Programme\"\r\nAND category = \"Sehvolumen\"\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 14,
          "x": 0,
          "y": 97
        },
        "id": 94,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Sehbeteiligung</h3>\r\n    <h3>in Mio. & Struktur in % (im Sendegebiet)</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 10,
          "x": 14,
          "y": 97
        },
        "id": 95,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Marktanteil</h3>\r\n    <h3>in % (im Sendegebiet)</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Bildung: gering: Volks-/Hauptschule; mittel: Realschule o. Ä.; hoch: Abitur/Studium",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": "auto",
              "cellOptions": {
                "mode": "basic",
                "type": "color-background"
              },
              "inspect": false
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "transparent"
                },
                {
                  "color": "#e7f4f8",
                  "value": 5
                },
                {
                  "color": "#cbe7f0",
                  "value": 31
                },
                {
                  "color": "#b8d8e3",
                  "value": 51
                },
                {
                  "color": "#8ecbdd",
                  "value": 76
                }
              ]
            }
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "zielgruppen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Zielgruppen"
                },
                {
                  "id": "unit",
                  "value": "locale"
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "transparent",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "value_mio_hr"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "hr (Mio.)"
                },
                {
                  "id": "unit",
                  "value": "locale"
                },
                {
                  "id": "decimals",
                  "value": 2
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "value_percent_hr"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "hr (%)"
                },
                {
                  "id": "unit",
                  "value": "percent"
                },
                {
                  "id": "color",
                  "value": {
                    "mode": "thresholds"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "value_mio_mdr"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "MDR (Mio.)"
                },
                {
                  "id": "unit",
                  "value": "locale"
                },
                {
                  "id": "decimals",
                  "value": 2
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "value_percent_mdr"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "MDR (%)"
                },
                {
                  "id": "unit",
                  "value": "percent"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "value_mio_ndr"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "NDR (Mio.)"
                },
                {
                  "id": "unit",
                  "value": "locale"
                },
                {
                  "id": "decimals",
                  "value": 2
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "value_percent_ndr"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "NDR (%)"
                },
                {
                  "id": "unit",
                  "value": "percent"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 13,
          "w": 14,
          "x": 0,
          "y": 100
        },
        "id": 93,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "fields": "",
            "reducer": [
              "sum"
            ],
            "show": false
          },
          "showHeader": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT * $programme_except_condition_sehbeteiligung FROM KC.linear_tv_program_tables\r\nWHERE profile = \"$Programme\"\r\nAND category = \"Sehbeteiligung\"\r\nORDER BY order_num ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "table"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Bildung: gering: Volks-/Hauptschule; mittel: Realschule o. Ä.; hoch: Abitur/Studium",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": "auto",
              "cellOptions": {
                "mode": "basic",
                "type": "color-background"
              },
              "inspect": false
            },
            "decimals": 1,
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "transparent"
                },
                {
                  "color": "#e7f4f8",
                  "value": 5
                },
                {
                  "color": "#cbe7f0",
                  "value": 31
                },
                {
                  "color": "#b8d8e3",
                  "value": 51
                },
                {
                  "color": "#8ecbdd",
                  "value": 76
                }
              ]
            }
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "zielgruppen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Zielgruppen"
                },
                {
                  "id": "unit",
                  "value": "locale"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "value_percent_hr"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "hr (%)"
                },
                {
                  "id": "unit",
                  "value": "percent"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "value_percent_mdr"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "MDR (%)"
                },
                {
                  "id": "unit",
                  "value": "percent"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "value_percent_ndr"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "NDR (%)"
                },
                {
                  "id": "unit",
                  "value": "percent"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 13,
          "w": 10,
          "x": 14,
          "y": 100
        },
        "id": 96,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "fields": "",
            "reducer": [
              "sum"
            ],
            "show": false
          },
          "showHeader": true,
          "sortBy": []
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT * $programme_except_condition_marktanteil FROM KC.linear_tv_program_tables\r\nWHERE profile = \"$Programme\"\r\nAND category = \"Marktanteil\"\r\nORDER BY order_num ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "table"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 113
        },
        "id": 97,
        "panels": [],
        "title": "Social Media Plattformen",
        "type": "row"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 24,
          "x": 0,
          "y": 114
        },
        "id": 100,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "${social_media_headline:raw}",
          "mode": "html"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "transparent",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 1,
          "w": 16,
          "x": 0,
          "y": 118
        },
        "id": 109,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20,
            "valueSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  \"$social_media_text\"",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 1,
          "w": 5,
          "x": 0,
          "y": 119
        },
        "id": 107,
        "options": {
          "alwaysVisibleFilter": false,
          "autoScroll": false,
          "customValue": false,
          "displayMode": "minimize",
          "emptyValue": false,
          "favorites": false,
          "filter": false,
          "groupSelection": false,
          "header": true,
          "padding": 0,
          "persistent": false,
          "saveSelectedGroup": false,
          "saveSelectedGroupKey": "",
          "showLabel": false,
          "showName": false,
          "statusSort": false,
          "sticky": false,
          "variable": "SocialMediaPlatform"
        },
        "pluginVersion": "2.5.0",
        "targets": [
          {
            "refId": "A"
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-variable-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "transparent",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 1,
          "w": 18,
          "x": 5,
          "y": 119
        },
        "id": 108,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20,
            "valueSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  \" \"",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 24,
          "x": 0,
          "y": 120
        },
        "id": 131,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "${social_media_legend:raw}",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 6,
          "x": 0,
          "y": 122
        },
        "id": 101,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Videoabrufe</h3>\r\n    <h3>weltweit in Mio.</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 6,
          "x": 6,
          "y": 122
        },
        "id": 104,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Interaktionen</h3>\r\n    <h3>weltweit in Mio.</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 6,
          "x": 12,
          "y": 122
        },
        "id": 103,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "${social_media_sehvolumen_title:raw}",
          "mode": "html"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 6,
          "x": 18,
          "y": 122
        },
        "id": 113,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "${social_media_pot_reichweite:raw}",
          "mode": "html"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 6,
          "x": 0,
          "y": 125
        },
        "id": 98,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const series = context.panel.data.series\n  .map((s) => {\n    // Extract data and fields\n    const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n    const sCategoryRaw = s.fields.find((f) => f.type === 'string').values.buffer || s.fields.find((f) => f.type === 'string').values;\n    const sProfiles = s.fields.find((f) => f.name === 'profile').values; // All profiles for this series\n    const sColor = s.fields.find((f) => f.name === 'sm_color').values;\n    const sSocialMedia = s.fields.find((f) => f.name === 'socialmedia').values[0];\n\n\n    // Create newData to map profiles, months, and views\n    const newData = sProfiles.map((profile, index) => ({\n      profile: profile,\n      month: sCategoryRaw[index],\n      views: sData[index]\n    }));\n\n\n    // Calculate the total sum for each month (category)\n    const categoryTotals = sCategoryRaw.reduce((totals, month, index) => {\n      if (!totals[month]) {\n        totals[month] = 0;\n      }\n      totals[month] += sData[index]; // Add the value to the total for this month\n      return totals;\n    }, {});\n\n\n    // Create series for each profile\n    r = sProfiles.map((profile, profileIndex) => {\n      const profileData = newData.filter(d => d.profile === profile); // Filter data for the current profile\n      const instagramColors = [\"RGB(255,204,255)\", \"RGB(255,153,204)\"];\n      const profileColor = sSocialMedia === \"Instagram\" ? instagramColors[profileIndex % instagramColors.length] : sColor[profileIndex]; // Determine color\n      return {\n        name: profile, // Use individual profile name\n        type: 'bar',\n        stack: 'total',\n        label: {\n          show: true,\n          position: 'inside',\n          formatter: function (params) {\n            const number = params.data[1];\n            let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n            return formattedNumber;\n          },\n        },\n        itemStyle: { color: profileColor }, // Use color if not Instagram\n        // Map data to months dynamically\n        data: profileData.map((dataItem) => [dataItem.month, dataItem.views.toFixed(2), categoryTotals[dataItem.month]]), // Format data as [month, value]\n      };\n    });\n\n    // Add total sum labels for each month\n    r.forEach(seriesItem => {\n      seriesItem.data = seriesItem.data.map((dataItem, index) => {\n        // Add the total sum (from categoryTotals) to the top label\n        return [\n          dataItem[0], // month\n          dataItem[1], // value\n          categoryTotals[dataItem[0]] // total sum for this month\n        ];\n      });\n    });\n\n\n    // Remove duplicates by name\n    r = r.reduce((unique, item) => {\n      if (!unique.some((obj) => obj.name === item.name)) {\n        unique.push(item);\n      }\n      return unique;\n    }, []);\n\n    return r;\n  }).flat();\n\n// Enable Data Zoom by default\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n// Update Time Range on Zoom\ncontext.panel.chart.on('datazoom', function (params) {\n  const startIndex = params.batch[0]?.startValue;\n  const endIndex = params.batch[0]?.endValue;\n  const selectedCategories = context.panel.data.series[0].fields.find((f) => f.type === 'string').values.slice(startIndex, endIndex + 1);\n  locationService.partial({ selectedCategories });\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>';\n      params.forEach(function (item) {\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    },\n  },\n  title: {\n    text: 'Monthly Views in Millions',\n    left: 'center',\n    show: false,\n    textStyle: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: 'rgb(255, 255, 255)',\n    },\n  },\n  legend: {\n    show: false,\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16,\n    },\n  },\n  xAxis: {\n    type: 'category',\n    data: [...new Set(context.panel.data.series[0].fields.find((f) => f.type === 'string').values)], // Ensure x-axis data is unique\n    axisLabel: {\n      rotate: 0,\n      interval: 0,\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: 0,\n    axisLabel: {\n      formatter: '{value}M',\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '8%',\n    bottom: 40,\n    containLabel: true,\n  },\n  series,\n};\n\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH YouTube AS (\r\nWITH monthly_data AS (\r\n    SELECT \r\n        IFNULL(SUM(views_daily), 0) / 1000000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        \"ARD Gesund\" AS profile\r\n    FROM \r\n        KC.yt_video_metrics\r\n    WHERE \r\n        $Zeitraum_condition\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time)\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\"\r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n         profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n), \r\nFacebook AS (\r\n\r\n    WITH monthly_data AS (\r\n    SELECT \r\n        IFNULL(SUM(video_views_daily),0)/1000000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        \"Visite\" as profile\r\n    FROM \r\n        KC.fb_profile_metrics\r\n    WHERE \r\n        $Zeitraum_condition\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time)\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\"\r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n        profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n),\r\nInstagram AS (\r\n      WITH monthly_data AS (\r\n    SELECT \r\n        IFNULL(SUM(video_views_quintly),0)/1000000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        CASE profileId\r\n        WHEN \"17841421628394679\" THEN \"Die Ernährungs-Docs\"\r\n        ELSE \"fühlen wir\"\r\n        END as profile\r\n    FROM \r\n        KC.ig_insight_kc\r\n    WHERE \r\n        $Zeitraum_condition\r\n        AND profileId IN ($ig_ids)\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time),\r\n        profile\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\" \r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n        profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n\r\n),\r\nTikTok AS (\r\n      WITH monthly_data AS (\r\n    SELECT \r\n        IFNULL(SUM(views_daily),0)/1000000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        \"@safespace.offiziell\" as profile\r\n    FROM \r\n        KC.tt_insight_kc\r\n    WHERE \r\n        $Zeitraum_condition\r\n        AND profileId IN ($tt_ids)\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time)\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\" \r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n        profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n\r\n)\r\n\r\n\r\n\r\n\r\nSELECT *, \"$social_media_top_table_title_color\" as sm_color, \"$SocialMediaPlatform\" as socialmedia FROM $SocialMediaPlatform\r\nORDER BY profile, CASE SPLIT(month_year, \" \")[0]\r\n                WHEN \"Jan.\" THEN 1\r\n                WHEN \"Feb.\" THEN 2\r\n                WHEN \"Mär.\" THEN 3\r\n                WHEN \"Apr.\" THEN 4\r\n                WHEN \"Mai.\" THEN 5\r\n                WHEN \"Jun.\" THEN 6\r\n                WHEN \"Jul.\" THEN 7\r\n                WHEN \"Aug.\" THEN 8\r\n                WHEN \"Sep.\" THEN 9\r\n                WHEN \"Okt.\" THEN 10\r\n                WHEN \"Nov.\" THEN 11\r\n                WHEN \"Dez.\" THEN 12\r\n            END ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 6,
          "x": 6,
          "y": 125
        },
        "id": 106,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const series = context.panel.data.series\n  .map((s) => {\n    // Extract data and fields\n    const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n    const sCategoryRaw = s.fields.find((f) => f.type === 'string').values.buffer || s.fields.find((f) => f.type === 'string').values;\n    const sProfiles = s.fields.find((f) => f.name === 'profile').values; // All profiles for this series\n    const sColor = s.fields.find((f) => f.name === 'sm_color').values;\n    const sSocialMedia = s.fields.find((f) => f.name === 'socialmedia').values[0];\n\n    // Create newData to map profiles, months, and views\n    const newData = sProfiles.map((profile, index) => ({\n      profile: profile,\n      month: sCategoryRaw[index],\n      views: sData[index]\n    }));\n\n    // Calculate the total sum for each month (category)\n    const categoryTotals = sCategoryRaw.reduce((totals, month, index) => {\n      if (!totals[month]) {\n        totals[month] = 0;\n      }\n      totals[month] += sData[index]; // Add the value to the total for this month\n      return totals;\n    }, {});\n\n    // Create series for each profile\n    r = sProfiles.map((profile, profileIndex) => {\n      const profileData = newData.filter(d => d.profile === profile); // Filter data for the current profile\n      const instagramColors = [\"RGB(255,204,255)\", \"RGB(255,153,204)\"];\n      const profileColor = sSocialMedia === \"Instagram\" ? instagramColors[profileIndex % instagramColors.length] : sColor[profileIndex]; // Determine color\n      return {\n        name: profile, // Use individual profile name\n        type: 'bar',\n        stack: 'total',\n        label: {\n          show: true,\n          position: 'inside',\n          formatter: function (params) {\n            const number = params.data[1];\n            let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n            return formattedNumber;\n          },\n        },\n        itemStyle: { color: profileColor }, // Use color if not Instagram\n        // Map data to months dynamically\n        data: profileData.map((dataItem) => [dataItem.month, dataItem.views.toFixed(3), categoryTotals[dataItem.month]]), // Format data as [month, value]\n      };\n    });\n\n    // Add total sum labels for each month\n    r.forEach(seriesItem => {\n      seriesItem.data = seriesItem.data.map((dataItem, index) => {\n        // Add the total sum (from categoryTotals) to the top label\n        return [\n          dataItem[0], // month\n          dataItem[1], // value\n          categoryTotals[dataItem[0]] // total sum for this month\n        ];\n      });\n    });\n\n\n    // Remove duplicates by name\n    r = r.reduce((unique, item) => {\n      if (!unique.some((obj) => obj.name === item.name)) {\n        unique.push(item);\n      }\n      return unique;\n    }, []);\n    return r;\n  }).flat();\n\n// Enable Data Zoom by default\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n// Update Time Range on Zoom\ncontext.panel.chart.on('datazoom', function (params) {\n  const startIndex = params.batch[0]?.startValue;\n  const endIndex = params.batch[0]?.endValue;\n  const selectedCategories = context.panel.data.series[0].fields.find((f) => f.type === 'string').values.slice(startIndex, endIndex + 1);\n  locationService.partial({ selectedCategories });\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>';\n      params.forEach(function (item) {\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    },\n  },\n  title: {\n    text: 'Monthly Views in Millions',\n    left: 'center',\n    show: false,\n    textStyle: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: 'rgb(255, 255, 255)',\n    },\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16,\n    },\n    show: false,\n  },\n  xAxis: {\n    type: 'category',\n    data: [...new Set(context.panel.data.series[0].fields.find((f) => f.type === 'string').values)], // Ensure x-axis data is unique\n    axisLabel: {\n      rotate: 0,\n      interval: 0,\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: 0,\n    axisLabel: {\n      formatter: '{value}M',\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '8%',\n    bottom: 40,\n    containLabel: true,\n  },\n  series,\n};\n\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH YouTube AS (\r\nWITH monthly_data AS (\r\n    SELECT \r\n         IFNULL(SUM(likes_daily + dislikes_daily + comments_daily + shares_daily),0) / 1000000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        \"ARD Gesund\" AS profile\r\n    FROM \r\n        KC.yt_video_metrics\r\n    WHERE \r\n        $Zeitraum_condition\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time)\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\"\r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n         profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n), \r\nFacebook AS (\r\n\r\n    WITH monthly_data AS (\r\n    SELECT \r\n       sum(IFNULL(likes_daily\t+ love_daily\t+ \r\n  wow_daily + haha_daily + sorry_daily + angry_daily + \r\n  shares_daily + comments_daily,0))/1000000 AS total_views_in_millions,\r\n\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        \"Visite\" as profile\r\n    FROM \r\n        KC.fb_profile_metrics\r\n    WHERE \r\n        $Zeitraum_condition\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time)\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\"\r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n        profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n),\r\nInstagram AS (\r\n      WITH monthly_data AS (\r\n    SELECT \r\n          IFNULL( ROUND(Sum(likes_daily + shares_daily + comments_daily + saved_daily)),0)/1000000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        CASE profileId\r\n        WHEN \"17841421628394679\" THEN \"Die Ernährungs-Docs\"\r\n        ELSE \"fühlen wir\"\r\n        END as profile\r\n    FROM \r\n        KC.ig_insight_kc\r\n    WHERE \r\n        $Zeitraum_condition\r\n        AND profileId IN ($ig_ids)\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time),\r\n        profile\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\" \r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n        profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n\r\n),\r\nTikTok AS (\r\n      WITH monthly_data AS (\r\n    SELECT \r\n        IFNULL(SUM(likes_daily + comments_daily + shares_daily),0)/1000000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        \"@safespace.offiziell\" as profile\r\n    FROM \r\n        KC.tt_insight_kc\r\n    WHERE \r\n        $Zeitraum_condition\r\n        AND profileId IN ($tt_ids)\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time)\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\" \r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n        profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n\r\n)\r\n\r\n\r\n\r\n\r\nSELECT *, \"$social_media_top_table_title_color\" as sm_color, \"$SocialMediaPlatform\" as socialmedia FROM $SocialMediaPlatform\r\nORDER BY profile, CASE SPLIT(month_year, \" \")[0]\r\n                WHEN \"Jan.\" THEN 1\r\n                WHEN \"Feb.\" THEN 2\r\n                WHEN \"Mär.\" THEN 3\r\n                WHEN \"Apr.\" THEN 4\r\n                WHEN \"Mai.\" THEN 5\r\n                WHEN \"Jun.\" THEN 6\r\n                WHEN \"Jul.\" THEN 7\r\n                WHEN \"Aug.\" THEN 8\r\n                WHEN \"Sep.\" THEN 9\r\n                WHEN \"Okt.\" THEN 10\r\n                WHEN \"Nov.\" THEN 11\r\n                WHEN \"Dez.\" THEN 12\r\n            END ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 6,
          "x": 12,
          "y": 125
        },
        "id": 102,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "let socialmedia\nconst series = context.panel.data.series\n  .map((s) => {\n    // Extract data and fields\n    const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n    const sCategoryRaw = s.fields.find((f) => f.type === 'string').values.buffer || s.fields.find((f) => f.type === 'string').values;\n    const sProfiles = s.fields.find((f) => f.name === 'profile').values; // All profiles for this series\n    const sColor = s.fields.find((f) => f.name === 'sm_color').values;\n    const sSocialMedia = s.fields.find((f) => f.name === 'socialmedia').values[0];\n    socialmedia = sSocialMedia\n\n    // Create newData to map profiles, months, and views\n    const newData = sProfiles.map((profile, index) => ({\n      profile: profile,\n      month: sCategoryRaw[index],\n      views: sData[index]\n    }));\n\n\n    // Calculate the total sum for each month (category)\n    const categoryTotals = sCategoryRaw.reduce((totals, month, index) => {\n      if (!totals[month]) {\n        totals[month] = 0;\n      }\n      totals[month] += sData[index]; // Add the value to the total for this month\n      return totals;\n    }, {});\n\n    // Create series for each profile\n    r = sProfiles.map((profile, profileIndex) => {\n      const profileData = newData.filter(d => d.profile === profile); // Filter data for the current profile\n      const instagramColors = [\"RGB(255,204,255)\", \"RGB(255,153,204)\"];\n      const profileColor = sSocialMedia === \"Instagram\" ? instagramColors[profileIndex % instagramColors.length] : sColor[profileIndex]; // Determine color\n      return {\n        name: profile, // Use individual profile name\n        type: 'bar',\n        stack: 'total',\n        label: {\n          show: true,\n          position: 'inside',\n          formatter: function (params) {\n            const number = params.data[1];\n            let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n            return formattedNumber;\n          },\n        },\n        itemStyle: { color: profileColor }, // Use color if not Instagram\n        // Map data to months dynamically\n        data: profileData.map((dataItem) => [dataItem.month, dataItem.views.toFixed(2), categoryTotals[dataItem.month]]), // Format data as [month, value]\n      };\n    });\n\n    // Add total sum labels for each month\n    r.forEach(seriesItem => {\n      seriesItem.data = seriesItem.data.map((dataItem, index) => {\n        // Add the total sum (from categoryTotals) to the top label\n        return [\n          dataItem[0], // month\n          dataItem[1], // value\n          categoryTotals[dataItem[0]] // total sum for this month\n        ];\n      });\n    });\n\n\n    // Remove duplicates by name\n    r = r.reduce((unique, item) => {\n      if (!unique.some((obj) => obj.name === item.name)) {\n        unique.push(item);\n      }\n      return unique;\n    }, []);\n\n    if (sSocialMedia == \"TikTok\") {\n      return []\n    }\n    else {\n      return r;\n    }\n  }).flat();\n\n// Enable Data Zoom by default\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n// Update Time Range on Zoom\ncontext.panel.chart.on('datazoom', function (params) {\n  const startIndex = params.batch[0]?.startValue;\n  const endIndex = params.batch[0]?.endValue;\n  const selectedCategories = context.panel.data.series[0].fields.find((f) => f.type === 'string').values.slice(startIndex, endIndex + 1);\n  locationService.partial({ selectedCategories });\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>';\n      params.forEach(function (item) {\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    },\n  },\n  title: {\n    text: 'Monthly Views in Millions',\n    left: 'center',\n    show: false,\n    textStyle: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: 'rgb(255, 255, 255)',\n    },\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    show: false,\n    bottom: '0%',\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16,\n    },\n  },\n  xAxis: {\n    type: 'category',\n    show: socialmedia == \"TikTok\" ? false : true,\n    data: socialmedia == \"TikTok\" ? [] : [...new Set(context.panel.data.series[0].fields.find((f) => f.type === 'string').values)], // Ensure x-axis data is unique\n    axisLabel: {\n      rotate: 0,\n      interval: 0,\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: 0,\n    axisLabel: {\n      formatter: '{value}M',\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '8%',\n    bottom: 40,\n    containLabel: true,\n  },\n  series,\n};\n\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH YouTube AS (\r\nWITH monthly_data AS (\r\n    SELECT \r\n         IFNULL(ROUND(SUM(watch_time_sec_daily)/60/60),0) / 1000000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        \"ARD Gesund\" AS profile\r\n    FROM \r\n        KC.yt_video_metrics\r\n    WHERE \r\n        $Zeitraum_condition\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time)\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\"\r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n         profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n), \r\nFacebook AS (\r\n\r\n    WITH monthly_data AS (\r\n    SELECT \r\n        IFNULL(ROUND(Sum(video_view_time_ms_daily*1.0/1000/60/60)),0)/1000000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        \"Visite\" as profile\r\n    FROM \r\n        KC.fb_profile_metrics\r\n    WHERE \r\n        $Zeitraum_condition\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time)\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\"\r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n        profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n),\r\nInstagram AS (\r\n      WITH monthly_data AS (\r\n    SELECT \r\n  IFNULL( ROUND(Sum(reels_total_watch_time_ms_quintly*1.0/1000/60/60)),0)/1000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        CASE profileId\r\n        WHEN \"17841421628394679\" THEN \"Die Ernährungs-Docs\"\r\n        ELSE \"fühlen wir\"\r\n        END as profile\r\n    FROM \r\n        KC.ig_insight_kc\r\n    WHERE \r\n        $Zeitraum_condition\r\n        AND profileId IN ($ig_ids)\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time),\r\n        profile\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\" \r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n        profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n\r\n),\r\nTikTok AS (\r\n      WITH monthly_data AS (\r\n    SELECT \r\n        IFNULL(SUM(views_daily),0)/1000000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        \"@safespace.offiziell\" as profile\r\n    FROM \r\n        KC.tt_insight_kc\r\n    WHERE \r\n        $Zeitraum_condition\r\n        AND profileId IN ($tt_ids)\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time)\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\" \r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n        profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n\r\n)\r\n\r\n\r\n\r\n\r\nSELECT *, \"$social_media_top_table_title_color\" as sm_color, \"$SocialMediaPlatform\" as socialmedia FROM $SocialMediaPlatform\r\nORDER BY profile, CASE SPLIT(month_year, \" \")[0]\r\n                WHEN \"Jan.\" THEN 1\r\n                WHEN \"Feb.\" THEN 2\r\n                WHEN \"Mär.\" THEN 3\r\n                WHEN \"Apr.\" THEN 4\r\n                WHEN \"Mai.\" THEN 5\r\n                WHEN \"Jun.\" THEN 6\r\n                WHEN \"Jul.\" THEN 7\r\n                WHEN \"Aug.\" THEN 8\r\n                WHEN \"Sep.\" THEN 9\r\n                WHEN \"Okt.\" THEN 10\r\n                WHEN \"Nov.\" THEN 11\r\n                WHEN \"Dez.\" THEN 12\r\n            END ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 6,
          "x": 18,
          "y": 125
        },
        "id": 112,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "let socialMediaCheck = true\nconst series = context.panel.data.series\n  .map((s) => {\n    // Extract data and fields\n    const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n    const sCategoryRaw = s.fields.find((f) => f.type === 'string').values.buffer || s.fields.find((f) => f.type === 'string').values;\n    const sProfiles = s.fields.find((f) => f.name === 'profile').values; // All profiles for this series\n    const sColor = s.fields.find((f) => f.name === 'sm_color').values;\n    const sSocialMedia = s.fields.find((f) => f.name === 'socialmedia').values[0];\n    socialMediaCheck = sSocialMedia == \"Facebook\" || sSocialMedia == \"Instagram\"\n\n    // Create newData to map profiles, months, and views\n    const newData = sProfiles.map((profile, index) => ({\n      profile: profile,\n      month: sCategoryRaw[index],\n      views: sData[index]\n    }));\n\n    // Calculate the total sum for each month (category)\n    const categoryTotals = sCategoryRaw.reduce((totals, month, index) => {\n      if (!totals[month]) {\n        totals[month] = 0;\n      }\n      totals[month] += sData[index]; // Add the value to the total for this month\n      return totals;\n    }, {});\n\n    // Create series for each profile\n    r = sProfiles.map((profile, profileIndex) => {\n      const profileData = newData.filter(d => d.profile === profile); // Filter data for the current profile\n      const instagramColors = [\"RGB(255,204,255)\", \"RGB(255,153,204)\"];\n      const profileColor = sSocialMedia === \"Instagram\" ? instagramColors[profileIndex % instagramColors.length] : sColor[profileIndex]; // Determine color\n      return {\n        name: profile, // Use individual profile name\n        type: 'line',\n        stack: 'total',\n        label: {\n          show: true,\n          position: 'outside',\n          formatter: function (params) {\n            const number = params.data[1];\n            let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n            return formattedNumber;\n          },\n        },\n        itemStyle: { color: profileColor }, // Use color if not Instagram\n        // Map data to months dynamically\n        data: profileData.map((dataItem) => [dataItem.month, dataItem.views.toFixed(2), categoryTotals[dataItem.month]]), // Format data as [month, value]\n      };\n    });\n\n    // Add total sum labels for each month\n    r.forEach(seriesItem => {\n      seriesItem.data = seriesItem.data.map((dataItem, index) => {\n        // Add the total sum (from categoryTotals) to the top label\n        return [\n          dataItem[0], // month\n          dataItem[1], // value\n          categoryTotals[dataItem[0]] // total sum for this month\n        ];\n      });\n    });\n\n\n    // Remove duplicates by name\n    r = r.reduce((unique, item) => {\n      if (!unique.some((obj) => obj.name === item.name)) {\n        unique.push(item);\n      }\n      return unique;\n    }, []);\n\n    return r;\n  }).flat();\n\n// Enable Data Zoom by default\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n// Update Time Range on Zoom\ncontext.panel.chart.on('datazoom', function (params) {\n  const startIndex = params.batch[0]?.startValue;\n  const endIndex = params.batch[0]?.endValue;\n  const selectedCategories = context.panel.data.series[0].fields.find((f) => f.type === 'string').values.slice(startIndex, endIndex + 1);\n  locationService.partial({ selectedCategories });\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>';\n      params.forEach(function (item) {\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    },\n  },\n  title: {\n    text: 'Monthly Views in Millions',\n    left: 'center',\n    show: false,\n    textStyle: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: 'rgb(255, 255, 255)',\n    },\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    show: socialMediaCheck,\n    bottom: '0%',\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16,\n    },\n    show: false,\n  },\n  xAxis: {\n    type: 'category',\n    data: socialMediaCheck ? [...new Set(context.panel.data.series[0].fields.find((f) => f.type === 'string').values)] : [], // Ensure x-axis data is unique\n    axisLabel: {\n      rotate: 0,\n      interval: 0,\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: 0,\n    axisLabel: {\n      formatter: '{value}M',\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '8%',\n    bottom: socialMediaCheck ? 40 : -50,\n    containLabel: true,\n  },\n  series,\n};\n\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH  \r\nFacebook AS (\r\n\r\n    WITH monthly_data AS (\r\n    SELECT \r\n     AVG(reach_daily)/1000000 AS total_views_in_millions,\r\n\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month, \r\n        \"Visite\" as profile\r\n    FROM \r\n        KC.fb_profile_metrics\r\n    WHERE \r\n        $Zeitraum_condition\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time)\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\"\r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n        profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n),\r\nYoutube AS(\r\n    SELECT * FROM Facebook\r\n),\r\nInstagram AS (\r\n      WITH monthly_data AS (\r\n    SELECT \r\n          AVG(reach_daily)/1000000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        CASE profileId\r\n        WHEN \"17841421628394679\" THEN \"Die Ernährungs-Docs\"\r\n        ELSE \"fühlen wir\"\r\n        END as profile\r\n    FROM \r\n        KC.ig_insight_kc\r\n    WHERE \r\n        $Zeitraum_condition\r\n        AND profileId IN ($ig_ids)\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time),\r\n        profile\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\" \r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n        profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n\r\n),\r\nTikTok AS (\r\n      WITH monthly_data AS (\r\n    SELECT \r\n        IFNULL(SUM(likes_daily + comments_daily + shares_daily),0)/1000000 AS total_views_in_millions,\r\n        EXTRACT(YEAR FROM time) AS year,\r\n        EXTRACT(MONTH FROM time) AS month,\r\n        \"@safespace.offiziell\" as profile\r\n    FROM \r\n        KC.tt_insight_kc\r\n    WHERE \r\n        $Zeitraum_condition\r\n        AND profileId IN ($tt_ids)\r\n    GROUP BY \r\n        EXTRACT(YEAR FROM time), \r\n        EXTRACT(MONTH FROM time)\r\n),\r\nformatted_data AS (\r\n    SELECT \r\n        total_views_in_millions,\r\n        month,\r\n        CONCAT(\r\n            CASE month\r\n                WHEN 1 THEN \"Jan.\"\r\n                WHEN 2 THEN \"Feb.\"\r\n                WHEN 3 THEN \"Mär.\" \r\n                WHEN 4 THEN \"Apr.\"\r\n                WHEN 5 THEN \"Mai.\"\r\n                WHEN 6 THEN \"Jun.\"\r\n                WHEN 7 THEN \"Jul.\"\r\n                WHEN 8 THEN \"Aug.\"\r\n                WHEN 9 THEN \"Sep.\"\r\n                WHEN 10 THEN \"Okt.\"\r\n                WHEN 11 THEN \"Nov.\"\r\n                WHEN 12 THEN \"Dez.\"\r\n            END, \r\n            \" \", \r\n            CAST(year AS STRING)\r\n        ) AS month_year,\r\n        profile\r\n    FROM \r\n        monthly_data\r\n)\r\nSELECT \r\n    total_views_in_millions,\r\n    month_year,\r\n    profile,\r\nFROM \r\n    formatted_data\r\nORDER BY \r\n    month asc\r\n\r\n)\r\n\r\n\r\n\r\n\r\nSELECT *, \"$social_media_top_table_title_color\" as sm_color, \"$SocialMediaPlatform\" as socialmedia FROM $SocialMediaPlatform\r\nORDER BY profile, CASE SPLIT(month_year, \" \")[0]\r\n                WHEN \"Jan.\" THEN 1\r\n                WHEN \"Feb.\" THEN 2\r\n                WHEN \"Mär.\" THEN 3\r\n                WHEN \"Apr.\" THEN 4\r\n                WHEN \"Mai.\" THEN 5\r\n                WHEN \"Jun.\" THEN 6\r\n                WHEN \"Jul.\" THEN 7\r\n                WHEN \"Aug.\" THEN 8\r\n                WHEN \"Sep.\" THEN 9\r\n                WHEN \"Okt.\" THEN 10\r\n                WHEN \"Nov.\" THEN 11\r\n                WHEN \"Dez.\" THEN 12\r\n            END ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 12,
          "x": 0,
          "y": 133
        },
        "id": 118,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "${social_media_struktur_text:raw}\n\n",
          "mode": "html"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 12,
          "x": 12,
          "y": 133
        },
        "id": 75,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; align-items: center; background-color: ${social_media_top_table_title_color}; padding: 5px; border-radius: 5px; color: white;\">\n    <h3 style=\"margin: 0; font-weight: bold; color: rgb(1, 52, 128);\">${social_media_top_table_title}</h3>\n</div>\n\n",
          "mode": "html"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 7,
          "x": 0,
          "y": 135
        },
        "id": 155,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "${age_social_media_legend:raw}",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 5,
          "x": 7,
          "y": 135
        },
        "id": 156,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "${gender_social_media_legend:raw}",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": "auto",
              "cellOptions": {
                "type": "auto"
              },
              "inspect": false
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "yt_name"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Video"
                },
                {
                  "id": "custom.cellOptions",
                  "value": {
                    "mode": "basic",
                    "type": "color-background"
                  }
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#feb9be",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "yt_views"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Abrufe"
                },
                {
                  "id": "unit",
                  "value": "locale"
                },
                {
                  "id": "custom.align",
                  "value": "center"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "published_time"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 133
                },
                {
                  "id": "displayName",
                  "value": "VÖ-Datum"
                },
                {
                  "id": "custom.align",
                  "value": "center"
                },
                {
                  "id": "unit",
                  "value": "time: DD.MM.YYYY"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Video"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 740
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "fb_name"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Post"
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#b4d2ff",
                    "mode": "fixed"
                  }
                },
                {
                  "id": "custom.cellOptions",
                  "value": {
                    "mode": "basic",
                    "type": "color-background"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "fb_type"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Art"
                },
                {
                  "id": "custom.align",
                  "value": "center"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "fb_interactions"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Interaktionen"
                },
                {
                  "id": "unit",
                  "value": "locale"
                },
                {
                  "id": "custom.align",
                  "value": "center"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "VÖ-Datum"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 152
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Art"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 132
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Post"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 524
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 134
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "ig_name"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Post"
                },
                {
                  "id": "custom.cellOptions",
                  "value": {
                    "mode": "basic",
                    "type": "color-background"
                  }
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#ff99cc",
                    "mode": "shades"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "ig_type"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Art"
                },
                {
                  "id": "custom.align",
                  "value": "center"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "ig_interactions"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Interaktionen"
                },
                {
                  "id": "unit",
                  "value": "locale"
                },
                {
                  "id": "custom.align",
                  "value": "center"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "description"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Video"
                },
                {
                  "id": "custom.cellOptions",
                  "value": {
                    "mode": "basic",
                    "type": "color-background"
                  }
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#d9d9d9",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "tt_views"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Abrufe"
                },
                {
                  "id": "custom.align",
                  "value": "center"
                },
                {
                  "id": "unit",
                  "value": "locale"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Abrufe"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 104
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 12,
          "w": 12,
          "x": 12,
          "y": 135
        },
        "id": 110,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "fields": "",
            "reducer": [
              "sum"
            ],
            "show": false
          },
          "showHeader": true,
          "sortBy": []
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH YouTube AS(\r\nSELECT name as yt_name, DATE(published_time) as published_time, SUM(views) as yt_views, \r\nFROM KC.youtube_top_videos\r\nWHERE $Zeitraum_condition\r\nGROUP BY name, published_time\r\nORDER BY yt_views DESC\r\nLIMIT 10),\r\nFacebook AS(\r\nSELECT\r\nmessage as fb_name,\r\nDATE(time) as published_time, \r\ntype as fb_type, \r\ninteractions as fb_interactions,\r\nFROM KC.facebook_top_videos\r\nWHERE $Zeitraum_condition\r\nORDER BY interactions DESC\r\nLIMIT 10),\r\nInstagram AS(\r\n  SELECT \"\"\"👉 Post Covid 👈\r\n\r\nNichts geht mehr, Timo W. ist verzweifelt. Gehirnnebel, Schwindel, Konzentrations- und Sehprobleme plagen den 49-Jährigen seit einer Corona-Infektion. Er möchte sein altes Leben zurück und sucht Hilfe bei den Ernährungs-Docs. Dr. Matthias Riedl kann Timo mit neuen wissenschaftlichen Erkenntnissen Mut und Hoffnung auf Linderung machen: Zwischen Post Covid und der Darmflora, dem Mikrobiom, kann ein Zusammenhang bestehen. \r\n\r\nDabei setzt der Ernährungsmediziner auf \"Helfer\" für einen gesunden Darm: Probiotika und Präbiotika. Ist das der Schlüssel für Timo hin zu einem Leben mit weniger Beschwerden? \r\n\r\n🔗Wie Timo W. die Ernährungsempfehlungen umsetzt und was Dr. Matthias Riedl ihm sonst noch rät, das könnt ihr euch in der ARD Mediathek ansehen oder ab 21 Uhr im NDR Fernsehen.  Einen Direktlink zur Folge haben wir euch in die @ernaehrungsdocs -Bio gepackt.\r\n\r\n👉 Ab dem 30.09. gibt es wieder neue TV-Folgen der Ernährungs-Docs. Immer montags ab 21 Uhr im NDR oder jederzeit in der ARD Mediathek.\r\n.\r\n.\r\n.\r\n#Ernährungsdocs #Covid #Corona #PostCovid #Darm #Mikrobiom #LongCovid #Probiotika #Präbiotika\"\"\" As ig_name, DATE(2024,9,30) as published_time, \"Reel (Docs)\" as ig_type, 27405 as ig_interactions\r\nUNION ALL\r\nSELECT \r\nmessage as ig_name,\r\nDATE(published_time) as published_time, \r\ntype as ig_type, \r\n--SUM(GREATEST(likes_daily,0) + GREATEST(comments_daily,0) + GREATEST(shares_daily,0) + GREATEST(saved_daily,0)) as ig_interactions,\r\nSUM(likes_daily + comments_daily + shares_daily + saved_daily) as ig_interactions, \r\nFROM KC.instagram_top_videos\r\nWHERE $Zeitraum_condition\r\nGROUP BY message, published_time, type\r\nORDER BY ig_interactions DESC\r\nLIMIT 9\r\n),\r\nTikTok AS(\r\n  SELECT \r\n  description, \r\n  time as published_time,\r\n  SUM(views_daily) as tt_views,\r\n  FROM KC.tiktok_top_videos\r\n  WHERE $Zeitraum_condition\r\n  GROUP BY description, published_time\r\n  ORDER BY tt_views DESC\r\n  LIMIT 10\r\n)\r\nSELECT * FROM $SocialMediaPlatform\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "table"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "13-17"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "18-24"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "65+"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "55-64"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "45-54"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "25-34"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "35-44"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "total"
              },
              "properties": []
            }
          ]
        },
        "gridPos": {
          "h": 12,
          "w": 6,
          "x": 0,
          "y": 137
        },
        "id": 119,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const colorMappingProfiles = {\n  \"Die Ernährungs-Docs\": \"#b877d9\",\n  \"Profile B\": \"#37872d\",\n  \"Profile C\": \"#ff780a\",\n  \"Profile D\": \"#f2495c\",\n  \"Profile E\": \"#8ab8ff\"\n};\n\nconst colorMapping = {\n  \"Instagram\": {\n    \"13-17\": \"RGB(153,0,153)\",\n    \"18-24\": \"RGB(205,0,153)\",\n    \"25-34\": \"RGB(246,0,170)\",\n    \"35-44\": \"RGB(255,3,102)\",\n    \"45-54\": \"RGB(255,51,154)\",\n    \"55-64\": \"RGB(255,153,204)\",\n    \"65+\": \"RGB(255,204,255)\"\n  },\n  \"Facebook\": {\n    \"13-17\": \"RGB(0,26,64)\",\n    \"18-24\": \"RGB(1,52,128)\",\n    \"25-34\": \"RGB(67,168,199)\",\n    \"35-44\": \"RGB(10,102,255)\",\n    \"45-54\": \"RGB(103,164,255)\",\n    \"55-64\": \"RGB(180,210,255)\",\n    \"65+\": \"RGB(205,224,255)\"\n  },\n  \"YouTube\": {\n    \"13-17\": \"RGB(64, 0, 0)\",\n    \"18-24\": \"RGB(128, 1, 1)\",\n    \"25-34\": \"RGB(199, 67, 67)\",\n    \"35-44\": \"RGB(255, 10, 10)\",\n    \"45-54\": \"RGB(255, 103, 103)\",\n    \"55-64\": \"RGB(255, 180, 180)\",\n    \"65+\": \"RGB(255, 205, 205)\"\n  }\n};\n\n\nconst colorFallback = \"#cccccc\"; // Default grey color if no match\n\n// Helper function to format numbers to German format\nfunction formatNumberGerman(value) {\n  return new Intl.NumberFormat('de-DE').format(Math.round(value));\n}\n\nlet dataCheck;\nlet profile;\n\n// Transform the data\nconst groupedData = context.panel.data.series.map((s) => {\n  const ageCategories = s.fields.find((f) => f.name === 'ageBucket').values.buffer || s.fields.find((f) => f.name === 'ageBucket').values;\n  const profiles = s.fields.find((f) => f.name === 'profile').values.buffer || s.fields.find((f) => f.name === 'profile').values;\n  const values = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n  profile = s.fields.find((f) => f.name === 'platform').values[0];\n  dataCheck = profile == \"Facebook\" || profile == \"Instagram\" || profile == \"YouTube\"\n\n  // Group data by profile\n  const grouped = {};\n  ageCategories.forEach((age, i) => {\n    const profile = profiles[i];\n    if (!grouped[profile]) {\n      grouped[profile] = [];\n    }\n    grouped[profile].push({\n      age: age,\n      value: values[i]\n    });\n  });\n  return grouped;\n})[0]; // Use the first series\n\n\nif (!dataCheck) {\n  return null; // Return nothing if the condition fails\n}\n// Extract categories (age buckets) and profiles\nconst ageBuckets = [...new Set(Object.values(groupedData).flat().map((item) => item.age))];\nconst profiles = Object.keys(groupedData);\n\n// Return a pie chart if there is only one profile\nif (profiles.length === 1) {\n  const singleProfileData = groupedData[profiles[0]].map((item) => ({\n    name: item.age,\n    value: item.value,\n    itemStyle: {\n      color: colorMapping[profile][item.age] || colorFallback // Use age-specific color mapping\n    }\n  }));\n\n  return {\n    backgroundColor: 'transparent',\n    tooltip: {\n      trigger: 'item',\n      formatter: (params) => {\n        return `<b>${params.name}</b><br/>${formatNumberGerman(params.value)} (${params.percent}%)`;\n      },\n      textStyle: {\n        fontWeight: 'bold',\n        fontSize: 14\n      }\n    },\n    legend: {\n      top: 'bottom',\n      show: false,\n      data: ageBuckets,\n      textStyle: {\n        color: '#333',\n        fontWeight: 'bold'\n      }\n    },\n    series: [\n      {\n        name: profiles[0],\n        type: 'pie',\n        radius: ['30%', '70%'], // Make both pies a donut chart by setting inner radius\n        data: dataCheck ? singleProfileData : [],\n        label: {\n          show: true,\n          formatter: (params) => `${formatNumberGerman(params.percent)}%`,\n          position: 'inside',\n          textStyle: {\n            fontWeight: 'bold'\n          }\n        },\n        labelLine: {\n          show: false\n        },\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\n          }\n        }\n      }\n    ]\n  };\n}\n\n// Return two pies (one for each profile) and move the second pie inside the first one\nconst outerPieData = groupedData[profiles[0]].map((item) => ({\n  name: item.age,\n  value: item.value,\n  itemStyle: {\n    color: colorMapping[profile][item.age] || colorFallback // Use age-specific color mapping\n  }\n}));\n\nconst innerPieData = groupedData[profiles[1]].map((item) => ({\n  name: item.age,\n  value: item.value,\n  itemStyle: {\n    color: colorMapping[profile][item.age] || colorFallback // Use age-specific color mapping\n  }\n}));\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'item',\n    formatter: (params) => {\n      return `<b>${params.name}</b><br/>${formatNumberGerman(params.value)} (${params.percent}%)`;\n    },\n    textStyle: {\n      fontWeight: 'bold',\n      fontSize: 14\n    }\n  },\n  legend: {\n    top: 'bottom',\n    data: ageBuckets,\n    textStyle: {\n      color: '#333',\n      fontWeight: 'bold'\n    }\n  },\n  series: [\n    {\n      name: profiles[0],\n      type: 'pie',\n      radius: ['40%', '70%'], // Outer donut pie\n      data: dataCheck ? outerPieData : [],\n      label: {\n        show: true,\n        formatter: (params) => `${formatNumberGerman(params.percent)}%`,\n        position: 'inside',\n        textStyle: {\n          fontWeight: 'bold'\n        }\n      },\n      labelLine: {\n        show: false\n      },\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\n        }\n      }\n    },\n    {\n      name: profiles[1],\n      type: 'pie',\n      radius: ['20%', '40%'], // Inner donut pie\n      center: ['50%', '50%'], // Center of the chart (same as outer pie)\n      data: dataCheck ? innerPieData : [],\n      label: {\n        show: true,\n        formatter: (params) => `${formatNumberGerman(params.percent)}%`,\n        position: 'inside',\n        textStyle: {\n          fontWeight: 'bold',\n          fontSize: 10 // Decrease text size in inner pie\n        }\n      },\n      labelLine: {\n        show: false\n      },\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\n        }\n      }\n    }\n  ]\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH Facebook AS ( SELECT DISTINCT\n   100*( AVG(reach_daily) / SUM(AVG(reach_daily)) OVER (PARTITION BY  profile)) AS totals,\n    profile,\n    age_group as ageBucket\nFROM \n    `ndr-code-bi-dashboard.KC.fb_metrics_age_gender`\nWHERE \n    (EXTRACT(MONTH FROM time) BETWEEN 7 AND 9) \n    AND EXTRACT(YEAR FROM time) = 2024\nGROUP BY \n profile, age_group),\n Instagram AS (  \n SELECT DISTINCT\n   100*( SUM(followers_count) OVER (PARTITION BY  profile,age) / SUM(followers_count) OVER (PARTITION BY  profile)) AS totals,\n    age as ageBucket,\n    profile,\n    time\nFROM \n    `ndr-code-bi-dashboard.KC.ig_metrics_age_gender`\nWHERE \n    (EXTRACT(MONTH FROM time) BETWEEN 7 AND 9) \n    AND EXTRACT(YEAR FROM time) = 2024\n    AND time = ( \n        SELECT MAX(time)\n        FROM `ndr-code-bi-dashboard.KC.ig_metrics_age_gender`\n        WHERE \n            (EXTRACT(MONTH FROM time) BETWEEN 7 AND 9) \n            AND EXTRACT(YEAR FROM time) = 2024\n    )\nGROUP BY \n    age, profile, time, followers_count \n ),\n YouTube AS (\n SELECT\n    REPLACE(SUBSTR(audienceGenderAndAge.ageGroupName,0,  STRPOS(audienceGenderAndAge.ageGroupName, ' ')), \" \", \"\") AS ageBucket,\n  ROUND(SUM(audienceGenderAndAge.value)) AS totals,\n  \"ARD Gesund\" as profile\nFROM\n  `ndr-code-bi-dashboard.KC.youtubeAnalytics`,\n  UNNEST(viewsByAgeAndGender) AS audienceGenderAndAge\n    WHERE\n  $Zeitraum_condition  \nGROUP BY\n  ageBucket\n\n  ORDER by ageBucket\n ), \n TikTok AS (\n   SELECT 0 as totals, \"\" as profile, \"\" as ageBucket\n )\n SELECT *, \"$SocialMediaPlatform\" as platform FROM $SocialMediaPlatform ",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Männlich"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Weiblich"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Unbekannt"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "35-44"
              },
              "properties": []
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Gesamt"
              },
              "properties": []
            }
          ]
        },
        "gridPos": {
          "h": 12,
          "w": 6,
          "x": 6,
          "y": 137
        },
        "id": 120,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const colorMapping = {\n  \"Instagram\": {\n    \"Männlich\": \"RGB(205,0,153)\",\n    \"Weiblich\": \"RGB(255,153,204)\",  // Dark red\n    \"Unbekannt\": \"RGB(153,0,153)\"  // Semi-dark yellow\n  },\n  \"Facebook\": {\n    \"Männlich\": \"RGB(10,102,255)\",\n    \"Weiblich\": \"RGB(205, 224, 255)\",  // Dark red\n    \"Unbekannt\": \"RGB(1,52,128)\"  // Semi-dark yellow\n  },\n  \"YouTube\": {\n    \"Männlich\": \"RGB(255, 10, 10)\",\n    \"Weiblich\": \"RGB(255, 205, 205)\",  // Dark red\n    \"Unbekannt\": \"RGB(128, 1, 1)\"  // Semi-dark yellow\n  },\n};\n\nconst colorFallback = \"#cccccc\"; // Default grey color if no match\n\n// Helper function to format numbers to German format\nfunction formatNumberGerman(value) {\n  return new Intl.NumberFormat('de-DE').format(Math.round(value));\n}\nlet dataCheck;\nlet platform;\n\n// Transform the data\nconst groupedData = context.panel.data.series.map((s) => {\n  const categories = s.fields.find((f) => f.name === 'gender_2').values.buffer || s.fields.find((f) => f.name === 'gender_2').values;\n  const values = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n  const profiles = s.fields.find((f) => f.name === 'profile').values.buffer || s.fields.find((f) => f.name === 'profile').values;\n  platform = s.fields.find((f) => f.name === 'platform').values[0];\n  dataCheck = platform == \"Facebook\" || platform == \"Instagram\" || platform == \"YouTube\"\n\n  // Group data by profile\n  const grouped = {};\n  categories.forEach((category, i) => {\n    const profile = profiles[i];\n    if (!grouped[profile]) {\n      grouped[profile] = [];\n    }\n    grouped[profile].push({\n      name: category,\n      value: values[i],\n      itemStyle: {\n        color: dataCheck ? colorMapping[platform][category] || colorFallback : colorFallback // Use category-specific color mapping\n      }\n    });\n  });\n  return grouped;\n})[0]; // Use the first series\n\n\nif (!dataCheck) {\n  return null; // Return nothing if the condition fails\n}\n// Extract profiles\nconst profiles = Object.keys(groupedData);\n\n// Handle one profile case\nif (profiles.length === 1) {\n  const singleProfileData = groupedData[profiles[0]];\n\n  return {\n    backgroundColor: 'transparent',\n    tooltip: {\n      trigger: 'item',\n      formatter: (params) => {\n        return `<b>${params.name}</b><br/>${formatNumberGerman(params.value)} (${params.percent}%)`;\n      },\n      textStyle: {\n        color: 'rgba(128, 128, 128, .9)',\n        fontWeight: 'bold',\n      }\n    },\n    legend: {\n      orient: 'horizontal',\n      show: false,\n      bottom: '5%', // Position the legend at the bottom\n      align: 'auto',\n      formatter: (name) => `${name}`,  // Display the name without values or percentages\n      textStyle: {\n        color: 'rgba(128, 128, 128, .9)',\n        fontWeight: 'bold',\n      },\n    },\n    series: [\n      {\n        name: profiles[0],\n        type: 'pie',\n        radius: ['30%', '70%'], // Make the chart a donut\n        data: singleProfileData,\n        label: {\n          show: true,\n          formatter: (params) => `${formatNumberGerman(params.percent)}%`,   // Display only the rounded percentage\n          position: 'inside',\n          textStyle: {\n            fontWeight: 'bold',\n          }\n        },\n        labelLine: {\n          show: false\n        },\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: 'rgba(0, 0, 0, 0.5)',\n          },\n        },\n      },\n    ],\n  };\n}\n\n// Handle multiple profiles (nested donuts)\nconst outerPieData = groupedData[profiles[0]];\nconst innerPieData = groupedData[profiles[1]];\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'item',\n    formatter: (params) => {\n      return `<b>${params.name}</b><br/>${formatNumberGerman(params.value)} (${params.percent}%)`;\n    },\n    textStyle: {\n      color: 'rgba(128, 128, 128, .9)',\n      fontWeight: 'bold',\n    }\n  },\n  legend: {\n    orient: 'horizontal', // Set legend orientation to horizontal\n    bottom: '5%', // Position legend at the bottom of the chart\n    align: 'auto',\n    formatter: (name) => `${name}`,\n    textStyle: {\n      color: 'rgba(128, 128, 128, .9)',\n      fontWeight: 'bold',\n    },\n  },\n  series: [\n    {\n      name: profiles[0],\n      type: 'pie',\n      radius: ['40%', '70%'], // Outer donut pie\n      data: outerPieData,\n      label: {\n        show: true,\n        formatter: (params) => `${formatNumberGerman(params.percent)}%`,   // Display percentage\n        position: 'inside',\n        textStyle: {\n          fontWeight: 'bold',\n        }\n      },\n      labelLine: {\n        show: false\n      },\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)',\n        },\n      },\n    },\n    {\n      name: profiles[1],\n      type: 'pie',\n      radius: ['20%', '40%'], // Inner donut pie\n      center: ['50%', '50%'], // Ensure both pies are centered\n      data: innerPieData,\n      label: {\n        show: true,\n        formatter: (params) => `${formatNumberGerman(params.percent)}%`,   // Display percentage\n        position: 'inside',\n        textStyle: {\n          fontWeight: 'bold',\n          fontSize: 10, // Smaller text size for the inner pie\n        }\n      },\n      labelLine: {\n        show: false\n      },\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)',\n        },\n      },\n    }\n  ],\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH Instagram AS (\nSELECT DISTINCT\n   100*( SUM(followers_count) OVER (PARTITION BY  profile,gender) / SUM(followers_count) OVER (PARTITION BY  profile)) AS Gesamt,\n    CASE gender\n      WHEN \"male\" THEN \"Männlich\"\n      WHEN \"female\" THEN \"Weiblich\"\n      WHEN \"unknown\" THEN \"Unbekannt\" END as gender_2,\n    profile,\n    time\nFROM \n    `ndr-code-bi-dashboard.KC.ig_metrics_age_gender`\nWHERE \n   $Zeitraum_condition \n    AND time = ( \n        SELECT MAX(time)\n        FROM `ndr-code-bi-dashboard.KC.ig_metrics_age_gender`\n        WHERE \n           $Zeitraum_condition \n    )\nGROUP BY \n    gender, profile, time, followers_count\n    ),\n    Facebook AS (\n\n        SELECT DISTINCT\n   100*( AVG(reach_daily) / SUM(AVG(reach_daily)) OVER (PARTITION BY  profile)) AS total,\n    profile,\n     CASE gender\n      WHEN \"Male\" THEN \"Männlich\"\n      WHEN \"Female\" THEN \"Weiblich\"\n      WHEN \"Unknown\" THEN \"Unbekannt\" END as gender_2,\nFROM \n    `ndr-code-bi-dashboard.KC.fb_metrics_age_gender`\nWHERE \n   $Zeitraum_condition\nGROUP BY \n profile, gender\n    ),\n    TikTok  AS (SELECT * FROM Instagram),\n    YouTube AS (\n        SELECT\n                CASE \n                    WHEN gender = 'male' THEN 'Männlich'\n                    WHEN gender = 'female' THEN 'Weiblich'\n                    WHEN gender = 'genderUserSpecified' THEN 'Unbekannt' END as gender_2,\n            ROUND(SUM(audienceGenderAndAge.value)) AS Gesamt,\n            \"ARD Gesund\" as profile\nFROM\n  `ndr-code-bi-dashboard.KC.youtubeAnalytics`,\n  UNNEST(viewsByAgeAndGender) AS audienceGenderAndAge\n  WHERE\n  $Zeitraum_condition \n  AND profileId = $yt_ids \nGROUP BY\n  gender\nORDER BY\n  gender\n    )\n\n    SELECT *, \"$SocialMediaPlatform\" as platform FROM $SocialMediaPlatform\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 149
        },
        "id": 114,
        "panels": [],
        "title": "ARD Audiothek",
        "type": "row"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 13,
          "x": 0,
          "y": 150
        },
        "id": 115,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; align-items: center; background-color: rgb(0, 51, 179); padding: 5px; border-radius: 5px; color: white;\">\n    <img width=\"180\" height=\"70\" src=\"$ard_audiothek\" style=\"margin-right: 10px;\"/>\n    <h3 style=\"margin: 0; font-weight: bold;\">ARD Audiothek</h3>\n</div>\n\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 11,
          "x": 13,
          "y": 150
        },
        "id": 116,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; align-items: flex-start; background-color: rgb(191,225,33); padding: 13px; border-radius: 5px; color: white;\">\n    <h3 style=\"margin: 0; font-weight: bold; color: rgb(1, 52, 128);\">Podcast-Zugriffe gesamt über alle Plattformen</h3>\n    <h3 style=\"margin: 0; margin-top: 5px; color: rgb(1, 52, 128);\">(inkl. ARD-Audiothek)</h3>\n</div>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "transparent",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 1,
          "w": 6,
          "x": 0,
          "y": 153
        },
        "id": 117,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20,
            "valueSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  'Bitte beachten: jew. unterschiedliche Skala'\nFROM(\nSELECT 'Bitte beachten: jew. unterschiedliche Skala' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 24,
          "x": 0,
          "y": 154
        },
        "id": 123,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: inline-flex; align-items: center; flex-wrap: wrap;\">\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #43a8c7; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Die Ernährungs-Docs</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #d9eef4; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Abenteuer Diagnose</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #45618a; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Raus aus der Depression</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #a3b6d1; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Tatsächlich schwanger</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #8ecedd; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Das Coronavirus</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #1f5666; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Frag dich fit</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #233144; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Hormongesteuert</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #b4dce9; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Charité intensiv: Station 43</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #2e809a; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Die neue Norm</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #cdd6e5; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>WDR 5 Innenwelt</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #7a95bd; margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Sucht & Süchtig</span>\n  </div>\n</div>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 8,
          "x": 0,
          "y": 156
        },
        "id": 124,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Audioabrufe</h3>\r\n    <h3>weltweit in Mio.</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 8,
          "x": 8,
          "y": 156
        },
        "id": 126,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Hörvolumen</h3>\r\n    <h3>weltweit in Mio. Stunden</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 8,
          "x": 16,
          "y": 156
        },
        "id": 125,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Nutzungsvorgänge / Abrufe / Downloads</h3>\r\n    <h3>weltweit in Mio.</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 11,
          "w": 8,
          "x": 0,
          "y": 160
        },
        "id": 122,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'Gesamt').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'monat').values;\n  const docs = s.fields.find((f) => f.name === 'docs').values;\n  const abenteuerDiagnose = s.fields.find((f) => f.name === 'AbenteuerDiagnose').values;\n  const rausausderDepression = s.fields.find((f) => f.name === 'RausausderDepression').values;\n  const tatsaechlichschwanger = s.fields.find((f) => f.name === 'Tatsaechlichschwanger').values;\n\n  const coronavirusUpdate = s.fields.find((f) => f.name === 'CoronavirusUpdate').values;\n  const docEsserfragdichfit = s.fields.find((f) => f.name === 'DocEsserfragdichfit').values;\n  const hormongesteuert = s.fields.find((f) => f.name === 'Hormongesteuert').values;\n  const chariteintensiv = s.fields.find((f) => f.name === 'Chariteintensiv').values;\n  const dieneueNormmitRaulKrauthausen = s.fields.find((f) => f.name === 'DieneueNormmitRaulKrauthausen').values;\n  const wDR5Innenwelt = s.fields.find((f) => f.name === 'WDR5Innenwelt').values;\n\n  const suchtSuechtig = s.fields.find((f) => f.name === 'SuchtSuechtig').values;\n\n  return [\n    {\n      name: 'Die Ernährungs-Docs',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(67,168,199)\"\n      },\n      data: docs.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Abenteuer Diagnose',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(217,238,244)\"\n      },\n      data: abenteuerDiagnose.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Raus aus der Depression',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(69,97,138)\"\n      },\n      data: rausausderDepression.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Tatsächlich schwanger',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(163,182,209)\"\n      },\n      data: tatsaechlichschwanger.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Das Coronavirus',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(142,203,221)\"\n      },\n      data: coronavirusUpdate.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Frag dich fit',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(31,86,102)\"\n      },\n      data: docEsserfragdichfit.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Hormongesteuert',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(35,49,69)\"\n      },\n      data: hormongesteuert.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Charité intensiv: Station 43',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(180,220,233)\"\n      },\n      data: chariteintensiv.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Die neue Norm',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(46,128,154)\"\n      },\n      data: dieneueNormmitRaulKrauthausen.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'WDR 5 Innenwelt',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(205,214,229)\"\n      },\n      data: wDR5Innenwelt.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Sucht & Süchtig',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(122,149,189)\"\n      },\n      data: suchtSuechtig.map((value, index) => [timeValues[index], value])\n    }\n  ]\n}).flat();\n\n\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    show: false,\n    bottom: '0%',\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      //showMaxLabel: '20'\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH raw_data AS(\r\nSELECT month, podcast, audioabrufe.audioabrufe/1000000 as audioabrufe\r\nFROM KC.audioabrufe),\r\ndata AS(\r\nSELECT * EXCEPT(month), REPLACE(month,\" \", \". \") as monat\r\nFROM raw_data\r\nPIVOT (\r\n    SUM(raw_data.audioabrufe)\r\n    FOR podcast IN (\r\n        'Die Ernährungs-Docs - Essen als Medizin' AS docs,\r\n        'Abenteuer Diagnose' AS AbenteuerDiagnose,\r\n        'Raus aus der Depression' AS RausausderDepression,\r\n        'Tatsächlich schwanger' AS Tatsaechlichschwanger,\r\n        'Coronavirus-Update' AS CoronavirusUpdate,\r\n        'Doc Esser - frag dich fit' AS DocEsserfragdichfit,\r\n        'Hormongesteuert' AS Hormongesteuert,\r\n        'Charité intensiv' AS Chariteintensiv,\r\n        'Die neue Norm mit Raul Krauthausen' AS DieneueNormmitRaulKrauthausen,\r\n        'WDR 5 Innenwelt' AS WDR5Innenwelt,\r\n        'Sucht & Süchtig' AS SuchtSuechtig\r\n    )\r\n)),\r\nallsum AS(\r\n    SELECT \"Jul. 24\" as monat, 229702/1000000 as Gesamt\r\n    UNION ALL\r\n    SELECT \"Aug. 24\" as monat, 256036/1000000 as Gesamt\r\n    UNION ALL \r\n    SELECT \"Sep. 24\" as monat, 218036/1000000 as Gesamt\r\n)\r\nSELECT * FROM data\r\nJOIN allsum\r\nUSING(monat)\r\nORDER BY CASE SPLIT(monat, \". \")[0]\r\nWHEN \"Jul\" THEN 1\r\nWHEN \"Aug\" THEN 2\r\nWHEN \"Sep\" THEN 3\r\nEND\r\n\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 11,
          "w": 8,
          "x": 8,
          "y": 160
        },
        "id": 133,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'Gesamt').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'monat').values;\n  const docs = s.fields.find((f) => f.name === 'docs').values;\n  const abenteuerDiagnose = s.fields.find((f) => f.name === 'AbenteuerDiagnose').values;\n  const rausausderDepression = s.fields.find((f) => f.name === 'RausausderDepression').values;\n  const tatsaechlichschwanger = s.fields.find((f) => f.name === 'Tatsaechlichschwanger').values;\n\n  const coronavirusUpdate = s.fields.find((f) => f.name === 'CoronavirusUpdate').values;\n  const docEsserfragdichfit = s.fields.find((f) => f.name === 'DocEsserfragdichfit').values;\n  const hormongesteuert = s.fields.find((f) => f.name === 'Hormongesteuert').values;\n  const chariteintensiv = s.fields.find((f) => f.name === 'Chariteintensiv').values;\n  const dieneueNormmitRaulKrauthausen = s.fields.find((f) => f.name === 'DieneueNormmitRaulKrauthausen').values;\n  const wDR5Innenwelt = s.fields.find((f) => f.name === 'WDR5Innenwelt').values;\n\n  const suchtSuechtig = s.fields.find((f) => f.name === 'SuchtSuechtig').values;\n\n  return [\n    {\n      name: 'Die Ernährungs-Docs',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(67,168,199)\"\n      },\n      data: docs.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Abenteuer Diagnose',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(217,238,244)\"\n      },\n      data: abenteuerDiagnose.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Raus aus der Depression',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(69,97,138)\"\n      },\n      data: rausausderDepression.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Tatsächlich schwanger',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(163,182,209)\"\n      },\n      data: tatsaechlichschwanger.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Das Coronavirus',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(142,203,221)\"\n      },\n      data: coronavirusUpdate.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Frag dich fit',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(31,86,102)\"\n      },\n      data: docEsserfragdichfit.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Hormongesteuert',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(35,49,69)\"\n      },\n      data: hormongesteuert.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Charité intensiv: Station 43',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(180,220,233)\"\n      },\n      data: chariteintensiv.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Die neue Norm',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(46,128,154)\"\n      },\n      data: dieneueNormmitRaulKrauthausen.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'WDR 5 Innenwelt',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(205,214,229)\"\n      },\n      data: wDR5Innenwelt.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Sucht & Süchtig',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(122,149,189)\"\n      },\n      data: suchtSuechtig.map((value, index) => [timeValues[index], value])\n    }\n  ]\n}).flat();\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    show: false,\n    bottom: '0%',\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      //showMaxLabel: '20'\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT * FROM KC.hoervolumen\r\nORDER BY CASE SPLIT(monat, \". \")[0]\r\nWHEN \"Jul\" THEN 1\r\nWHEN \"Aug\" THEN 2\r\nWHEN \"Sep\" THEN 3\r\nEND",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 11,
          "w": 8,
          "x": 16,
          "y": 160
        },
        "id": 134,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'Gesamt').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'monat').values;\n  const docs = s.fields.find((f) => f.name === 'docs').values;\n  const abenteuerDiagnose = s.fields.find((f) => f.name === 'AbenteuerDiagnose').values;\n  const rausausderDepression = s.fields.find((f) => f.name === 'RausausderDepression').values;\n  const tatsaechlichschwanger = s.fields.find((f) => f.name === 'Tatsaechlichschwanger').values;\n\n  const coronavirusUpdate = s.fields.find((f) => f.name === 'CoronavirusUpdate').values;\n  const docEsserfragdichfit = s.fields.find((f) => f.name === 'DocEsserfragdichfit').values;\n  const hormongesteuert = s.fields.find((f) => f.name === 'Hormongesteuert').values;\n  const chariteintensiv = s.fields.find((f) => f.name === 'Chariteintensiv').values;\n  const dieneueNormmitRaulKrauthausen = s.fields.find((f) => f.name === 'DieneueNormmitRaulKrauthausen').values;\n  const wDR5Innenwelt = s.fields.find((f) => f.name === 'WDR5Innenwelt').values;\n\n  const suchtSuechtig = s.fields.find((f) => f.name === 'SuchtSuechtig').values;\n\n  return [\n    {\n      name: 'Die Ernährungs-Docs',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(67,168,199)\"\n      },\n      data: docs.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Abenteuer Diagnose',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(217,238,244)\"\n      },\n      data: abenteuerDiagnose.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Raus aus der Depression',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(69,97,138)\"\n      },\n      data: rausausderDepression.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Tatsächlich schwanger',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(163,182,209)\"\n      },\n      data: tatsaechlichschwanger.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Das Coronavirus',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(142,203,221)\"\n      },\n      data: coronavirusUpdate.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Frag dich fit',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(31,86,102)\"\n      },\n      data: docEsserfragdichfit.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Hormongesteuert',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(35,49,69)\"\n      },\n      data: hormongesteuert.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Charité intensiv: Station 43',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(180,220,233)\"\n      },\n      data: chariteintensiv.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Die neue Norm',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(46,128,154)\"\n      },\n      data: dieneueNormmitRaulKrauthausen.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'WDR 5 Innenwelt',\n      type: \"bar\",\n      stack: 'total',\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(205,214,229)\"\n      },\n      data: wDR5Innenwelt.map((value, index) => [timeValues[index], value])\n    },\n    {\n      name: 'Sucht & Süchtig',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(122,149,189)\"\n      },\n      data: suchtSuechtig.map((value, index) => [timeValues[index], value])\n    }\n  ]\n}).flat();\n\n\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    show: false,\n    bottom: '0%',\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      //showMaxLabel: '20'\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT * FROM KC.nutzungsvorgaenge\r\nORDER BY CASE SPLIT(monat, \". \")[0]\r\nWHEN \"Jul\" THEN 1\r\nWHEN \"Aug\" THEN 2\r\nWHEN \"Sep\" THEN 3\r\nEND",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 171
        },
        "id": 154,
        "panels": [],
        "title": "Web",
        "type": "row"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 24,
          "x": 0,
          "y": 172
        },
        "id": 136,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; align-items: center; background-color: rgb(0, 51, 179); padding: 5px; border-radius: 5px; color: white;\">\n    <img width=\"50\" height=\"35\" src=\"$maus_img\" style=\"margin-right: 10px;\"/>\n    <h3 style=\"margin: 0; font-weight: bold;\">Web</h3>\n</div>\n\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "transparent",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 1,
          "w": 6,
          "x": 0,
          "y": 174
        },
        "id": 137,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20,
            "valueSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  'Bitte beachten: jew. unterschiedliche Skala'\nFROM(\nSELECT 'Bitte beachten: jew. unterschiedliche Skala' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "transparent",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 1,
          "w": 18,
          "x": 6,
          "y": 174
        },
        "id": 141,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20,
            "valueSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  ' '\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 8,
          "x": 0,
          "y": 175
        },
        "id": 138,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Visits</h3>\r\n    <h3>weltweit in Mio.</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 8,
          "x": 8,
          "y": 175
        },
        "id": 140,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Videoabrufe</h3>\r\n    <h3>weltweit in Mio.</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 8,
          "x": 16,
          "y": 175
        },
        "id": 139,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Sehvolumen</h3>\r\n    <h3>weltweit in Mio. Stunden</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 8,
          "x": 0,
          "y": 179
        },
        "id": 142,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'views').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'monat').values;\n  const lineares_fernsehen = s.fields.find((f) => f.name === 'views').values;\n\n  return [\n    {\n      name: 'Visits',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(1, 52, 128)\"\n      },\n      data: lineares_fernsehen.map((value, index) => [timeValues[index], value])\n    }\n  ]\n}).flat();\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    show: false,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      //showMaxLabel: '20'\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"Jul. 24\" as monat, 7.349 as views\r\nUNION ALL\r\nSELECT \"Aug. 24\" as monat, 7.031 as views\r\nUNION ALL\r\nSELECT \"Sep. 24\" as monat, 6.354 as views\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "berücksichtigte Formate: Visite, Die Ernährungs-Docs, Abenteuer Diagnose, Natur-Docs",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 8,
          "x": 8,
          "y": 179
        },
        "id": 143,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'views').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'monat').values;\n  const lineares_fernsehen = s.fields.find((f) => f.name === 'views').values;\n\n  return [\n    {\n      name: 'Videoabrufe',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(1, 52, 128)\"\n      },\n      data: lineares_fernsehen.map((value, index) => [timeValues[index], value])\n    }\n  ]\n}).flat();\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    show: false,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      //showMaxLabel: '20'\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"Jul. 24\" as monat, 0.345 as views\r\nUNION ALL\r\nSELECT \"Aug. 24\" as monat, 0.267 as views\r\nUNION ALL\r\nSELECT \"Sep. 24\" as monat, 0.305 as views\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 8,
          "x": 16,
          "y": 179
        },
        "id": 144,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'views').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'monat').values;\n  const lineares_fernsehen = s.fields.find((f) => f.name === 'views').values;\n\n  return [\n    {\n      name: 'Sehvolumen',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(1, 52, 128)\"\n      },\n      data: lineares_fernsehen.map((value, index) => [timeValues[index], value])\n    }\n  ]\n}).flat();\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    show: false,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      //showMaxLabel: '20'\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"Jul. 24\" as monat, 0.040 as views\r\nUNION ALL\r\nSELECT \"Aug. 24\" as monat, 0.030 as views\r\nUNION ALL\r\nSELECT \"Sep. 24\" as monat, 0.039 as views\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 8,
          "x": 3,
          "y": 187
        },
        "id": 147,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Verweildauer / Visit</h3>\r\n    <h3>weltweit in Stunden</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 8,
          "x": 13,
          "y": 187
        },
        "id": 145,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Pageviews / Visit</h3>\r\n    <h3>weltweit</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 8,
          "x": 3,
          "y": 191
        },
        "id": 148,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'formatted_time').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'monat').values;\n  const lineares_fernsehen = s.fields.find((f) => f.name === 'views').values;\n  const formatted_time = s.fields.find((f) => f.name === 'formatted_time').values;\n\n  return [\n    {\n      name: 'Verweildauer / Visit',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          return allSumValue;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(1, 52, 128)\"\n      },\n      data: lineares_fernsehen.map((value, index) => [timeValues[index], value, formatted_time[index]])\n    }\n  ]\n}).flat();\n\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[2];\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + number + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    show: false,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      //showMaxLabel: '20'\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"Jul. 24\" as monat, 517 as views, \"00:08:37\"  as formatted_time\r\nUNION ALL\r\nSELECT \"Aug. 24\" as monat, 516 as views, \"00:08:36\" as formatted_time\r\nUNION ALL\r\nSELECT \"Sep. 24\" as monat, 537 as views, \"00:08:57\" as formatted_time\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 8,
          "x": 13,
          "y": 191
        },
        "id": 146,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'views').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'monat').values;\n  const lineares_fernsehen = s.fields.find((f) => f.name === 'views').values;\n\n  return [\n    {\n      name: 'Pageviews / Visit',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(1, 52, 128)\"\n      },\n      data: lineares_fernsehen.map((value, index) => [timeValues[index], value])\n    }\n  ]\n}).flat();\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    show: false,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      //showMaxLabel: '20'\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"Jul. 24\" as monat, 1.87 as views\r\nUNION ALL\r\nSELECT \"Aug. 24\" as monat, 1.83 as views\r\nUNION ALL\r\nSELECT \"Sep. 24\" as monat, 1.86 as views\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 8,
          "x": 3,
          "y": 199
        },
        "id": 151,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Trafficquellen (Visits)</h3>\r\n    <h3>weltweit in Prozent</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 8,
          "x": 13,
          "y": 199
        },
        "id": 149,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n    <h3 style=\"font-weight: bold;\">Suchmaschinenanteil (Visits)</h3>\r\n    <h3>weltweit in Prozent</h3>\r\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 8,
          "x": 3,
          "y": 203
        },
        "id": 152,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const colorMapping = {\n  \"Direktzugriff\": \"RGB(144,170,23)\",\n  \"Google\": \"RGB(191,225,33)\",\n  \"E-Mail-Marketing\": \"RGB(217,237,121)\",\n  \"Facebook\": \"RGB(17,86,251)\",\n  \"Bing\": \"RGB(14,203,221)\",\n  \"Instagram\": \"RGB(205,0,153)\",\n  \"Push-Nachrichten\": \"RGB(67,168,199)\",\n  \"Sonstige\": \"RGB(221,203,164)\"\n};\n\n// Helper function to format numbers to German format\nfunction formatNumberGerman(value) {\n  return Math.round(value).toLocaleString('de-DE');\n}\n\n// Retrieve data from the context\nconst seriesData = context.panel.data.series.map((s) => {\n  const categories = s.fields.find((f) => f.name === 'quelle').values.buffer || s.fields.find((f) => f.name === 'quelle').values;\n  const percentages = s.fields.find((f) => f.name === 'views').values.buffer || s.fields.find((f) => f.name === 'views').values;\n\n  return categories.map((category, i) => ({\n    name: category,\n    value: percentages[i],\n    itemStyle: {\n      color: colorMapping[category] || '#cccccc'  // Default to grey if no match\n    }\n  }));\n})[0];  // Since it's a pie chart, we take the first series.\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'item',\n    formatter: (params) => {\n      return `<b>${params.name}</b><br/>${formatNumberGerman(params.value)} (${formatNumberGerman(params.percent)}%)`;\n    },\n    textStyle: {\n      fontWeight: 'bold',\n      fontSize: 14,  // Increase font size for tooltip text\n    }\n  },\n  legend: {\n    orient: 'vertical',  // Arrange the legend items vertically\n    left: 'right',       // Position the legend on the right side\n    top: 'center',\n    show: false,      // Center the legend vertically\n    formatter: (name) => {\n      return `${name}`;  // Just the name without values or percentages\n    },\n    textStyle: {\n      color: 'rgba(128, 128, 128, .9)',\n      fontSize: 12  // Increase font size for legend labels\n    }\n  },\n  series: [\n    {\n      name: 'Trafficquellen',\n      type: 'pie',\n      radius: ['45%', '90%'],  // Creates a donut shape\n      data: seriesData,\n      label: {\n        show: true,\n        formatter: (params) => `${formatNumberGerman(params.percent)}%`,   // Display only the rounded percentage\n        position: 'outside',  // Position the label inside the donut slices\n        textStyle: {\n          //color: '#fff',     // White color for better contrast\n          fontWeight: 'bold',\n        }\n      },\n      labelLine: {\n        show: true,  // Hides the line connecting labels to slices since the labels are inside\n      },\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)',\n        },\n      },\n    },\n  ],\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"Direktzugriff\" as quelle, 5355087 as views\r\nUNION ALL\r\nSELECT \"Google\",\t13816062\r\nUNION ALL\r\nSELECT \"E-Mail-Marketing\", 0\r\nUNION ALL\r\nSELECT \"Facebook\",\t45248\r\nUNION ALL\r\nSELECT \"Bing\",\t294273\r\nUNION ALL\r\nSELECT \"Instagram\",\t171811\r\nUNION ALL\r\nSELECT \"Push-Nachrichten\", 0\r\nUNION ALL\r\nSELECT \"Sonstige\",\t1051620",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 8,
          "x": 13,
          "y": 203
        },
        "id": 150,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'views').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'monat').values;\n  const lineares_fernsehen = s.fields.find((f) => f.name === 'views').values;\n\n  return [\n    {\n      name: 'Pageviews / Visit',\n      type: \"bar\",\n      stack: 'total',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = allSumValue;\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number) + '%';\n          return formattedNumber;\n        }\n      },\n      smooth: true,\n      showSymbol: false,\n      itemStyle: {\n        color: \"rgb(1, 52, 128)\"\n      },\n      data: lineares_fernsehen.map((value, index) => [timeValues[index], value])\n    }\n  ]\n}).flat();\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = `<span style=\"font-weight:bold;\">${params[0].axisValue}</span>` + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = item.data[1];\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + `<span style=\"font-weight:bold;\">${item.seriesName}</span>` + ': ' + formattedValue + '%' + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    show: false,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      //showMaxLabel: '20'\n      textStyle: {\n        fontWeight: 'bold' // Make the text bold\n      }\n    },\n  },\n  yAxis: {\n    type: 'value',\n    show: false,\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return Intl.NumberFormat('de-DE').format(value);\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '10%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"Jul. 24\" as monat, 70 as views\r\nUNION ALL\r\nSELECT \"Aug. 24\" as monat, 71 as views\r\nUNION ALL\r\nSELECT \"Sep. 24\" as monat, 70 as views\r\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-echarts-panel"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 12,
          "x": 2,
          "y": 211
        },
        "id": 153,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"display: inline-flex; align-items: center;\">\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(144,170,23); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Direktzugriff</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(191,225,33); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Google</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(217,237,121); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>E-Mail-Marketing</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(17,86,251); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Facebook</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(14,203,221); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Bing</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(205,0,153); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Instagram</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(67,168,199); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Push-Nachrichten</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(221,203,164); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Sonstige</span>\n  </div>\n</div>\n",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      }
    ],
    "preload": false,
    "schemaVersion": 40,
    "tags": [],
    "templating": {
      "list": [
        {
          "current": {
            "text": "15",
            "value": "15"
          },
          "name": "Zeitraum",
          "options": [
            {
              "selected": false,
              "text": "Januar",
              "value": "1"
            },
            {
              "selected": false,
              "text": "Februar",
              "value": "2"
            },
            {
              "selected": false,
              "text": "März",
              "value": "3"
            },
            {
              "selected": false,
              "text": "April",
              "value": "4"
            },
            {
              "selected": false,
              "text": "Mai",
              "value": "5"
            },
            {
              "selected": false,
              "text": "Juni",
              "value": "6"
            },
            {
              "selected": false,
              "text": "Juli",
              "value": "7"
            },
            {
              "selected": false,
              "text": "August",
              "value": "8"
            },
            {
              "selected": false,
              "text": "September",
              "value": "9"
            },
            {
              "selected": false,
              "text": "Oktober",
              "value": "10"
            },
            {
              "selected": false,
              "text": "November",
              "value": "11"
            },
            {
              "selected": false,
              "text": "Dezember",
              "value": "12"
            },
            {
              "selected": false,
              "text": "1. Quartal",
              "value": "13"
            },
            {
              "selected": false,
              "text": "2. Quartal",
              "value": "14"
            },
            {
              "selected": true,
              "text": "3. Quartal",
              "value": "15"
            },
            {
              "selected": false,
              "text": "4. Quartal",
              "value": "16"
            },
            {
              "selected": false,
              "text": "1. Halbjahr",
              "value": "17"
            },
            {
              "selected": false,
              "text": "2. Halbjahr",
              "value": "18"
            },
            {
              "selected": false,
              "text": "Jahr",
              "value": "19"
            }
          ],
          "query": "Januar : 1, Februar :  2, März : 3, April : 4, Mai : 5, Juni : 6, Juli : 7, August : 8, September : 9, Oktober : 10, November : 11, Dezember : 12,  1. Quartal : 13, 2. Quartal : 14, 3. Quartal : 15, 4. Quartal : 16, 1. Halbjahr : 17, 2. Halbjahr : 18, Jahr : 19",
          "type": "custom"
        },
        {
          "current": {
            "text": "2024",
            "value": "2024"
          },
          "definition": "",
          "name": "Jahr",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT DISTINCT CAST(EXTRACT(YEAR FROM time) AS STRING) AS jahr FROM Quintly.facebook\r\nORDER BY jahr ASC",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        },
        {
          "current": {
            "text": "(EXTRACT(MONTH FROM time) BETWEEN 7 AND 9) AND EXTRACT(YEAR FROM time) = 2024",
            "value": "(EXTRACT(MONTH FROM time) BETWEEN 7 AND 9) AND EXTRACT(YEAR FROM time) = 2024"
          },
          "definition": "",
          "hide": 2,
          "name": "Zeitraum_condition",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE\r\n-- Für Monate\r\nWHEN $Zeitraum BETWEEN 1 AND 12 THEN \"EXTRACT(MONTH FROM time) = $Zeitraum AND EXTRACT(YEAR FROM time) = $Jahr\"\r\n-- Für Quartale, 13: 1. Quartal, 14: 2. Quartal, 15: 3. Quartal, 16: 4. Quartal\r\nWHEN $Zeitraum = 13 THEN \"(EXTRACT(MONTH FROM time) BETWEEN 1 AND 3) AND EXTRACT(YEAR FROM time) = $Jahr\"\r\nWHEN $Zeitraum = 14 THEN \"(EXTRACT(MONTH FROM time) BETWEEN 4 AND 6) AND EXTRACT(YEAR FROM time) = $Jahr\"\r\nWHEN $Zeitraum = 15 THEN \"(EXTRACT(MONTH FROM time) BETWEEN 7 AND 9) AND EXTRACT(YEAR FROM time) = $Jahr\"\r\nWHEN $Zeitraum = 16 THEN \"(EXTRACT(MONTH FROM time) BETWEEN 10 AND 12) AND EXTRACT(YEAR FROM time) = $Jahr\"\r\n-- Für Halbjahre, 17: 1. Halbjahr, 18: 2. Halbjahr\r\nWHEN $Zeitraum = 17 THEN \"(EXTRACT(MONTH FROM time) BETWEEN 1 AND 6) AND EXTRACT(YEAR FROM time) = $Jahr\"\r\nWHEN $Zeitraum = 18 THEN \"(EXTRACT(MONTH FROM time) BETWEEN 7 AND 12) AND EXTRACT(YEAR FROM time) = $Jahr\"\r\n-- Für gesamtes Jahr\r\nWHEN $Zeitraum = 19 THEN \"EXTRACT(YEAR FROM time) = $Jahr\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/instagram.png",
            "value": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/instagram.png"
          },
          "definition": "",
          "hide": 2,
          "name": "image_insta",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT image FROM KC.images WHERE category = \"Instagram\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/yt.png",
            "value": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/yt.png"
          },
          "definition": "",
          "hide": 2,
          "name": "image_yt",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT image FROM KC.images WHERE category = \"Youtube\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/fb_png.png",
            "value": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/fb_png.png"
          },
          "definition": "",
          "hide": 2,
          "name": "image_fb",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT image FROM KC.images WHERE category = \"Facebook\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/tt.png.png",
            "value": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/tt.png.png"
          },
          "definition": "",
          "hide": 2,
          "name": "image_tt",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT image FROM KC.images WHERE category = \"TikTok\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/ARD%20Audiothek.png",
            "value": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/ARD%20Audiothek.png"
          },
          "definition": "",
          "hide": 2,
          "name": "ard_audiothek",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT image FROM KC.images WHERE category = \"ARD Audiothek\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/ARD%20Mediathek.png",
            "value": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/ARD%20Mediathek.png"
          },
          "definition": "",
          "hide": 2,
          "name": "ard_mediathek",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT image FROM KC.images WHERE category = \"ARD Mediathek\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/television.png",
            "value": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/television.png"
          },
          "definition": "",
          "hide": 2,
          "name": "lineares_fernsehen",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT image FROM KC.images WHERE category = \"Lineares Fernsehen\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/Visite.png",
            "value": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/Visite.png"
          },
          "definition": "",
          "hide": 2,
          "name": "visite",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT image FROM KC.images WHERE category = \"Visite\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/ernaehrungsdocs_Logo.png",
            "value": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/ernaehrungsdocs_Logo.png"
          },
          "definition": "",
          "hide": 2,
          "name": "ernaehrungs_docs",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT image FROM KC.images WHERE category = \"Ernährungs-Docs\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/Abenteuer%20Diagnose.png",
            "value": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/Abenteuer%20Diagnose.png"
          },
          "definition": "",
          "hide": 2,
          "name": "abenteuer_diagnose",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT image FROM KC.images WHERE category = \"Abenteuer Diagnose\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/maus.png",
            "value": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/maus.png"
          },
          "definition": "",
          "hide": 2,
          "name": "maus_img",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT image FROM KC.images WHERE category = \"Maus\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "404083",
            "value": "404083"
          },
          "definition": "",
          "hide": 2,
          "name": "yt_ids",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"404083\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "275872",
            "value": "275872"
          },
          "definition": "",
          "hide": 2,
          "name": "fb_ids",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"275872\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "'17841421628394679', '17841455899519665'",
            "value": "'17841421628394679', '17841455899519665'"
          },
          "definition": "",
          "hide": 2,
          "name": "ig_ids",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"'17841421628394679', '17841455899519665'\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "'_000S7aNhaOhWpxtCb7bFvVzb3WHx9oOOhrY'",
            "value": "'_000S7aNhaOhWpxtCb7bFvVzb3WHx9oOOhrY'"
          },
          "definition": "",
          "hide": 2,
          "name": "tt_ids",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"'_000S7aNhaOhWpxtCb7bFvVzb3WHx9oOOhrY'\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/Abenteuer%20Diagnose.png",
            "value": "https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/Abenteuer%20Diagnose.png"
          },
          "definition": "",
          "hide": 2,
          "name": "program_image",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$Programme\"\r\nWHEN \"Visite\" THEN \"$visite\"\r\nWHEN \"Die Ernährungs-Docs\" THEN \"$ernaehrungs_docs\"\r\nWHEN \"Abenteuer Diagnose\" THEN \"$abenteuer_diagnose\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "",
            "value": ""
          },
          "definition": "",
          "hide": 2,
          "name": "anzahl_hr_sendungen_programme",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$Programme\"\r\nWHEN \"Visite\" THEN \"hr 12\"\r\nWHEN \"Die Ernährungs-Docs\" THEN \"\"\r\nWHEN \"Abenteuer Diagnose\" THEN \"\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "",
            "value": ""
          },
          "definition": "",
          "hide": 2,
          "name": "anzahl_mdr_sendungen_programme",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$Programme\"\r\nWHEN \"Visite\" THEN \"MDR 11\"\r\nWHEN \"Die Ernährungs-Docs\" THEN \"\"\r\nWHEN \"Abenteuer Diagnose\" THEN \"\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "NDR 5",
            "value": "NDR 5"
          },
          "definition": "",
          "hide": 2,
          "name": "anzahl_ndr_sendungen_programme",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$Programme\"\r\nWHEN \"Visite\" THEN \"NDR 11\"\r\nWHEN \"Die Ernährungs-Docs\" THEN \"NDR 1\"\r\nWHEN \"Abenteuer Diagnose\" THEN \"NDR 5\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Abenteuer Diagnose",
            "value": "Abenteuer Diagnose"
          },
          "hide": 2,
          "name": "Programme",
          "options": [
            {
              "selected": false,
              "text": "Visite",
              "value": "Visite"
            },
            {
              "selected": false,
              "text": "Die Ernährungs-Docs",
              "value": "Die Ernährungs-Docs"
            },
            {
              "selected": true,
              "text": "Abenteuer Diagnose",
              "value": "Abenteuer Diagnose"
            }
          ],
          "query": "Visite, Die Ernährungs-Docs, Abenteuer Diagnose",
          "type": "custom"
        },
        {
          "current": {
            "text": "Facebook",
            "value": "Facebook"
          },
          "hide": 2,
          "label": "Plattform",
          "name": "SocialMediaPlatform",
          "options": [
            {
              "selected": true,
              "text": "Facebook",
              "value": "Facebook"
            },
            {
              "selected": false,
              "text": "YouTube",
              "value": "YouTube"
            },
            {
              "selected": false,
              "text": "Instagram",
              "value": "Instagram"
            },
            {
              "selected": false,
              "text": "TikTok",
              "value": "TikTok"
            }
          ],
          "query": "Facebook, YouTube, Instagram, TikTok",
          "type": "custom"
        },
        {
          "current": {
            "text": "EXCEPT(profile, category, order_num, value_mio_hr, value_mio_mdr, value_percent_hr, value_percent_mdr)",
            "value": "EXCEPT(profile, category, order_num, value_mio_hr, value_mio_mdr, value_percent_hr, value_percent_mdr)"
          },
          "definition": "",
          "hide": 2,
          "name": "programme_except_condition_sehbeteiligung",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$Programme\"\r\nWHEN \"Visite\" THEN \"EXCEPT(profile, category, order_num)\"\r\nELSE \"EXCEPT(profile, category, order_num, value_mio_hr, value_mio_mdr, value_percent_hr, value_percent_mdr)\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "EXCEPT(profile, category, order_num, value_mio_hr, value_mio_mdr, value_percent_hr, value_percent_mdr, value_mio_ndr)",
            "value": "EXCEPT(profile, category, order_num, value_mio_hr, value_mio_mdr, value_percent_hr, value_percent_mdr, value_mio_ndr)"
          },
          "definition": "",
          "hide": 2,
          "name": "programme_except_condition_marktanteil",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$Programme\"\r\nWHEN \"Visite\" THEN \"EXCEPT(profile, category, order_num, value_mio_hr, value_mio_mdr, value_mio_ndr)\"\r\nELSE \"EXCEPT(profile, category, order_num, value_mio_hr, value_mio_mdr, value_percent_hr, value_percent_mdr, value_mio_ndr)\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "86",
            "value": "86"
          },
          "definition": "",
          "hide": 2,
          "name": "av_youtube_im_zeitraum_veroeffentlicht",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CAST(COUNT(distinct externalId) as STRING) FROM `Quintly.youtubeAnalyticsVideos` \r\nWHERE profileId IN ($yt_ids )\r\nAND $Zeitraum_condition ",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "383",
            "value": "383"
          },
          "definition": "",
          "hide": 2,
          "name": "av_facebook_im_zeitraum_veroeffentlicht",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \r\nCAST(COUNT( distinct externalId) AS STRING) as Posts\r\n  FROM `ndr-code-bi-dashboard.Quintly.facebookInsightsOwnPosts`\r\n  WHERE profileId IN ($fb_ids ) \r\n  AND $Zeitraum_condition",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "264",
            "value": "264"
          },
          "definition": "",
          "hide": 2,
          "name": "av_instagram_im_zeitraum_veroeffentlicht",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \r\nCAST(SUM(content_count_quintly) AS STRING) as Posts\r\n  FROM `ndr-code-bi-dashboard.KC.ig_insight_kc`\r\n  WHERE profileId IN ($ig_ids) \r\n  AND $Zeitraum_condition",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "25",
            "value": "25"
          },
          "definition": "",
          "hide": 2,
          "name": "av_tiktok_im_zeitraum_veroeffentlicht",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \r\nCAST(SUM(content_count_quintly) AS STRING) as Posts\r\n  FROM `ndr-code-bi-dashboard.KC.tt_insight_kc`\r\n  WHERE profileId IN ($tt_ids) \r\n  AND $Zeitraum_condition",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "610",
            "value": "610"
          },
          "definition": "",
          "hide": 2,
          "name": "av_youtube_im_zeitraum_genutzt",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CAST(COUNT(distinct video_id) as STRING) FROM `KC.yt_video_metrics` \r\nWHERE views_daily > 0\r\nAND channel_id IN (\"UCBaG5iazdtOldkSnaFPRu9w\")\r\nAND $Zeitraum_condition \r\n",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "353.000",
            "value": "353.000"
          },
          "definition": "",
          "hide": 2,
          "name": "abos_youtube",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT REPLACE(FORMAT(\"%'.d\", subscribers_count), \",\",\".\") AS subscribers_count_formatted\r\nFROM KC.yt_channel_metrics\r\nWHERE $Zeitraum_condition  \r\n  AND channel_id = \"UCBaG5iazdtOldkSnaFPRu9w\" \r\nORDER BY time DESC \r\nLIMIT 1;\r\n",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "137.158",
            "value": "137.158"
          },
          "definition": "",
          "hide": 2,
          "name": "abos_tiktok",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "--REPLACE(FORMAT(\"%'.d\", subscribers_count), \",\",\".\")\r\n\r\nSELECT REPLACE(FORMAT(\"%'.d\", SUM(followers_count)), \",\",\".\") FROM KC.tt_insight_kc\r\nWHERE $Zeitraum_condition  \r\nAND profileId IN ($tt_ids )\r\nGROUP BY time\r\nORDER by time DESC LIMIT 1",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "946.786",
            "value": "946.786"
          },
          "definition": "",
          "hide": 2,
          "name": "abos_instagram",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT REPLACE(FORMAT(\"%'.d\", SUM(followers_count)), \",\",\".\")  FROM KC.ig_insight_kc\r\nWHERE $Zeitraum_condition  \r\nAND profileId IN ($ig_ids )\r\nGROUP BY time\r\nORDER by time DESC LIMIT 1",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "167.572",
            "value": "167.572"
          },
          "definition": "",
          "hide": 2,
          "name": "abos_facebook",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "EU",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  REPLACE(FORMAT(\"%'.d\", followers_count), \",\",\".\")  FROM KC.fb_profile_metrics\r\nWHERE $Zeitraum_condition  \r\nAND profile_id = \"395647370461038\" \r\nORDER by time DESC LIMIT 1",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": " ",
            "value": " "
          },
          "definition": "",
          "hide": 2,
          "name": "av_im_zeitraum_genutzt",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\nWHEN \"Facebook\" THEN \" \"\r\nWHEN \"YouTube\" THEN \"$av_youtube_im_zeitraum_genutzt\"\r\nWHEN \"TikTok\" THEN \" \"\r\nWHEN \"Instagram\" THEN \" \"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "167.572",
            "value": "167.572"
          },
          "definition": "",
          "hide": 2,
          "name": "abos",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\nWHEN \"Facebook\" THEN \"$abos_facebook\"\r\nWHEN \"YouTube\" THEN \"$abos_youtube\"\r\nWHEN \"TikTok\" THEN \"$abos_tiktok\"\r\nWHEN \"Instagram\" THEN \"$abos_instagram\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "383",
            "value": "383"
          },
          "definition": "",
          "hide": 2,
          "name": "av_im_zeitraum_veroeffentlicht",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\nWHEN \"Facebook\" THEN \"$av_facebook_im_zeitraum_veroeffentlicht\"\r\nWHEN \"YouTube\" THEN \"$av_youtube_im_zeitraum_veroeffentlicht\"\r\nWHEN \"TikTok\" THEN \"$av_tiktok_im_zeitraum_veroeffentlicht\"\r\nWHEN \"Instagram\" THEN \"$av_instagram_im_zeitraum_veroeffentlicht\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color:  RGB(10,102,255); padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\n    <!-- Left Section: Logo and Title -->\n    <div style=\"display: flex; align-items: center;\">\n        <img width=\"65\" height=\"65\" src=\"https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/fb_png.png\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">Facebook</h1>\n    </div>\n    <!-- Right Section: Data -->\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\n        <!-- Column 1 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Posts:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">383</h3>\n        </div>\n        <!-- Column 3 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Follower::</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(letzter Tag im Quartal)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">167.572</h3>\n        </div>\n    </div>\n</div>\n\n",
            "value": "\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color:  RGB(10,102,255); padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\n    <!-- Left Section: Logo and Title -->\n    <div style=\"display: flex; align-items: center;\">\n        <img width=\"65\" height=\"65\" src=\"https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/fb_png.png\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">Facebook</h1>\n    </div>\n    <!-- Right Section: Data -->\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\n        <!-- Column 1 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Posts:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">383</h3>\n        </div>\n        <!-- Column 3 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Follower::</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(letzter Tag im Quartal)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">167.572</h3>\n        </div>\n    </div>\n</div>\n\n"
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_headline",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\nWHEN \"Facebook\" THEN \"\"\"$social_media_headline_fb\"\"\"\r\nWHEN \"YouTube\" THEN \"\"\"$social_media_headline_yt\"\"\"\r\nWHEN \"TikTok\" THEN \"\"\"$social_media_headline_tt\"\"\"\r\nWHEN \"Instagram\" THEN \"\"\"$social_media_headline_ig\"\"\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color: RGB(10,102,255); padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\n    <!-- Left Section: Logo and Title -->\n    <div style=\"display: flex; align-items: center;\">\n        <img width=\"65\" height=\"65\" src=\"https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/yt.png\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">Facebook</h1>\n    </div>\n    <!-- Right Section: Data -->\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\n        <!-- Column 1 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Videos:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum genutzt)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\"> </h3>\n        </div>\n        <!-- Column 2 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Videos:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">383</h3>\n        </div>\n        <!-- Column 3 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Abos:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(letzter Tag im Quartal)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">167.572</h3>\n        </div>\n    </div>\n</div>\n\n",
            "value": "\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color: RGB(10,102,255); padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\n    <!-- Left Section: Logo and Title -->\n    <div style=\"display: flex; align-items: center;\">\n        <img width=\"65\" height=\"65\" src=\"https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/yt.png\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">Facebook</h1>\n    </div>\n    <!-- Right Section: Data -->\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\n        <!-- Column 1 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Videos:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum genutzt)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\"> </h3>\n        </div>\n        <!-- Column 2 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Videos:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">383</h3>\n        </div>\n        <!-- Column 3 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Abos:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(letzter Tag im Quartal)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">167.572</h3>\n        </div>\n    </div>\n</div>\n\n"
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_headline_yt",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"\"\"\r\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color: $social_media_color; padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\r\n    <!-- Left Section: Logo and Title -->\r\n    <div style=\"display: flex; align-items: center;\">\r\n        <img width=\"65\" height=\"65\" src=\"$image_yt\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\r\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">$SocialMediaPlatform</h1>\r\n    </div>\r\n    <!-- Right Section: Data -->\r\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\r\n        <!-- Column 1 -->\r\n        <div>\r\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Videos:</h3>\r\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum genutzt)</p>\r\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">$av_im_zeitraum_genutzt</h3>\r\n        </div>\r\n        <!-- Column 2 -->\r\n        <div>\r\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Videos:</h3>\r\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\r\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">$av_im_zeitraum_veroeffentlicht</h3>\r\n        </div>\r\n        <!-- Column 3 -->\r\n        <div>\r\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Abos:</h3>\r\n            <p style=\"margin: 0; font-size: 16px;\">(letzter Tag im Quartal)</p>\r\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">$abos</h3>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\"\"\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color:  RGB(10,102,255); padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\n    <!-- Left Section: Logo and Title -->\n    <div style=\"display: flex; align-items: center;\">\n        <img width=\"65\" height=\"65\" src=\"https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/instagram.png\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">Facebook</h1>\n    </div>\n    <!-- Right Section: Data -->\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\n        <!-- Column 1 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Posts:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">383</h3>\n        </div>\n        <!-- Column 3 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Follower::</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(letzter Tag im Quartal)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">167.572</h3>\n        </div>\n    </div>\n</div>\n\n",
            "value": "\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color:  RGB(10,102,255); padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\n    <!-- Left Section: Logo and Title -->\n    <div style=\"display: flex; align-items: center;\">\n        <img width=\"65\" height=\"65\" src=\"https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/instagram.png\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">Facebook</h1>\n    </div>\n    <!-- Right Section: Data -->\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\n        <!-- Column 1 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Posts:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">383</h3>\n        </div>\n        <!-- Column 3 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Follower::</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(letzter Tag im Quartal)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">167.572</h3>\n        </div>\n    </div>\n</div>\n\n"
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_headline_ig",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"\"\"\r\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color:  $social_media_color; padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\r\n    <!-- Left Section: Logo and Title -->\r\n    <div style=\"display: flex; align-items: center;\">\r\n        <img width=\"65\" height=\"65\" src=\"$image_insta\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\r\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">$SocialMediaPlatform</h1>\r\n    </div>\r\n    <!-- Right Section: Data -->\r\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\r\n        <!-- Column 1 -->\r\n        <div>\r\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Posts:</h3>\r\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\r\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">$av_im_zeitraum_veroeffentlicht</h3>\r\n        </div>\r\n        <!-- Column 3 -->\r\n        <div>\r\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Follower::</h3>\r\n            <p style=\"margin: 0; font-size: 16px;\">(letzter Tag im Quartal)</p>\r\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">$abos</h3>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\"\"\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color:  RGB(10,102,255); padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\n    <!-- Left Section: Logo and Title -->\n    <div style=\"display: flex; align-items: center;\">\n        <img width=\"65\" height=\"65\" src=\"https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/fb_png.png\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">Facebook</h1>\n    </div>\n    <!-- Right Section: Data -->\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\n        <!-- Column 1 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Posts:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">383</h3>\n        </div>\n        <!-- Column 3 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Follower::</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(letzter Tag im Quartal)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">167.572</h3>\n        </div>\n    </div>\n</div>\n\n",
            "value": "\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color:  RGB(10,102,255); padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\n    <!-- Left Section: Logo and Title -->\n    <div style=\"display: flex; align-items: center;\">\n        <img width=\"65\" height=\"65\" src=\"https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/fb_png.png\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">Facebook</h1>\n    </div>\n    <!-- Right Section: Data -->\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\n        <!-- Column 1 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Posts:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">383</h3>\n        </div>\n        <!-- Column 3 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Follower::</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(letzter Tag im Quartal)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">167.572</h3>\n        </div>\n    </div>\n</div>\n\n"
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_headline_fb",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"\"\"\r\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color:  $social_media_color; padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\r\n    <!-- Left Section: Logo and Title -->\r\n    <div style=\"display: flex; align-items: center;\">\r\n        <img width=\"65\" height=\"65\" src=\"$image_fb\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\r\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">$SocialMediaPlatform</h1>\r\n    </div>\r\n    <!-- Right Section: Data -->\r\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\r\n        <!-- Column 1 -->\r\n        <div>\r\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Posts:</h3>\r\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\r\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">$av_im_zeitraum_veroeffentlicht</h3>\r\n        </div>\r\n        <!-- Column 3 -->\r\n        <div>\r\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Follower::</h3>\r\n            <p style=\"margin: 0; font-size: 16px;\">(letzter Tag im Quartal)</p>\r\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">$abos</h3>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\"\"\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color:   RGB(10,102,255); padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\n    <!-- Left Section: Logo and Title -->\n    <div style=\"display: flex; align-items: center;\">\n        <img width=\"65\" height=\"65\" src=\"https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/tt.png.png\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">Facebook</h1>\n    </div>\n    <!-- Right Section: Data -->\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\n        <!-- Column 1 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Videos:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">383</h3>\n        </div>\n    </div>\n</div>\n\n",
            "value": "\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color:   RGB(10,102,255); padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\n    <!-- Left Section: Logo and Title -->\n    <div style=\"display: flex; align-items: center;\">\n        <img width=\"65\" height=\"65\" src=\"https://storage.cloud.google.com/europe-west3-dev-environmen-1a26a8be-bucket/KC_images/tt.png.png\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">Facebook</h1>\n    </div>\n    <!-- Right Section: Data -->\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\n        <!-- Column 1 -->\n        <div>\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Videos:</h3>\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">383</h3>\n        </div>\n    </div>\n</div>\n\n"
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_headline_tt",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"\"\"\r\n<div style=\"display: flex; justify-content: space-between; align-items: center; background-color:   $social_media_color; padding: 20px; border-radius: 5px; color: white; font-family: Arial, sans-serif;\">\r\n    <!-- Left Section: Logo and Title -->\r\n    <div style=\"display: flex; align-items: center;\">\r\n        <img width=\"65\" height=\"65\" src=\"$image_tt\" alt=\"YouTube Logo\" style=\"margin-right: 10px;\"/>\r\n        <h1 style=\"margin: 0; font-size: 40px; font-weight: bold;\">$SocialMediaPlatform</h1>\r\n    </div>\r\n    <!-- Right Section: Data -->\r\n    <div style=\"display: flex; gap: 20px; text-align: center;\">\r\n        <!-- Column 1 -->\r\n        <div>\r\n            <h3 style=\"margin: 0; font-size: 18px; font-weight: bold;\">Anzahl Videos:</h3>\r\n            <p style=\"margin: 0; font-size: 16px;\">(im Zeitraum veröffentlicht)</p>\r\n            <h3 style=\"margin: 5px 0; font-size: 24px; font-weight: bold;\">$av_im_zeitraum_veroeffentlicht</h3>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\"\"\"",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "RGB(10,102,255)",
            "value": "RGB(10,102,255)"
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_color",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\nWHEN \"Facebook\" THEN \"\"\"RGB(10,102,255)\"\"\"\r\nWHEN \"YouTube\" THEN \"\"\"RGB(255,1,0)\"\"\"\r\nWHEN \"TikTok\" THEN \"\"\"RGB(0, 0, 0)\"\"\"\r\nWHEN \"Instagram\" THEN \"\"\"RGB(213,0,147)\"\"\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Bitte beachten: jew. unterschiedliche Skala & Auswertung enthält nur Posts die im Auswertungszeitraum veröffentlicht wurden",
            "value": "Bitte beachten: jew. unterschiedliche Skala & Auswertung enthält nur Posts die im Auswertungszeitraum veröffentlicht wurden"
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_text",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\nWHEN \"Facebook\" THEN \"Bitte beachten: jew. unterschiedliche Skala & Auswertung enthält nur Posts die im Auswertungszeitraum veröffentlicht wurden\"\r\nWHEN \"YouTube\" THEN \"Bitte beachten: jew. unterschiedliche Skala & Auswertung enthält alle Videos die im Auswertungszeitraum genutzt wurden\"\r\nWHEN \"TikTok\" THEN \"Bitte beachten: jew. unterschiedliche Skala & Auswertung enthält nur Posts die im Auswertungszeitraum veröffentlicht wurden\"\r\nWHEN \"Instagram\" THEN \"Bitte beachten: jew. unterschiedliche Skala & Auswertung enthält nur Posts die im Auswertungszeitraum veröffentlicht wurden\"\r\nEND ",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "RGB(180,210,255)",
            "value": "RGB(180,210,255)"
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_top_table_title_color",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\nWHEN \"Facebook\" THEN \"RGB(180,210,255)\"\r\nWHEN \"YouTube\" THEN \"RGB(254,185,190)\"\r\nWHEN \"TikTok\" THEN \"RGB(217,217,217)\"\r\nWHEN \"Instagram\" THEN \"RGB(255,153,204)\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "\n        <div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\n            <h3 style=\"font-weight: bold;\">Sehvolumen</h3>\n            <h3>weltweit in Mio.</h3>\n        </div>\n    ",
            "value": "\n        <div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\n            <h3 style=\"font-weight: bold;\">Sehvolumen</h3>\n            <h3>weltweit in Mio.</h3>\n        </div>\n    "
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_sehvolumen_title",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\n    WHEN \"Facebook\" THEN \"\"\"\r\n        <div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n            <h3 style=\"font-weight: bold;\">Sehvolumen</h3>\r\n            <h3>weltweit in Mio.</h3>\r\n        </div>\r\n    \"\"\"\r\n    WHEN \"YouTube\" THEN \"\"\"\r\n        <div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n            <h3 style=\"font-weight: bold;\">Sehvolumen</h3>\r\n            <h3>weltweit in Mio.</h3>\r\n        </div>\r\n    \"\"\"\r\n    WHEN \"TikTok\" THEN \"\"\r\n    WHEN \"Instagram\" THEN \"\"\"\r\n        <div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n            <h3 style=\"font-weight: bold;\">Sehvolumen</h3>\r\n            <h3>weltweit in Stunden, nur für Reels</h3>\r\n        </div>\r\n    \"\"\"\r\nEND\r\n",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Top 10 Posts nach Interaktionen",
            "value": "Top 10 Posts nach Interaktionen"
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_top_table_title",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\nWHEN \"Facebook\" THEN \"Top 10 Posts nach Interaktionen\"\r\nWHEN \"YouTube\" THEN \"Top 10 Videos nach Videoabrufen (in Mio.)\"\r\nWHEN \"TikTok\" THEN \"Top 10 Videos nach Videoabrufen\"\r\nWHEN \"Instagram\" THEN \"Top 10 Posts nach Interaktionen\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": " \n        <div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\n            <h3 style=\"font-weight: bold;\">Potenzielle Reichweite pro Tag</h3>\n            <h3>weltweit in Mio.</h3>\n        </div> \n    ",
            "value": " \n        <div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\n            <h3 style=\"font-weight: bold;\">Potenzielle Reichweite pro Tag</h3>\n            <h3>weltweit in Mio.</h3>\n        </div> \n    "
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_pot_reichweite",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\n    WHEN \"Facebook\" THEN \"\"\" \r\n        <div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n            <h3 style=\"font-weight: bold;\">Potenzielle Reichweite pro Tag</h3>\r\n            <h3>weltweit in Mio.</h3>\r\n        </div> \r\n    \"\"\"\r\n    WHEN \"YouTube\" THEN \"\"\r\n    WHEN \"TikTok\" THEN \"\"\r\n    WHEN \"Instagram\" THEN \"\"\"\r\n        <div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 9.25vh; text-align: center;\">\r\n            <h3 style=\"font-weight: bold;\">Potenzielle Reichweite pro Tag</h3>\r\n            <h3>weltweit in Mio.</h3>\r\n        </div>\r\n    \"\"\"\r\nEND\r\n",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "<div style=\"display: inline-flex; align-items: center; margin: 5px;\">\n  <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #b4d2ff; margin-right: 5px; border: 1px solid #000;\"></span>\n  <span>Visite</span>\n</div>",
            "value": "<div style=\"display: inline-flex; align-items: center; margin: 5px;\">\n  <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #b4d2ff; margin-right: 5px; border: 1px solid #000;\"></span>\n  <span>Visite</span>\n</div>"
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_legend",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\nWHEN \"Facebook\" THEN \"\"\"<div style=\"display: inline-flex; align-items: center; margin: 5px;\">\r\n  <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #b4d2ff; margin-right: 5px; border: 1px solid #000;\"></span>\r\n  <span>Visite</span>\r\n</div>\"\"\"\r\nWHEN \"YouTube\" THEN \"\"\"<div style=\"display: inline-flex; align-items: center; margin: 5px;\">\r\n  <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #feb9be; margin-right: 5px; border: 1px solid #000;\"></span>\r\n  <span>ARD Gesund</span>\r\n</div>\"\"\"\r\nWHEN \"TikTok\" THEN \"\"\"<div style=\"display: inline-flex; align-items: center; margin: 5px;\">\r\n  <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #d9d9d9; margin-right: 5px; border: 1px solid #000;\"></span>\r\n  <span>@safespace.offiziell</span>\r\n</div>\"\"\"\r\nWHEN \"Instagram\" THEN \"\"\"<div style=\"display: inline-flex; align-items: center;\">\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 10px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #ffccff; margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>Die Ernährungs-Docs</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-left: 10px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: #ff99cc; margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>fühlen wir</span>\r\n  </div>\r\n</div>\"\"\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "<div style=\"display: flex; align-items: center; background-color: RGB(180,210,255); padding: 5px; border-radius: 5px; color: white;\">\n    <h3 style=\"margin: 0; font-weight: bold; color: rgb(1, 52, 128);\">Struktur <span style=\"font-weight: normal; font-size: 14px;\">(Basis: Potentielle Reichweite)</span></h3>\n</div>",
            "value": "<div style=\"display: flex; align-items: center; background-color: RGB(180,210,255); padding: 5px; border-radius: 5px; color: white;\">\n    <h3 style=\"margin: 0; font-weight: bold; color: rgb(1, 52, 128);\">Struktur <span style=\"font-weight: normal; font-size: 14px;\">(Basis: Potentielle Reichweite)</span></h3>\n</div>"
          },
          "definition": "",
          "hide": 2,
          "name": "social_media_struktur_text",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\nWHEN \"Facebook\" THEN \"\"\"<div style=\"display: flex; align-items: center; background-color: ${social_media_top_table_title_color}; padding: 5px; border-radius: 5px; color: white;\">\r\n    <h3 style=\"margin: 0; font-weight: bold; color: rgb(1, 52, 128);\">Struktur <span style=\"font-weight: normal; font-size: 14px;\">(Basis: Potentielle Reichweite)</span></h3>\r\n</div>\"\"\"\r\n\r\nWHEN \"YouTube\" THEN \"\"\"<div style=\"display: flex; align-items: center; background-color: ${social_media_top_table_title_color}; padding: 5px; border-radius: 5px; color: white;\">\r\n    <h3 style=\"margin: 0; font-weight: bold; color: rgb(1, 52, 128);\">Struktur <span style=\"font-weight: normal; font-size: 14px;\">(Basis: Videostarts von angemeldeten Usern)</span></h3>\r\n</div>\"\"\"\r\n\r\nWHEN \"TikTok\" THEN \"\"\"\"\"\"\r\n\r\nWHEN \"Instagram\" THEN \"\"\"<div style=\"display: flex; align-items: center; background-color: ${social_media_top_table_title_color}; padding: 5px; border-radius: 5px; color: white;\">\r\n    <h3 style=\"margin: 0; font-weight: bold; color: rgb(1, 52, 128);\">Struktur <span style=\"font-weight: normal; font-size: 12px;\">(Basis: Follower)</span></h3>\r\n</div>\"\"\"\r\nEND\r\n",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "<div style=\"display: inline-flex; align-items: center;\">\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(0,26,64); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>13-17</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(1,52,128); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>18-24</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(67,168,199); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>25-34</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(10,102,255); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>35-44</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(103,164,255); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>45-54</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(180,210,255); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>55-64</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(205,224,255); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>65+</span>\n  </div>\n</div>\n",
            "value": "<div style=\"display: inline-flex; align-items: center;\">\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(0,26,64); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>13-17</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(1,52,128); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>18-24</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(67,168,199); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>25-34</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(10,102,255); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>35-44</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(103,164,255); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>45-54</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(180,210,255); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>55-64</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(205,224,255); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>65+</span>\n  </div>\n</div>\n"
          },
          "definition": "",
          "hide": 2,
          "name": "age_social_media_legend",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\nWHEN \"Facebook\" THEN \"\"\"<div style=\"display: inline-flex; align-items: center;\">\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(0,26,64); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>13-17</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(1,52,128); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>18-24</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(67,168,199); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>25-34</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(10,102,255); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>35-44</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(103,164,255); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>45-54</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(180,210,255); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>55-64</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(205,224,255); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>65+</span>\r\n  </div>\r\n</div>\r\n\"\"\"\r\nWHEN \"YouTube\" THEN \"\"\"<div style=\"display: inline-flex; align-items: center;\">\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(64,0,0); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>13-17</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(128,1,1); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>18-24</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(199,67,67); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>25-34</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(255,10,10); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>35-44</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(255,103,103); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>45-54</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(255,180,180); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>55-64</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(255,205,205); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>65+</span>\r\n  </div>\r\n</div>\r\n\"\"\"\r\nWHEN \"TikTok\" THEN \"\"\r\nWHEN \"Instagram\" THEN \"\"\"<div style=\"display: inline-flex; align-items: center;\">\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(153,0,153); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>13-17</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(205,0,153); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>18-24</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(246,0,170); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>25-34</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(255,3,102); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>35-44</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(255,51,154); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>45-54</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(255,153,204); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>55-64</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(255,204,255); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>65+</span>\r\n  </div>\r\n</div>\r\n\"\"\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "<div style=\"display: inline-flex; align-items: center;\">\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(10,102,255); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Männlich</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(205,224,255); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Weiblich</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(1,52,128); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Unbeekannt</span>\n  </div>\n</div>\n",
            "value": "<div style=\"display: inline-flex; align-items: center;\">\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(10,102,255); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Männlich</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(205,224,255); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Weiblich</span>\n  </div>\n  <div style=\"display: inline-flex; align-items: center;\">\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(1,52,128); margin-right: 5px; border: 1px solid #000;\"></span>\n    <span>Unbeekannt</span>\n  </div>\n</div>\n"
          },
          "definition": "",
          "hide": 2,
          "name": "gender_social_media_legend",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$SocialMediaPlatform\"\r\nWHEN \"Facebook\" THEN \"\"\"<div style=\"display: inline-flex; align-items: center;\">\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(10,102,255); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>Männlich</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(205,224,255); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>Weiblich</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(1,52,128); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>Unbeekannt</span>\r\n  </div>\r\n</div>\r\n\"\"\"\r\nWHEN \"YouTube\" THEN \"\"\"<div style=\"display: inline-flex; align-items: center;\">\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(255,10,10); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>Männlich</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(255,205,205); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>Weiblich</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(128,1,1); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>Unbeekannt</span>\r\n  </div>\r\n</div>\r\n\"\"\"\r\nWHEN \"TikTok\" THEN \"\"\r\nWHEN \"Instagram\" THEN \"\"\"<div style=\"display: inline-flex; align-items: center;\">\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(205,0,153); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>Männlich</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center; margin-right: 15px;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(255,153,204); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>Weiblich</span>\r\n  </div>\r\n  <div style=\"display: inline-flex; align-items: center;\">\r\n    <span style=\"display: inline-block; width: 15px; height: 15px; background-color: RGB(153,0,153); margin-right: 5px; border: 1px solid #000;\"></span>\r\n    <span>Unbeekannt</span>\r\n  </div>\r\n</div>\r\n\"\"\"\r\nEND",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "13",
            "value": "13"
          },
          "hide": 2,
          "name": "filled_size",
          "options": [
            {
              "selected": false,
              "text": "13",
              "value": "13"
            }
          ],
          "query": "13",
          "type": "custom"
        }
      ]
    },
    "time": {
      "from": "2024-01-16T03:42:42.907Z",
      "to": "2024-01-17T03:42:42.907Z"
    },
    "timepicker": {
      "hidden": true
    },
    "timezone": "Europe/Berlin",
    "title": "Report Kompetenzcenter MVP",
    "uid": "be4abo7q3w5q8e",
    "version": 170,
    "weekStart": ""
  }
}

{
  "meta": {
    "type": "db",
    "canSave": true,
    "canEdit": true,
    "canAdmin": true,
    "canStar": true,
    "canDelete": true,
    "slug": "podcast-mdr-spotify-debug",
    "url": "/d/ce1j4g0akg35sb/podcast-mdr-spotify-debug",
    "expires": "0001-01-01T00:00:00Z",
    "created": "2024-10-21T09:55:56Z",
    "updated": "2024-11-28T10:26:07Z",
    "updatedBy": "thomas koester dev",
    "createdBy": "adrian westphal dev",
    "version": 8,
    "hasAcl": false,
    "isFolder": false,
    "folderId": 660,
    "folderUid": "folder-F9a5Uxn4k",
    "folderTitle": "Prototypes",
    "folderUrl": "/dashboards/f/folder-F9a5Uxn4k/prototypes",
    "provisioned": false,
    "provisionedExternalId": "",
    "annotationsPermissions": {
      "dashboard": {
        "canAdd": true,
        "canEdit": true,
        "canDelete": true
      },
      "organization": {
        "canAdd": true,
        "canEdit": true,
        "canDelete": true
      }
    }
  },
  "dashboard": {
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": {
            "type": "grafana",
            "uid": "-- Grafana --"
          },
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "target": {
            "limit": 100,
            "matchAny": false,
            "tags": [],
            "type": "dashboard"
          },
          "type": "dashboard"
        }
      ]
    },
    "description": "Mapping included",
    "editable": true,
    "fiscalYearStartMonth": 0,
    "graphTooltip": 0,
    "id": 1550,
    "links": [],
    "panels": [
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 11,
          "x": 13,
          "y": 0
        },
        "id": 74,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": " ${hinweis}",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 2
        },
        "id": 61,
        "panels": [],
        "title": "",
        "type": "row"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 5,
          "w": 3,
          "x": 0,
          "y": 3
        },
        "id": 17,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "\n\n<img width=\"160\" height=\"auto\" src=\"$Image\n\" />\n\n<!-- src=${Image} />",
          "mode": "html"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#f5f5f5",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 8,
          "x": 3,
          "y": 3
        },
        "id": 64,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", GREATEST(0,$filled_size_headline - CHAR_LENGTH('$Podcast_title'))), '$Podcast_title'), \nFROM(\nSELECT '$Podcast_title' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#f5f5f5",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 13,
          "x": 11,
          "y": 3
        },
        "id": 37,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", GREATEST($filled_size_headline_small - CHAR_LENGTH('QApps'),0)), 'Apps')\nFROM(\nSELECT 'Apps' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Zugriffe gesamt im Analysezeitraum",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "dark-blue",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "–",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "∑ Interaktionen"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 4,
          "w": 4,
          "x": 3,
          "y": 5
        },
        "id": 15,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"))FROM\n(\nSELECT \n  SUM(m_zugriffe_1) AS summe \nFROM $episode_dataset\nWHERE \nCASE \"$Bereich\"\nWHEN \"Alle Bereiche\" THEN TRUE\nELSE branding = \"$Bereich\" END \nAND CASE \"\"\"${Podcast:text}\"\"\"\nWHEN \"All titles\" THEN TRUE\nELSE  broadcast_id = \"$broadcast_id_branding\" END\nAND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Durchschnitt pro Episode für die im ausgewählten Analysezeitraum veröffentlichten Episoden.",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "dark-blue",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "–",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "∑ Interaktionen"
                },
                {
                  "id": "unit",
                  "value": "locale"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 4,
          "w": 4,
          "x": 7,
          "y": 5
        },
        "id": 18,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(ROUND(summe,0) as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"))FROM\n(\nSELECT\n  SUM(zugriffe)/COUNT(DISTINCT headline) as summe,\nFROM (\n  SELECT\n    FIRST_VALUE(publication_date_1) OVER (PARTITION BY headline ORDER BY publication_date_1 DESC) AS publication_date_2,\n    headline,\n    SUM(m_zugriffe_1) AS zugriffe,\n  FROM $episode_dataset as ed\n  LEFT JOIN $profiles_dataset as pd\n  ON ed.podcast_title = pd.podcast_title\nWHERE CASE \"$Bereich\"\nWHEN \"Alle Bereiche\" THEN TRUE\nELSE ed.branding = \"$Bereich\" END\nAND  CASE \"$Podcast\"\nWHEN \"All titles\" THEN TRUE\nELSE REPLACE(ed.podcast_title,'\"','') = \"\"\"$Podcast\"\"\" END\nAND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nAND $episodenschnitt_condition\n  GROUP BY\n    publication_date_1,\n    headline\n  ORDER BY\n    zugriffe DESC )\n    WHERE DATE(publication_date_2) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Ø neue Episoden",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Zugriffe über ausgewählte Apps auf Basis von User Agents. Im Vergleich zu den eigenen Metriken der jeweiligen Plattform-Anbieter kann es aufgrund verschiedener Messmethoden zu Abweichungen kommen.",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              }
            },
            "mappings": [],
            "unit": "locale"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "ARD Audiothek"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#2873ED",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "AntennaPod"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#3F51B5",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Podcast & Radio Addict"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#00BCD4",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "TuneIn"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#2196F3",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Juice"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#E91E63",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Stagefright"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#607D8B",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "gPodder"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#FFC107",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Player FM"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#4CAF50",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Player FM"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#4CAF50",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Pocket Casts"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#FF5722",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Overcast"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#FFEB3B",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Castbox"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#673AB7",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Amazon Alexa"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#FFA000",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "iTunes"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#A6ACAF",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Podbean"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#8BC34A",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "other"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#9E9E9E",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Spotify"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#59A94D",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "AndroidDownloadManager"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#D32F2F",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Apple Podcasts"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#A64DCC",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "__systemRef": "hideSeriesFrom",
              "matcher": {
                "id": "byNames",
                "options": {
                  "mode": "exclude",
                  "names": [
                    "summe"
                  ],
                  "prefix": "All except:",
                  "readOnly": true
                }
              },
              "properties": [
                {
                  "id": "custom.hideFrom",
                  "value": {
                    "legend": false,
                    "tooltip": false,
                    "viz": true
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Deezer"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#a30101",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "RTL+ Music"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#b8c600",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Google Podcasts"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#02f0de",
                    "mode": "fixed"
                  }
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 10,
          "w": 7,
          "x": 11,
          "y": 5
        },
        "id": 33,
        "options": {
          "displayLabels": [],
          "legend": {
            "displayMode": "table",
            "placement": "right",
            "showLegend": true,
            "values": [
              "percent"
            ]
          },
          "pieType": "pie",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": true
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH broadcastids AS (\n    SELECT DISTINCT CAST(broadcast_id[0] AS STRING) AS broadcast_id\n    FROM $profiles_dataset\n    WHERE CASE \"$Bereich\"\n    WHEN \"Alle Bereiche\" THEN TRUE\n    ELSE branding = \"$Bereich\" END \n    ORDER BY broadcast_id DESC\n),\nall_titles_platforms AS(\nSELECT \n    SUM(m_zugriffe_1) AS summe, \n    platform\nFROM $platform_dataset as podcast_platform\nINNER JOIN broadcastids ON podcast_platform.broadcast_id = broadcastids.broadcast_id\nWHERE date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY platform),\nnot_all_titles_platforms AS(\n    SELECT\n  sum(m_zugriffe_1) AS summe, platform\nFROM $platform_dataset\nWHERE\nbroadcast_id = \"$broadcast_id_branding\"\nAND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\ngroup by platform\n)\nSELECT * FROM ${dataset}\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "",
        "type": "piechart"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#5794F2",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 2,
          "x": 18,
          "y": 5
        },
        "id": 20,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH('ARD Audiothek')), 'ARD Audiothek')\nFROM(\nSELECT 'ARD Audiothek' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Spotify-Daten ab August 2023 verfügbar",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "green",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 2,
          "x": 20,
          "y": 5
        },
        "id": 21,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH('Spotify')), 'Spotify')\nFROM(\nSELECT 'Spotify' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "purple",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 2,
          "x": 22,
          "y": 5
        },
        "id": 22,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", GREATEST(0,$filled_size - CHAR_LENGTH('Apple Podcasts'))), 'Apple Podcasts')\nFROM(\nSELECT 'Apple Podcasts' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#5794F2",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "–",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "∑ Interaktionen"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 3,
          "w": 2,
          "x": 18,
          "y": 7
        },
        "id": 23,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH broadcastids AS (\n    SELECT DISTINCT CAST(broadcast_id[0] AS STRING) AS broadcast_id\n    FROM $profiles_dataset\n    WHERE CASE \"$Bereich\"\n    WHEN \"Alle Bereiche\" THEN TRUE \n    ELSE branding = \"$Bereich\" END \n    ORDER BY broadcast_id DESC\n),\nall_titles_platforms AS(\nSELECT \n    SUM(m_zugriffe_1) AS summe, \n    platform\nFROM $platform_dataset AS pd\nINNER JOIN broadcastids ON pd.broadcast_id = broadcastids.broadcast_id\nWHERE platform = \"ARD Audiothek\" AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY platform),\nnot_all_titles_platforms AS(\n    SELECT\n  sum(m_zugriffe_1) AS summe, platform\nFROM $platform_dataset\nWHERE\nbroadcast_id = \"$broadcast_id_branding\"\nAND platform = \"ARD Audiothek\" AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\ngroup by platform\n)\nSELECT  CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\")) FROM \n(\nSELECT summe FROM ${dataset}\n)\n\n\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe App",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "green",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "–",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "∑ Interaktionen"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 3,
          "w": 2,
          "x": 20,
          "y": 7
        },
        "id": 26,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH broadcastids AS (\n    SELECT DISTINCT CAST(broadcast_id[0] AS STRING) AS broadcast_id\n    FROM $profiles_dataset\n    WHERE CASE \"$Bereich\"\n    WHEN \"Alle Bereiche\" THEN TRUE\n    ELSE branding = \"$Bereich\" END \n    ORDER BY broadcast_id DESC\n),\nall_titles_platforms AS(\nSELECT \n    SUM(m_zugriffe_1) AS summe, \n    platform\nFROM $platform_dataset as pd\nINNER JOIN broadcastids ON pd.broadcast_id = broadcastids.broadcast_id\nWHERE platform = \"Spotify\" AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY platform),\nnot_all_titles_platforms AS(\n    SELECT\n  sum(m_zugriffe_1) AS summe, platform\nFROM $platform_dataset\nWHERE\nbroadcast_id = \"$broadcast_id_branding\"\nAND platform = \"Spotify\" AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\ngroup by platform\n)\nSELECT  CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\")) FROM \n(\nSELECT summe FROM ${dataset}\n)\n\n\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe App",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "purple",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "–",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "∑ Interaktionen"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 3,
          "w": 2,
          "x": 22,
          "y": 7
        },
        "id": 27,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH broadcastids AS (\n    SELECT DISTINCT CAST(broadcast_id[0] AS STRING) AS broadcast_id\n    FROM $profiles_dataset\n    WHERE CASE \"$Bereich\"\n    WHEN \"Alle Bereiche\" THEN TRUE\n    ELSE branding = \"$Bereich\" END \n    ORDER BY broadcast_id DESC\n),\nall_titles_platforms AS(\nSELECT \n    SUM(m_zugriffe_1) AS summe, \n    platform\nFROM $platform_dataset as pd\nINNER JOIN broadcastids ON pd.broadcast_id = broadcastids.broadcast_id\nWHERE platform = \"Apple Podcasts\" AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY platform),\nnot_all_titles_platforms AS(\n    SELECT\n  sum(m_zugriffe_1) AS summe, platform\nFROM $platform_dataset\nWHERE\nbroadcast_id = \"$broadcast_id_branding\"\nAND platform = \"Apple Podcasts\" AND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\ngroup by platform\n)\nSELECT  CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\")) FROM \n(\nSELECT summe FROM ${dataset}\n)\n\n\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe App",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 4,
          "w": 3,
          "x": 0,
          "y": 8
        },
        "id": 51,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "Letztes Update: <br> \r\n${lastUpdate}\r\n<br> <br> \r\nDatenstand: <br> \r\n${fromDay} – ${datenstand}",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#7d7d7d",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 4,
          "x": 3,
          "y": 9
        },
        "id": 56,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", GREATEST($filled_size_headline_small - CHAR_LENGTH('Bereich: $Bereich'),0)), 'Bereich: $Bereich')\nFROM(\nSELECT 'Bereich: $Bereich' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#ffffff",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "N/A",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 4,
          "x": 7,
          "y": 9
        },
        "id": 57,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {
            "titleSize": 20
          },
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", GREATEST($filled_size_headline_small - CHAR_LENGTH('Ausgewählte Episoden'),0)), 'Ausgewählte Episoden')\nFROM(\nSELECT 'Ausgewählte Episoden' as Interaktionen\nFROM `ndr-code-bi-dashboard.Quintly.facebook`\nLIMIT 1\n)",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": " "
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Zugriffe gesamt aller Podcast-Reihen im ausgewählten Bereich",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#1F60C4",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "–",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "∑ Interaktionen"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 4,
          "w": 4,
          "x": 3,
          "y": 11
        },
        "id": 13,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"))FROM\n(\nSELECT\n  SUM(m_zugriffe_1) AS summe\nFROM $episode_dataset\nWHERE\nCASE \"$Bereich\"\nWHEN \"Alle Bereiche\" THEN TRUE\nELSE branding = \"$Bereich\" END\nAND headline != \"All headlines\"\nAND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Zugriffe gesamt für die in der Navigation unter Episode ausgewählten Audios",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "dark-blue",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "–",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "∑ Interaktionen"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 4,
          "w": 2,
          "x": 7,
          "y": 11
        },
        "id": 12,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size - CHAR_LENGTH(CAST(summe as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"))FROM\n(\nSELECT \n  SUM(m_zugriffe_1) AS summe \nFROM $episode_dataset\nWHERE \nCASE \"$Bereich\"\nWHEN \"Alle Bereiche\" THEN TRUE\nELSE branding = \"$Bereich\" END \nAND CASE \"\"\"${Podcast:text}\"\"\"\nWHEN \"All titles\" THEN TRUE\nELSE  broadcast_id = \"$broadcast_id_branding\" END\nAND CASE \"\"\"${Podcast:text}\"\"\"\nWHEN \"All titles\" THEN TRUE\nELSE REPLACE(headline,\"'\",\"\") IN UNNEST(ARRAY_CONCAT(ARRAY[$Episode], ARRAY['None'])) END\nAND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n)\n",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Zugriffe",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Durchschnitt pro Episode für die die in der Navigation unter Episode ausgewählten Audios ",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "dark-blue",
              "mode": "fixed"
            },
            "decimals": 0,
            "mappings": [],
            "noValue": "–",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Interaktionen"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "∑ Interaktionen"
                },
                {
                  "id": "unit",
                  "value": "locale"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 4,
          "w": 2,
          "x": 9,
          "y": 11
        },
        "id": 55,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "center",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "last"
            ],
            "fields": "/.*/",
            "values": false
          },
          "showPercentChange": false,
          "text": {},
          "textMode": "value_and_name",
          "wideLayout": true
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Quintly",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  CONCAT(REPEAT(\" \", $filled_size_big - CHAR_LENGTH(CAST(ROUND(summe,0) as STRING))), REPLACE(CAST(FORMAT(\"%'.0f\", CAST(ROUND(summe) as NUMERIC)) AS STRING), \",\", \".\"))FROM\n(\n  SELECT \n  SAFE_DIVIDE(SUM(m_zugriffe_1),COUNT(DISTINCT headline)) as summe \nFROM $episode_dataset\nWHERE \nCASE \"$Bereich\"\nWHEN \"Alle Bereiche\" THEN TRUE\nELSE branding = \"$Bereich\" END \nAND CASE \"\"\"${Podcast:text}\"\"\"\nWHEN \"All titles\" THEN TRUE\nELSE  broadcast_id = \"$broadcast_id_branding\" END\nAND CASE \"\"\"${Podcast:text}\"\"\"\nWHEN \"All titles\" THEN TRUE\nELSE REPLACE(headline,\"'\",\"\") IN UNNEST(ARRAY_CONCAT(ARRAY[$Episode], ARRAY['None'])) END\nAND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\"))",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "page_engaged_users",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50,
              "whereJsonTree": {
                "children1": {
                  "baa899a9-cdef-4012-b456-718364767b70": {
                    "properties": {
                      "field": "profileId",
                      "operator": "equal",
                      "value": [
                        null
                      ],
                      "valueSrc": [
                        "value"
                      ],
                      "valueType": [
                        "number"
                      ]
                    },
                    "type": "rule"
                  }
                },
                "id": "b8aaaa8b-0123-4456-b89a-b18364767b70",
                "type": "group"
              }
            },
            "table": "facebookInsights"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "indexByName": {},
              "renameByName": {
                "f0_": "Ø Episode",
                "page_impressions_unique": "Potentielle Reichweite"
              }
            }
          }
        ],
        "transparent": true,
        "type": "stat"
      },
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 3,
          "x": 0,
          "y": 12
        },
        "id": 75,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "${delay_text}",
          "mode": "markdown"
        },
        "pluginVersion": "11.3.0+security-01",
        "title": "",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 9,
          "w": 24,
          "x": 0,
          "y": 15
        },
        "id": 45,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto",
            "height": 2000
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'zugriffe').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'date').values;\n  const type = s.fields.find((f) => f.name === 'type').values[0];\n  const zugriffe = s.fields.find((f) => f.name === 'zugriffe').values;\n  const ard_sum = s.fields.find((f) => f.name === 'ard_summe').values;\n  const apple_sum = s.fields.find((f) => f.name === 'apple_summe').values;\n  const spotify_sum = s.fields.find((f) => f.name === 'spotify_summe').values;\n  const rest_sum = s.fields.find((f) => f.name === 'rest_summe').values;\n  console.log(\"Date\", timeValues);\n  console.log(\"Type\", type);\n  console.log(\"Zugriffe Gesamt\", zugriffe);\n  console.log(\"ARD Summe\", ard_sum);\n  console.log(\"Apple Summe\", apple_sum);\n  console.log(\"Spotify Summe\", spotify_sum);\n  console.log(\"Rest Summe\", rest_sum);\n\n  if (type === \"bar\") {\n    return [\n      //{\n      //  name: 'Zugriffe',\n      //  type: type,\n      //  stack: 'total',\n      //  smooth: true,\n      // showSymbol: false,\n      //data: zugriffe.map((value, index) => [timeValues[index], value])\n      //},\n      {\n        name: 'ARD Audiothek',\n        type: type,\n        stack: 'total',\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(40, 115, 237)\"\n        },\n        data: ard_sum.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Apple Podcasts',\n        type: type,\n        stack: 'total',\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(166, 77, 204)\"\n        },\n        data: apple_sum.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Spotify',\n        type: type,\n        stack: 'total',\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(89, 169, 77)\"\n        },\n        data: spotify_sum.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Rest',\n        type: type,\n        stack: 'total',\n        label: {\n          show: true,\n          position: 'top',\n          formatter: function (params) {\n            const allSumValue = allSumData[params.dataIndex];\n            let number = Math.floor(allSumValue);\n            let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n            return formattedNumber;\n          }\n        },\n        itemStyle: {\n          color: \"rgb(255, 255, 255)\"\n        },\n        smooth: true,\n        showSymbol: false,\n        data: rest_sum.map((value, index) => [timeValues[index], value])\n      }\n    ]\n  } else {\n    return [\n      {\n        name: 'Zugriffe Gesamt',\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(255,0, 0)\"\n        },\n        data: zugriffe.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'ARD Audiothek',\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(40, 115, 237)\"\n        },\n        data: ard_sum.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Apple Podcasts',\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(166, 77, 204)\"\n        },\n        data: apple_sum.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Spotify',\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(89, 169, 77)\"\n        },\n        data: spotify_sum.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Rest',\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(255, 255, 255)\"\n        },\n        data: rest_sum.map((value, index) => [timeValues[index], value])\n      }\n    ]\n  }\n}).flat();\n\n\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startIndex = params.batch[0]?.startValue;\n  const endIndex = params.batch[0]?.endValue;\n\n  const timeValues = context.panel.data.series[0].fields.find((f) => f.name === 'date').values;\n\n  const startTime = new Date(timeValues[startIndex]).getTime();\n  const endTime = new Date(timeValues[endIndex]).getTime();\n\n  if (!isNaN(startTime) && !isNaN(endTime)) {\n    context.grafana.locationService.partial({ from: startTime, to: endTime });\n  } else {\n    console.error(\"Invalid start or end time:\", { startIndex, endIndex });\n  }\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = formatDate(params[0].axisValue) + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = Math.floor(item.data[1]);\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + item.seriesName + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      formatter: function (value) {\n        const date = new Date(value);\n        let day = ('0' + date.getDate()).slice(-2);\n        let month = ('0' + (date.getMonth() + 1)).slice(-2);\n        let year = date.getFullYear();\n        return `${day}.${month}.${year}`;\n      },\n      //showMaxLabel: '20'\n    },\n  },\n  yAxis: {\n    type: 'value',\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "height": 400,
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH broadcastids AS (\n    SELECT DISTINCT CAST(broadcast_id[0] AS STRING) AS broadcast_id\n    FROM $profiles_dataset\n    WHERE CASE \"$Bereich\"\n    WHEN \"Alle Bereiche\" THEN TRUE\n    ELSE branding = \"$Bereich\" END \n    ORDER BY broadcast_id DESC\n),\nall_titles_platforms AS(\nSELECT \n    SUM(m_zugriffe_1) AS summe, \n    platform,\n    date\nFROM $platform_dataset as pd\nINNER JOIN broadcastids ON pd.broadcast_id = broadcastids.broadcast_id\nWHERE date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY platform, date),\nnot_all_titles_platforms AS(\n    SELECT\n  sum(m_zugriffe_1) AS summe, platform,\n  date\nFROM $platform_dataset\nWHERE\nbroadcast_id = \"$broadcast_id_branding\"\nAND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\ngroup by platform, date\n),\nard_data AS (\n  SELECT summe, date FROM \n  ${dataset}\n  WHERE platform = \"ARD Audiothek\"\n),\napple_data AS\n(\n    SELECT summe, date FROM \n  ${dataset}\n  WHERE platform = \"Apple Podcasts\"\n),\nspotify_data AS\n(\n  SELECT summe as summe, date FROM \n  ${dataset}\n  WHERE platform = \"Spotify\"\n),\nrest AS(\n  SELECT SUM(summe) as summe, date FROM \n  ${dataset}\n  WHERE platform != \"ARD Audiothek\" AND platform != \"Apple Podcasts\" AND platform != \"Spotify\"\n  GROUP BY date\n)\nSELECT\n  ${dataset}.date,\n  ard_data.summe as ard_summe, \n  apple_data.summe as apple_summe, \n  spotify_data.summe as spotify_summe,\n  rest.summe as rest_summe,\n  COALESCE(ard_data.summe,0) + COALESCE(apple_data.summe, 0) + COALESCE(spotify_data.summe,0) + COALESCE(rest.summe,0) as zugriffe,\n  \"${type}\" as type,\n  DATE_DIFF(DATE('${__to:date}', \"Europe/Berlin\"),DATE('${__from:date}', \"Europe/Berlin\"),DAY) + 1 as timeRange\nFROM ${dataset}\nLEFT JOIN ard_data ON ${dataset}.date = ard_data.date\nLEFT JOIN apple_data ON ${dataset}.date = apple_data.date\nLEFT JOIN spotify_data ON ${dataset}.date = spotify_data.date\nLEFT JOIN rest ON ${dataset}.date = rest.date\nGROUP BY ${dataset}.date, ard_data.summe, apple_data.summe, spotify_data.summe, rest.summe\nORDER by date ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "Zugriffe pro Tag für \"$Podcast_title\"",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": false,
                "date": false,
                "f0_": false,
                "podcast_title": false,
                "publication_date_1": false,
                "ressource": true,
                "sophora_id": true,
                "tmstp": true,
                "zugriffe": false
              },
              "indexByName": {
                "f0_": 3,
                "f1_": 4,
                "headline": 2,
                "podcast_title": 1,
                "publication_date_2": 0
              },
              "renameByName": {
                "f0_": "",
                "f1_": "Tenchnische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "Datum",
                "technische_nutzer": "Technische Nutzer",
                "zugriffe": "Zugriffe gesamt"
              }
            }
          }
        ],
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 24,
          "x": 0,
          "y": 24
        },
        "id": 42,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto",
            "height": 600
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'zugriffe').values;\n  return allSum;\n})\n\nconst option = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'shadow'\n    },\n    formatter: function (params) {\n      const allSumValue = allSumData[params[0].dataIndex];\n      let formattedNumber = new Intl.NumberFormat('de-DE').format(allSumValue);\n      return `Zugriffe: ${formattedNumber}`;\n    }\n  },\n  //legend: {},\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  yAxis: { // Switched to yAxis\n    type: 'value'\n  },\n  xAxis: { // Switched to xAxis\n    type: 'category',\n    data: [...new Set(context.panel.data.series.flatMap((s) => {\n      const headlines = s.fields.find((f) => f.name === 'headline').values;\n      return headlines;\n    }))]\n  },\n  series: [\n    {\n      name: 'Zugriffe',\n      type: 'bar',\n      label: {\n        show: true,\n        position: 'top',\n        formatter: function (params) {\n          const allSumValue = allSumData[params.dataIndex];\n          let number = Math.floor(allSumValue);\n          let formattedNumber = new Intl.NumberFormat('de-DE').format(number);\n          return formattedNumber;\n        }\n      },\n      itemStyle: {\n        color: \"rgb(31, 96, 196)\"\n      },\n      data: context.panel.data.series.flatMap((s) => {\n        const zugriffe = s.fields.find((f) => f.name === 'zugriffe').values;\n        return zugriffe;\n      })\n    }\n  ]\n};\n\nreturn option;\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "height": 400,
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT\n  headline,\n  SUM(zugriffe) as zugriffe,\nFROM (\n  SELECT\n    FIRST_VALUE(publication_date_1) OVER (PARTITION BY headline ORDER BY publication_date_1 DESC) AS publication_date_2,\n    REPLACE(podcast_title,'\"','') as podcast_title,\n      broadcast_id,\n    headline,\n    SUM(m_zugriffe_1) AS zugriffe,\n  FROM $episode_dataset\nWHERE \nCASE \"$Bereich\"\nWHEN \"Alle Bereiche\" THEN TRUE\nELSE branding = \"$Bereich\" END\nAND CASE \"\"\"${Podcast}\"\"\"\nWHEN \"All titles\" THEN True\nELSE REPLACE(podcast_title,'\"','') = \"\"\"$Podcast\"\"\" END\nAND  headline != \"All headlines\" \nAND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n  GROUP BY\n    publication_date_1,\n    podcast_title,\n    headline,\n      broadcast_id\n  ORDER BY\n    zugriffe DESC )\nGROUP BY\n  publication_date_2,\n  podcast_title,\n  headline, \n  broadcast_id\n\nORDER BY 2 DESC\nLIMIT 3",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "Top 3 Episoden von \"$Podcast_title\"",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": false,
                "date": false,
                "f0_": false,
                "podcast_title": false,
                "publication_date_1": false,
                "ressource": true,
                "sophora_id": true,
                "tmstp": true
              },
              "indexByName": {
                "f0_": 3,
                "f1_": 4,
                "headline": 2,
                "podcast_title": 1,
                "publication_date_2": 0
              },
              "renameByName": {
                "f0_": "",
                "f1_": "Tenchnische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "Datum",
                "technische_nutzer": "Technische Nutzer",
                "zugriffe": "Zugriffe"
              }
            }
          }
        ],
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": "auto",
              "cellOptions": {
                "type": "auto"
              },
              "filterable": true,
              "inspect": false
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Episode"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 530
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Podcast"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 451
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Zugriffe"
              },
              "properties": [
                {
                  "id": "custom.minWidth",
                  "value": 200
                },
                {
                  "id": "custom.align",
                  "value": "left"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "VÖ Datum"
              },
              "properties": [
                {
                  "id": "unit",
                  "value": "time: DD.MM.YYYY"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 12,
          "w": 24,
          "x": 0,
          "y": 30
        },
        "id": 66,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "enablePagination": true,
            "fields": "",
            "reducer": [
              "sum"
            ],
            "show": false
          },
          "showHeader": true,
          "sortBy": []
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT\n  DATE(publication_date_2) as publication_date_2,\n  podcast_title,\n    broadcast_id,\n  headline,\n  SUM(zugriffe) as zugriffe\n  --SUM(technische_nutzer)\nFROM (\n  SELECT\n    FIRST_VALUE(publication_date_1) OVER (PARTITION BY headline ORDER BY publication_date_1 DESC) AS publication_date_2,\n    REPLACE(podcast_title,'\"','') AS podcast_title,\n      broadcast_id,\n    headline,\n    SUM(m_zugriffe_1) AS zugriffe,\n    --SUM(m_technische_nutzer) AS technische_nutzer,\n  FROM $episode_dataset\nWHERE CASE \"$Bereich\"\nWHEN \"Alle Bereiche\" THEN TRUE\nELSE branding = \"$Bereich\" END\nAND  CASE \"$Podcast\"\nWHEN \"All titles\" THEN TRUE\nELSE REPLACE(podcast_title,'\"','') = \"\"\"$Podcast\"\"\" END\nAND CASE \"${Podcast:text}\"\nWHEN \"All titles\" THEN TRUE\nELSE REPLACE(headline,\"'\",\"\") IN UNNEST(ARRAY_CONCAT(ARRAY[$Episode], ARRAY['None'])) END\nAND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\n  GROUP BY\n    publication_date_1,\n    podcast_title,\n    headline,\n      broadcast_id\n  ORDER BY\n    zugriffe DESC )\nGROUP BY\n  publication_date_2,\n  podcast_title,\n  headline, \n  broadcast_id\n\nORDER BY zugriffe DESC\nLIMIT 1000",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "Episoden",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": true,
                "date": false,
                "f0_": true,
                "podcast_title": false,
                "publication_date_1": false,
                "ressource": true,
                "sophora_id": true,
                "technische_nutzer": true,
                "tmstp": true
              },
              "indexByName": {
                "broadcast_id": 3,
                "headline": 1,
                "podcast_title": 0,
                "publication_date_2": 2,
                "technische_nutzer": 4,
                "zugriffe": 5
              },
              "renameByName": {
                "f0_": "Technische Nutzer",
                "f1_": "Technische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "VÖ Datum",
                "technische_nutzer": "Technische Nutzer pro Tag",
                "zugriffe": "Zugriffe"
              }
            }
          }
        ],
        "type": "table"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "description": "Technische Nutzer pro Tag sind NICHT gleichzusetzen mit Hörer:innen. Sie beschreiben die Anzahl der unterschiedlichen Clients, die mindestens ein Audio einer Podcast-Reihe heruntergeladen haben (Berechnung auf Basis von IP Adresse und User Agent). ",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 10,
          "w": 24,
          "x": 0,
          "y": 42
        },
        "id": 68,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto",
            "height": 600
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'date').values;\n  const type = s.fields.find((f) => f.name === 'type').values[0];\n  const zugriffe = s.fields.find((f) => f.name === 'vu').values;\n  const technische_nutzer = s.fields.find((f) => f.name === 'tu').values;\n  console.log(\"Date\", timeValues);\n  console.log(\"Type\", type);\n  console.log(\"Zugriffe gesamt\", zugriffe);\n  console.log(\"Technische Nutzer\", technische_nutzer);\n\n  if (type === \"bar\") {\n    return [\n      {\n        name: 'Zugriffe',\n        type: type,\n        stack: 'total',\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(255,0, 0)\"\n        },\n        data: zugriffe.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Technische Nutzer',\n        type: type,\n        stack: 'total',\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(255, 222, 50)\"\n        },\n        data: technische_nutzer.map((value, index) => [timeValues[index], value])\n      },\n    ]\n  } else {\n    return [\n      {\n        name: 'Zugriffe',\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(255,0, 0)\"\n        },\n        data: zugriffe.map((value, index) => [timeValues[index], value])\n      },\n      {\n        name: 'Technische Nutzer',\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(255, 222, 50)\"\n        },\n        data: technische_nutzer.map((value, index) => [timeValues[index], value])\n      },\n    ]\n  }\n}).flat();\n\n\n\n/**\n* Enable Data Zoom by default\n*/\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n* Update Time Range on Zoom\n*/\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  context.grafana.locationService.partial({ from: startValue, to: endValue });\n});\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = formatDate(params[0].axisValue) + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = Math.floor(item.data[1]);\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + item.seriesName + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      formatter: function (value) {\n        const date = new Date(value);\n        let day = ('0' + date.getDate()).slice(-2);\n        let month = ('0' + (date.getMonth() + 1)).slice(-2);\n        let year = date.getFullYear();\n        return `${day}.${month}.${year}`;\n      },\n      //showMaxLabel: '20'\n    },\n  },\n  yAxis: {\n    type: 'value',\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "height": 400,
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH \nnot_all_titles_platforms AS(\n    SELECT\n  sum(m_zugriffe_1) AS vu,\n  SUM(m_technische_nutzer) AS tu,\n  date\nFROM Piano.NDR_podcast_show_daily_f_mapped\nWHERE\nbroadcast_id = \"$broadcast_id_branding\"\nAND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\ngroup by date)\nSELECT date, \nvu, \ntu,\n\"${type}\" as type,\nDATE_DIFF(DATE('${__to:date}', \"Europe/Berlin\"),DATE('${__from:date}', \"Europe/Berlin\"),DAY) + 1 as timeRange\nFROM not_all_titles_platforms\nORDER by date ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          }
        ],
        "title": "Zugriffe und Technische Nutzer pro Tag für \"$Podcast_title\"",
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": "auto",
              "cellOptions": {
                "mode": "basic",
                "type": "color-background"
              },
              "filterable": true,
              "inspect": false
            },
            "mappings": [],
            "noValue": "-",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "f0_"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 451
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "transparent",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "f4_"
              },
              "properties": [
                {
                  "id": "custom.minWidth",
                  "value": 200
                },
                {
                  "id": "unit",
                  "value": "locale"
                },
                {
                  "id": "custom.align",
                  "value": "left"
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#ff0000",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "f1_"
              },
              "properties": [
                {
                  "id": "custom.align",
                  "value": "left"
                },
                {
                  "id": "custom.minWidth",
                  "value": 188
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#5794f2",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "f2_"
              },
              "properties": [
                {
                  "id": "custom.minWidth",
                  "value": 200
                },
                {
                  "id": "custom.align",
                  "value": "left"
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#73bf69",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "f3_"
              },
              "properties": [
                {
                  "id": "custom.minWidth",
                  "value": 200
                },
                {
                  "id": "custom.align",
                  "value": "left"
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "#b877d9",
                    "mode": "fixed"
                  }
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 52
        },
        "id": 70,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "enablePagination": false,
            "fields": "",
            "reducer": [
              "sum"
            ],
            "show": false
          },
          "showHeader": false,
          "sortBy": []
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"Podcast\", \"ARD Audiothek\", \"Spotifiy\", \"Apple Podcasts\", \"Zugriffe Gesamt\"",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "technische_nutzer": true
              },
              "indexByName": {
                "Title": 0,
                "apple_summe": 3,
                "ard_summe": 1,
                "spotify_summe": 2,
                "technische_nutzer": 4,
                "zugriffe": 5
              },
              "renameByName": {
                "Title": "Podcast",
                "apple_summe": "Apple Podcasts",
                "ard_summe": "ARD Audiothek",
                "spotify_summe": "Spotify",
                "technische_nutzer": "Technische Nutzer pro Tag",
                "zugriffe": "Zugriffe Gesamt"
              }
            }
          },
          {
            "id": "convertFieldType",
            "options": {}
          }
        ],
        "type": "table"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": "auto",
              "cellOptions": {
                "type": "auto"
              },
              "filterable": true,
              "inspect": false
            },
            "mappings": [],
            "noValue": "-",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "locale"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Title"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 451
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "zugriffe"
              },
              "properties": [
                {
                  "id": "custom.minWidth",
                  "value": 200
                },
                {
                  "id": "unit",
                  "value": "locale"
                },
                {
                  "id": "custom.align",
                  "value": "left"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "ard_summe"
              },
              "properties": [
                {
                  "id": "custom.align",
                  "value": "left"
                },
                {
                  "id": "custom.minWidth",
                  "value": 188
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "spotify_summe"
              },
              "properties": [
                {
                  "id": "custom.minWidth",
                  "value": 200
                },
                {
                  "id": "custom.align",
                  "value": "left"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "apple_summe"
              },
              "properties": [
                {
                  "id": "custom.minWidth",
                  "value": 200
                },
                {
                  "id": "custom.align",
                  "value": "left"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 12,
          "w": 24,
          "x": 0,
          "y": 53
        },
        "id": 65,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "enablePagination": true,
            "fields": "",
            "reducer": [
              "sum"
            ],
            "show": false
          },
          "showHeader": true,
          "sortBy": []
        },
        "pluginVersion": "11.3.0+security-01",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH broadcastids AS (\n    SELECT DISTINCT CAST(broadcast_id[0] AS STRING) AS broadcast_id, podcast_title\n    FROM $profiles_dataset\n    WHERE CASE \"$Bereich\"\n    WHEN \"Alle Bereiche\" THEN TRUE \n    ELSE branding = \"$Bereich\" END \n    AND CASE \"\"\"$Podcast\"\"\"\nWHEN \"All titles\" THEN TRUE\nELSE CAST(broadcast_id[0] AS STRING) = \"$broadcast_id_branding\" END\n    ORDER BY broadcast_id DESC\n),\nall_titles_platforms AS(SELECT \npodcast_title as Title,\n1 as join_key,\nsum(m_zugriffe_1) as zugriffe,\nplatform\nFROM $platform_dataset as pd\nINNER JOIN broadcastids ON pd.broadcast_id = broadcastids.broadcast_id\nWHERE date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY platform, podcast_title),\ntechnische_nutzer_summe AS(\n  SELECT podcast_title as Title,\n  1 as join_key,\n  FROM $episode_dataset\nWHERE \nCASE \"$Bereich\"\n  WHEN \"Alle Bereiche\"\n  THEN TRUE \n  ELSE \nbranding = \"$Bereich\" END\nAND CASE \"\"\"$Podcast\"\"\"\nWHEN \"All titles\" THEN True\nELSE podcast_title = \"\"\"$Podcast\"\"\" END \nAND headline != \"All headlines\"\nAND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nGROUP BY podcast_title),\nmain_data AS(\nSELECT Title, join_key, sum(zugriffe) as zugriffe\nFROM all_titles_platforms\nGROUP BY Title, join_key),\nard_data AS (\n  SELECT Title, zugriffe, join_key FROM \n  all_titles_platforms\n  WHERE platform = \"ARD Audiothek\"\n),\napple_data AS\n(\n    SELECT Title, zugriffe, join_key FROM \n  all_titles_platforms\n  WHERE platform = \"Apple Podcasts\"\n),\nspotify_data AS\n(\n  SELECT Title, zugriffe, join_key FROM \n  all_titles_platforms\n  WHERE platform = \"Spotify\"\n)\nSELECT\n  main_data.Title, \n  main_data.zugriffe,\n  --technische_nutzer_summe.technische_nutzer, \n  ard_data.zugriffe as ard_summe, \n  apple_data.zugriffe as apple_summe, \n  spotify_data.zugriffe as spotify_summe\nFROM main_data\nLEFT JOIN ard_data ON (main_data.join_key = ard_data.join_key AND main_data.Title = ard_data.Title)\nLEFT JOIN apple_data ON (main_data.join_key = apple_data.join_key AND main_data.Title = apple_data.Title)\nLEFT JOIN spotify_data ON (main_data.join_key = spotify_data.join_key AND main_data.Title = spotify_data.Title)\n--LEFT JOIN technische_nutzer_summe on (main_data.join_key = technische_nutzer_summe.join_key AND main_data.Title = technische_nutzer_summe.Title)\nORDER BY main_data.zugriffe DESC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": " ",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "technische_nutzer": true
              },
              "indexByName": {
                "Title": 0,
                "apple_summe": 3,
                "ard_summe": 1,
                "spotify_summe": 2,
                "technische_nutzer": 4,
                "zugriffe": 5
              },
              "renameByName": {
                "Title": " Sortieren",
                "apple_summe": " Sortieren",
                "ard_summe": " Sortieren",
                "spotify_summe": " Sortieren",
                "technische_nutzer": "Technische Nutzer pro Tag",
                "zugriffe": " Sortieren"
              }
            }
          },
          {
            "id": "convertFieldType",
            "options": {}
          }
        ],
        "type": "table"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 5,
          "x": 0,
          "y": 65
        },
        "id": 77,
        "options": {
          "alwaysVisibleFilter": false,
          "autoScroll": false,
          "collapsedByDefault": false,
          "customValue": false,
          "displayMode": "minimize",
          "emptyValue": false,
          "favorites": false,
          "filter": false,
          "groupSelection": false,
          "header": true,
          "padding": 20,
          "persistent": false,
          "saveSelectedGroup": false,
          "saveSelectedGroupKey": "",
          "showGroupTotal": false,
          "showLabel": true,
          "showName": false,
          "showResetButton": false,
          "showTotal": false,
          "statusSort": false,
          "sticky": false,
          "variable": "Plattformen"
        },
        "pluginVersion": "2.5.0",
        "targets": [
          {
            "refId": "A"
          }
        ],
        "title": "",
        "transparent": true,
        "type": "volkovlabs-variable-panel"
      },
      {
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "qUaUqEk4k"
        },
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 9,
          "w": 24,
          "x": 0,
          "y": 67
        },
        "id": 79,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "auto",
            "height": 2000
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "function formatDate(timestamp) {\n  const date = new Date(timestamp);\n  let day = ('0' + date.getDate()).slice(-2);\n  let month = ('0' + (date.getMonth() + 1)).slice(-2);\n  let year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n}\n\nconst allSumData = context.panel.data.series.flatMap((s) => {\n  const allSum = s.fields.find((f) => f.name === 'zugriffe').values;\n  return allSum;\n})\n\nconst series = context.panel.data.series.map((s) => {\n  const timeValues = s.fields.find((f) => f.name === 'date').values;\n  const type = s.fields.find((f) => f.name === 'type').values[0];\n  const zugriffe = s.fields.find((f) => f.name === 'zugriffe').values;\n  const platform = s.fields.find((f) => f.name === 'platform').values[0];\n\n\n\n  if (type === \"bar\") {\n    return [\n      //{\n      //  name: 'Zugriffe',\n      //  type: type,\n      //  stack: 'total',\n      //  smooth: true,\n      // showSymbol: false,\n      //data: zugriffe.map((value, index) => [timeValues[index], value])\n      //},\n      {\n        name: platform,\n        type: type,\n        stack: 'total',\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(143, 178, 231)\"\n        },\n        data: zugriffe.map((value, index) => [timeValues[index], value])\n      },\n    ]\n  } else {\n    return [\n      {\n        name: platform,\n        type: type,\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: \"rgb(143, 178, 231)\"\n        },\n        data: zugriffe.map((value, index) => [timeValues[index], value])\n      },\n    ]\n  }\n}).flat();\n\n\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  context.grafana.locationService.partial({ from: startValue, to: endValue });\n});\n\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross'\n    },\n    formatter: function (params) {\n      let tooltipContent = formatDate(params[0].axisValue) + '<br/>'; // Datumsformatierung\n      params.forEach(function (item) {\n        //let formattedValue = item.data[1].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.'); // Tausendertrennzeichen einfügen\n        let number = Math.floor(item.data[1]);\n        let formattedValue = new Intl.NumberFormat('de-DE').format(number);\n        tooltipContent += item.marker + item.seriesName + ': ' + formattedValue + '<br/>';\n      });\n      return tooltipContent;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '0%',\n    itemGap: 40,\n    textStyle: {\n      fontSize: 16\n    }\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    type: 'category',\n    axisLabel: {\n      hideOverlap: true,\n      formatter: function (value) {\n        const date = new Date(value);\n        let day = ('0' + date.getDate()).slice(-2);\n        let month = ('0' + (date.getMonth() + 1)).slice(-2);\n        let year = date.getFullYear();\n        return `${day}.${month}.${year}`;\n      },\n      //showMaxLabel: '20'\n    },\n  },\n  yAxis: {\n    type: 'value',\n    min: '0',\n    axisLabel: {\n      formatter: function (value) {\n        // Umwandeln des Werts in einen String und Ersetzen von Kommas durch Punkte\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n      }\n    },\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 34,\n    containLabel: true,\n  },\n  series,\n};",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "height": 400,
            "name": "default"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [],
            "series": []
          }
        },
        "pluginVersion": "6.1.0",
        "targets": [
          {
            "dataset": "Piano",
            "datasource": {
              "type": "grafana-bigquery-datasource",
              "uid": "qUaUqEk4k"
            },
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH broadcastids AS (\n    SELECT DISTINCT CAST(broadcast_id[0] AS STRING) AS broadcast_id\n    FROM $profiles_dataset\n    WHERE CASE \"$Bereich\"\n    WHEN \"Alle Bereiche\" THEN TRUE\n    ELSE branding = \"$Bereich\" END \n    ORDER BY broadcast_id DESC\n),\nall_titles_platforms AS(\nSELECT \n    SUM(m_zugriffe_1) AS summe, \n    platform,\n    date\nFROM $platform_dataset as pd\nINNER JOIN broadcastids ON pd.broadcast_id = broadcastids.broadcast_id\nWHERE date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nAND CASE \"$Plattformen\"\nWHEN \"Alle Plattformen\" THEN TRUE\nELSE platform = \"$Plattformen\" END\nGROUP BY platform, date),\nnot_all_titles_platforms AS(\n    SELECT\n  sum(m_zugriffe_1) AS summe, platform,\n  date\nFROM $platform_dataset\nWHERE\nbroadcast_id = \"$broadcast_id_branding\"\nAND date BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\")\nAND CASE \"$Plattformen\"\nWHEN \"Alle Plattformen\" THEN TRUE\nELSE platform = \"$Plattformen\" END\ngroup by platform, date\n)\nSELECT\n  ${dataset}.date,\n  \"${type}\" as type,\n  SUM(summe) as zugriffe,\n  \"$Plattformen\" as platform,\n  DATE_DIFF(DATE('${__to:date}', \"Europe/Berlin\"),DATE('${__from:date}', \"Europe/Berlin\"),DAY) + 1 as timeRange\nFROM ${dataset}\nGROUP BY ${dataset}.date\nORDER by date ASC",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "*",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          }
        ],
        "title": "Zugriffe pro Tag für \"$Podcast_title\"",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "branding": true,
                "broadcast_id": false,
                "date": false,
                "f0_": false,
                "podcast_title": false,
                "publication_date_1": false,
                "ressource": true,
                "sophora_id": true,
                "tmstp": true,
                "zugriffe": false
              },
              "indexByName": {
                "f0_": 3,
                "f1_": 4,
                "headline": 2,
                "podcast_title": 1,
                "publication_date_2": 0
              },
              "renameByName": {
                "f0_": "",
                "f1_": "Tenchnische Nutzer",
                "headline": "Episode",
                "podcast_title": "Podcast",
                "publication_date_1": "Datum",
                "publication_date_2": "Datum",
                "technische_nutzer": "Technische Nutzer",
                "zugriffe": "Zugriffe gesamt "
              }
            }
          }
        ],
        "type": "volkovlabs-echarts-panel"
      }
    ],
    "preload": false,
    "schemaVersion": 40,
    "tags": [],
    "templating": {
      "list": [
        {
          "current": {
            "text": "MDR",
            "value": "MDR"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "includeAll": false,
          "label": "LRA:",
          "name": "LRA",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT a.LRA\r\nFROM (\r\nSELECT \"MDR\" as LRA\r\n) as a\r\nORDER BY (\r\n  CASE\r\n    WHEN REGEXP_CONTAINS(LOWER(\"${__user.email}\"), LOWER(a.LRA))\r\n    THEN 1\r\n    ELSE 0\r\n  END\r\n) DESC",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        },
        {
          "current": {
            "text": "16.10.2024",
            "value": "16.10.2024"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "datenstand",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \nFORMAT_DATETIME(\"%d.%m.%Y\", DATE(MAX(date)))\nFROM $episode_dataset\nWHERE CASE WHEN \"$Bereich\" = \"Alle Bereiche\" THEN TRUE\nELSE CASE WHEN \"$Podcast\" = \"All titles\" THEN TRUE\nELSE broadcast_id = \"${broadcast_id_branding}\" END END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Alle Bereiche – alle Podcastreihen",
            "value": "Alle Bereiche – alle Podcastreihen"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "Podcast_title",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \nCASE \n  WHEN '$Podcast' = 'All titles' \n  THEN '$Bereich – alle Podcastreihen'\n  ELSE '$Podcast'\nEND \n",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "True",
            "value": "True"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "AllePodcastsCondition",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \n    CASE \"\"\"$AllePodcasts\"\"\"\n    WHEN \"None\"\n    THEN \"True\"\n    ELSE CAST(\"\"\" REPLACE(podcast_title,'\"','') = \"$AllePodcasts\" \"\"\" as string) \n    END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "all_titles_platforms",
            "value": "all_titles_platforms"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "dataset",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"\"\"${Podcast}\"\"\"\r\nWHEN \"All titles\" THEN \"all_titles_platforms\"\r\nELSE \"not_all_titles_platforms\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "allValue": "*",
          "current": {
            "text": "Alle Bereiche",
            "value": "Alle Bereiche"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "includeAll": false,
          "label": "Bereich:",
          "name": "Bereich",
          "options": [],
          "query": {
            "dataset": "Piano",
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT branding FROM (SELECT DISTINCT branding, 1 as sort \nFROM   $profiles_dataset\nWHERE $AllePodcastsCondition\nUNION DISTINCT\nSELECT CASE\nWHEN \"$AllePodcasts\" = \"None\" THEN \"Alle Bereiche\" END, 0 as sort)\nWHERE branding != \"\"\nOrder by sort, branding ASC",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "branding",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_podcasts"
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        },
        {
          "current": {
            "text": "All titles",
            "value": "All titles"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "includeAll": false,
          "label": "Podcast:",
          "name": "Podcast",
          "options": [],
          "query": {
            "dataset": "Piano",
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH all_podcasts AS(\n  SELECT podcast_title FROM $profiles_dataset\n  WHERE branding = \"$Bereich\"\n  UNION ALL\n  SELECT \"All titles\" as podcast_title \n)\nSELECT podcast_title FROM(\nSELECT DISTINCT REPLACE(podcast_title,'\"','') AS podcast_title, CASE podcast_title WHEN \"All titles\" THEN 0 ELSE 1 END AS sort  FROM all_podcasts\nWHERE $AllePodcastsCondition\nORDER BY sort,podcast_title DESC\n)\nORDER BY SORT, LOWER(podcast_title) ASC",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "podcast_title",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_podcasts"
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        },
        {
          "current": {
            "text": [
              "All"
            ],
            "value": [
              "$__all"
            ]
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "includeAll": true,
          "label": "Episode:",
          "multi": true,
          "name": "Episode",
          "options": [],
          "query": {
            "dataset": "Piano",
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT REPLACE(headline,\"'\",\"\") FROM(\nSELECT DISTINCT headline, CASE headline WHEN \"All headlines\" THEN 0 ELSE 1 END AS sort  FROM $episode_dataset\nWHERE \nbranding = \"$Bereich\" \nAND REPLACE(podcast_title,'\"','') = \"\"\"$Podcast\"\"\"\n--AND date > \"2022-01-01\"\nAND headline != \"All headlines\"\nORDER BY sort,headline DESC\n--ORDER BY podcast_title ASC\n)\nORDER BY SORT, headline ASC",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "headline",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_episodes"
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        },
        {
          "current": {
            "text": "10",
            "value": "10"
          },
          "description": "",
          "hide": 2,
          "includeAll": false,
          "name": "filled_size_big",
          "options": [
            {
              "selected": true,
              "text": "10",
              "value": "10"
            }
          ],
          "query": "10",
          "skipUrlSync": true,
          "type": "custom"
        },
        {
          "current": {
            "text": "20",
            "value": "20"
          },
          "hide": 2,
          "includeAll": false,
          "name": "filled_size",
          "options": [
            {
              "selected": true,
              "text": "20",
              "value": "20"
            }
          ],
          "query": "20",
          "skipUrlSync": true,
          "type": "custom"
        },
        {
          "current": {
            "text": "44",
            "value": "44"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "filled_size_headline",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CAST(CHAR_LENGTH('$Podcast_title') + 10 AS STRING)",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "44",
            "value": "44"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "filled_size_headline_small",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CAST(CHAR_LENGTH('$Podcast_title') + 10 AS STRING)",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "isNone": true,
            "text": "None",
            "value": ""
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "broadcast_id_branding",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT COALESCE(broadcast_id[0]) \nFROM $profiles_dataset\nWHERE \nbranding = \"$Bereich\" \nAND REPLACE(podcast_title,'\"','') = \"\"\"$Podcast\"\"\"",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://share.ard-zdf-box.de/apps/files_sharing/publicpreview/Sxorbc6WLzk84iy?file=/&fileId=257042098&x=2132&y=1104&a=true&etag=31cb74f497586f722c788a3861963167",
            "value": "https://share.ard-zdf-box.de/apps/files_sharing/publicpreview/Sxorbc6WLzk84iy?file=/&fileId=257042098&x=2132&y=1104&a=true&etag=31cb74f497586f722c788a3861963167"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "Image",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH image AS (\n    SELECT coverart\n    FROM $profiles_dataset\n \n    WHERE broadcast_id[0] = \"$broadcast_id_branding\"\n)\nSELECT\n    CASE\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"N-JOY\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvNVwvYXNzZXRzXC8wOFwvMTk2XC9iYTlkZTc1MWZlZWMwNmViZDM0NDM2ODhmOGY0NzYxZS0xNjM2NjE2ODc3LmpwZyJ9:norddeutscher-rundfunk:uUTFFV1WGpZwfUFx0sn3hdp1-H5CQITeEe_0gdQHSHg?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR Info\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMThcL2Fzc2V0c1wvM2VcLzkxOVwvNjRhZjYzMmI2N2ZkYmVmZWJmY2Y0YThhNzAyNWIwZTAtMTY1MDQ0ODIzNS5qcGcifQ:norddeutscher-rundfunk:M9tIBD7laDLn0TY8Noqz3TQpSz1MpVJusNud1OhIXf4?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR 1 Niedersachsen\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMThcL2Fzc2V0c1wvYzRcLzkyM1wvMTcxMDY2ZmJhZDhjNDMxYmFiMDQ0Y2U2MWM0Mzg3OTEtMTY1MDQ0ODI2MC5qcGcifQ:norddeutscher-rundfunk:ZzBYV5x3vQVySQGINjGO7Nn1rD2IBf2U-aVvkcGLUKQ?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR Kultur\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMTNcL2Fzc2V0c1wvNzlcLzgyNlwvZGIyN2FjYWU0Yzg2OGM3ZTI3NTQxZDkxNzE0MjAwNGEtMTY1MDQ0MjE4NC5qcGcifQ:norddeutscher-rundfunk:25eKPn2M3tFARjFh3t6R-bPmSLoLn9wyrjcjYV2PDUU?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR Schlager\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMTNcL2Fzc2V0c1wvMGJcLzMzNTFcLzE3ODVkMGRhMWE4ODgzYmI0NDY2MDVkM2YzZTg1MzFlLTE2NTIwODIyNzkuanBnIn0:norddeutscher-rundfunk:VwGM84mU2ky8KhCMjG-Pi_TspF6g3RlDWjXLax_ldtg?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR Blue\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMTNcL2Fzc2V0c1wvZTJcLzgyMFwvOWIzM2FlYTk0MTc0NWRhMjg0N2Q0ZDAzMjk1NTBiZDUtMTY1MDQ0MjI5My5qcGcifQ:norddeutscher-rundfunk:_MP-DSfjU7vkyKTBphNKu6e1DpkneV6XbqU0p0jMTTc?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR 2\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMThcL2Fzc2V0c1wvN2ZcLzkyNVwvYWZmN2M4NDRlODA5YzZiZTc2M2VmOTQ3NmJkYzk2MjQtMTY1MDQ0ODI3NC5qcGcifQ:norddeutscher-rundfunk:mMzYVpGonLkg92QxTPEk_FRMnQSvl2YLWJUn9AO1MCw?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR 1 Welle Nord\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMThcL2Fzc2V0c1wvYmVcLzkyNFwvOGU3YmYyNGMwODMyYTE3OWIxMWMwZmFjNTVjNDc1YjItMTY1MDQ0ODI2Ny5qcGcifQ:norddeutscher-rundfunk:_ErYbOOYoM-EZW2RkoB8hGeCVRp_QREQd88PJUsWVmA?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR 90,3\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMTNcL2Fzc2V0c1wvM2JcLzgxOVwvMmY0ZDczYTFkYWU1OWVmYmM4NWY3YzhlODgwNTgwYmMtMTY1MDQ0MjMwMy5qcGcifQ:norddeutscher-rundfunk:oCxfVO8es9CwKcWtE71_1X0jed2e7AuB6zWTIClXjQU?width=2400\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"NDR 1 Radio MV\" AND \"$broadcast_id_branding\" = \"\" THEN \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvYWNjb3VudHNcL2E1XC80MDAxMTgyXC9wcm9qZWN0c1wvMThcL2Fzc2V0c1wvY2NcLzkyMlwvNTQ5OWEyOGJkYmMxZTY2YjlmYTBhOTUyNmU0YzUzOGYtMTY1MDQ0ODI1NC5qcGcifQ:norddeutscher-rundfunk:XNlgWY1sGUwnrol98RYiWpBC3RxRi24hwB_pmYOjGxY?width=2400\"\n        --WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"N-JOY\" AND \"$broadcast_id_branding\" = \"\" THEN \"\"\n        --WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" AND \"$Bereich\" = \"N-JOY\" AND \"$broadcast_id_branding\" = \"\" THEN \"\"\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"NDR\" THEN '$NDR_default_image'\n        WHEN COUNT(*) = 0 AND \"$LRA\" = \"MDR\" THEN '$MDR_default_image'\n        ELSE MAX(coverart)\n    END AS coverart\nFROM image;",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "line",
            "value": "line"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "type",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT  \r\n  CASE \r\n    WHEN (DATE_DIFF(DATE('${__to:date}', \"Europe/Berlin\"), DATE('${__from:date}', \"Europe/Berlin\"), DAY) + 1) < 7 THEN \"bar\"\r\n    ELSE \"line\"\r\n  END;\r\n",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvZmlsZVwvUXhLeVZObTkxemdFTTkxcmhIbnAuanBnIn0:norddeutscher-rundfunk:180WVEn3aprq-qhbFSwOtq-KZKuRXLnHIopbn4yYmvk?width=2400",
            "value": "https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvZmlsZVwvUXhLeVZObTkxemdFTTkxcmhIbnAuanBnIn0:norddeutscher-rundfunk:180WVEn3aprq-qhbFSwOtq-KZKuRXLnHIopbn4yYmvk?width=2400"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "NDR_default_image",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \"https://cdn-assets-eu.frontify.com/s3/frontify-enterprise-files-eu/eyJwYXRoIjoibm9yZGRldXRzY2hlci1ydW5kZnVua1wvZmlsZVwvUXhLeVZObTkxemdFTTkxcmhIbnAuanBnIn0:norddeutscher-rundfunk:180WVEn3aprq-qhbFSwOtq-KZKuRXLnHIopbn4yYmvk?width=2400\" -- rechteckiges Social Media NDR\n--\"https://api.ardmediathek.de/image-service/images/urn:ard:image:02f00fc2617f6b55?w=256&ch=e14976ec4f71faec\" Quadratische NDR Dachmarke\n--\"https://www.ndr.de/der_ndr/unternehmen/logoihrndr100_v-contentxl.jpg\" Rechteckickes NDR Logo",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "21.10.2024 | 08:00 Uhr",
            "value": "21.10.2024 | 08:00 Uhr"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "lastUpdate",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \nCASE MAX(tmstp)\n  WHEN NULL THEN \"N/A\"\n  ELSE FORMAT_DATETIME(\"%d.%m.%Y | %H:%M Uhr\", DATETIME((TIMESTAMP(MAX(tmstp))),\"Europe/Berlin\") )\n  END\nFROM `ndr-code-bi-dashboard.Piano.NDR_podcast_episode_daily_f`\nWHERE date > DATE_SUB(CURRENT_DATE(), INTERVAL 10 day)\nAND CASE WHEN \"$Bereich\" = \"Alle Bereiche\" THEN TRUE\nELSE CASE WHEN \"$Podcast\" = \"All titles\" THEN TRUE\nELSE broadcast_id = \"${broadcast_id_branding}\" END END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "",
            "value": ""
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "mapping_dataset",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$Podcast\"\r\nWHEN \"All titles\" THEN \"\"\r\nELSE \"_mapped\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "https://share.ard-zdf-box.de/apps/files_sharing/publicpreview/Sxorbc6WLzk84iy?file=/&fileId=257042098&x=2132&y=1104&a=true&etag=31cb74f497586f722c788a3861963167",
            "value": "https://share.ard-zdf-box.de/apps/files_sharing/publicpreview/Sxorbc6WLzk84iy?file=/&fileId=257042098&x=2132&y=1104&a=true&etag=31cb74f497586f722c788a3861963167"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "MDR_default_image",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "-- SELECT \"https://cdn.mdr.de/presse/logos/mdr-dachmarke-100_v-variantBig16x9_wm-true_zc-ecbbafc6.png?version=17833\"\nSELECT \"https://share.ard-zdf-box.de/apps/files_sharing/publicpreview/Sxorbc6WLzk84iy?file=/&fileId=257042098&x=2132&y=1104&a=true&etag=31cb74f497586f722c788a3861963167\"",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "None",
            "value": "None"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "description": "Verwenden Sie das Dropdown-Menü \"AllePodcasts\". In diesem Menü finden Sie alle von uns geführten Podcasts. Soll diese Option nicht verwendet werden, muss der Wert auf \"None\" gesetzt werden.",
          "includeAll": false,
          "label": "Podcastsuche:",
          "name": "AllePodcasts",
          "options": [],
          "query": {
            "dataset": "Piano",
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT podcast_title FROM(\n(SELECT DISTINCT REPLACE(podcast_title,'\"','') AS podcast_title,  1 AS sort  FROM $profiles_dataset\nORDER BY sort,podcast_title DESC\n)\nUNION ALL (SELECT \"None\", -1 as sort)\n)\nORDER BY SORT, LOWER(podcast_title) ASC\n\n",
            "sql": {
              "columns": [
                {
                  "parameters": [
                    {
                      "name": "podcast_title",
                      "type": "functionParameter"
                    }
                  ],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            },
            "table": "NDR_spotify_podcasts"
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        },
        {
          "current": {
            "text": "30",
            "value": "30"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "number_of_days",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "WITH toDate AS(\r\n  SELECT CASE \r\n  WHEN DATE(TIMESTAMP('${__to:date:iso}'),'Europe/Berlin') >= DATE_SUB(CURRENT_DATE(), INTERVAL 5 DAY) THEN DATE_SUB(CURRENT_DATE(), INTERVAL 5 DAY)\r\n  ELSE DATE(TIMESTAMP('${__to:date:iso}'),'Europe/Berlin') END AS bisDatum\r\n)\r\nSELECT CAST(DATE_DIFF(bisDatum,DATE(TIMESTAMP('${__from:date:iso}'),'Europe/Berlin'), DAY) + 1 AS STRING)\r\nFROM toDate",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "",
            "value": ""
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "dataset_suffix",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\nWHEN \"NDR\" THEN \"_mapped\"\nWHEN \"MDR\" THEN \"\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Piano.MDR_podcast_episode_daily_f",
            "value": "Piano.MDR_podcast_episode_daily_f"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "episode_dataset",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\nWHEN \"NDR\" THEN \"Piano.NDR_podcast_episode_daily_f_mapped\"\nWHEN \"MDR\" THEN \"Piano.MDR_podcast_episode_spotify_missing_data_2_debug\" END",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Piano.MDR_podcast_platform_daily_f",
            "value": "Piano.MDR_podcast_platform_daily_f"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "platform_dataset",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\nWHEN \"NDR\" THEN \"Piano.NDR_podcast_platform_daily_f_mapped\"\nWHEN \"MDR\" THEN \"Piano.MDR_podcast_platform_spotify_missing_data_2_debug\" END",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Piano.MDR_podcast_profiles_mapping",
            "value": "Piano.MDR_podcast_profiles_mapping"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "profiles_dataset",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\nWHEN \"NDR\" THEN \"Piano.NDR_podcast_profiles\"\nWHEN \"MDR\" THEN \"Piano.MDR_podcast_profiles_mapping\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "## Der ausgewählte Zeitraum lautet: 01.09.24 - 30.09.24 ",
            "value": "## Der ausgewählte Zeitraum lautet: 01.09.24 - 30.09.24 "
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "hinweis",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE CONTAINS_SUBSTR(\"\"\"${zeitraum}\"\"\", \"DATE_ADD\")\nWHEN True  THEN \"## Hinweis: Für den ausgewählten Zeitraum liegen keine Daten vor.\"\nELSE \"\"\"## Der ausgewählte Zeitraum lautet: $fromDay - $toDay \"\"\"\nEND\n\n--Um Daten auswerten zu können, bitte gestern oder größere Zeiträume auswählen.",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "01.09.24",
            "value": "01.09.24"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "fromDay",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "--SELECT FORMAT_DATE(\"%d.%m.%y\",DATE(TIMESTAMP('${__from:date:iso}'),'Europe/Berlin'))\r\n\r\nWITH min_date AS(\r\n  SELECT MIN(date) as m_date FROM $episode_dataset\r\n  WHERE CASE \"$Bereich\"\r\n  WHEN \"Alle Bereiche\" THEN TRUE\r\n  ELSE branding = \"$Bereich\" END\r\n  AND CASE \"$Podcast\"\r\n  WHEN \"All titles\" THEN TRUE\r\n  ELSE podcast_title = \"$Podcast\" END\r\n)\r\nSELECT FORMAT_DATE(\"%d.%m.%y\",from_day) FROM(\r\nSELECT CASE \r\nWHEN m_date >= DATE(TIMESTAMP('${__from:date:iso}'),'Europe/Berlin') THEN m_date\r\nELSE DATE(TIMESTAMP('${__from:date:iso}'),'Europe/Berlin') END AS from_day\r\nFROM min_date\r\n)",
            "refId": "tempvar",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "30.09.24",
            "value": "30.09.24"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "toDay_NDR",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \n-- case: last x<24 hours\n    WHEN TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), HOUR) = 24 AND EXTRACT(DAY FROM DATETIME('${__from:date:iso}', \"Europe/Berlin\")) != EXTRACT(DAY FROM DATETIME('${__to:date:iso}', \"Europe/Berlin\")) OR TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), MINUTE) < 1439\n    THEN   FORMAT_DATE(\"%d.%m.%y\",DATE_ADD(CURRENT_DATE,INTERVAL 1 DAY))\n-- SECOND case: today or bigger\n    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 4 DAY) AND EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= \"$datenstand_not_formated\"\n    THEN \"$datenstand\"\n    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 4 DAY) AND EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) < \"$datenstand_not_formated\"\n    THEN FORMAT_DATE(\"%d.%m.%y\",DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 5 DAY))\nELSE CASE \nWHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= \"$datenstand_not_formated\" THEN \"$datenstand\"\nELSE FORMAT_DATE(\"%d.%m.%y\",DATE_SUB(DATE('${__to:date}', \"Europe/Berlin\"), INTERVAL 0 DAY))\nEND \nEND\n--    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 4 DAY) \n--    THEN FORMAT_DATE(\"%d.%m.%y\",DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 5 DAY))\n--ELSE FORMAT_DATE(\"%d.%m.%y\",DATE_SUB(DATE('${__to:date}', \"Europe/Berlin\"), INTERVAL 0 DAY))\n--END \n\n",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('2024-08-31T22:00:00.000Z', \"Europe/Berlin\") AND DATE('2024-09-30T21:59:59.999Z', \"Europe/Berlin\"))",
            "value": "(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('2024-08-31T22:00:00.000Z', \"Europe/Berlin\") AND DATE('2024-09-30T21:59:59.999Z', \"Europe/Berlin\"))"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "zeitraum_NDR",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": " SELECT CASE \n\n       --  case: \"Last 24 HOURS \"\n    WHEN DATE('${__from:date:iso}', \"Europe/Berlin\") >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 4 DAY)  OR TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), HOUR) = 24 AND EXTRACT(DAY FROM DATETIME('${__from:date:iso}', \"Europe/Berlin\")) != EXTRACT(DAY FROM DATETIME('${__to:date:iso}', \"Europe/Berlin\")) OR TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), MINUTE) < 1439\n    THEN \"\"\"(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\"))  = DATE_ADD(CURRENT_DATE,INTERVAL 1 DAY))\"\"\"\n    -- case: CURRENT_DATE()\n    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 4 DAY) \n    THEN  \"\"\"(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE_SUB(\"$HeuteDatum\", INTERVAL 5 DAY))\"\"\"\n    ELSE  \"\"\"(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\"))\"\"\"\n\n    END \n",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "2024-10-21",
            "value": "2024-10-21"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "HeuteDatum",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CURRENT_DATE(\"Europe/Berlin\")",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "TRUE = TRUE",
            "value": "TRUE = TRUE"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "episodenschnitt_condition",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\r\nWHEN \"NDR\" THEN \"episodenschnitt = 1\"\r\nELSE \"TRUE = TRUE\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Podcast-Daten werden mit 5 Tagen Verzögerung zur Verfügung gestellt.",
            "value": "Podcast-Daten werden mit 5 Tagen Verzögerung zur Verfügung gestellt."
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "delay_text",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\r\nWHEN \"NDR\" THEN \"Podcast-Daten werden mit 5 Tagen Verzögerung zur Verfügung gestellt.\"\r\nWHEN \"MDR\" THEN \"Podcast-Daten werden mit 5 Tagen Verzögerung zur Verfügung gestellt.\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('2024-08-31T22:00:00.000Z', \"Europe/Berlin\") AND DATE('2024-09-30T21:59:59.999Z', \"Europe/Berlin\"))",
            "value": "(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('2024-08-31T22:00:00.000Z', \"Europe/Berlin\") AND DATE('2024-09-30T21:59:59.999Z', \"Europe/Berlin\"))"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "zeitraum_MDR",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": " SELECT CASE \n\n       --  case: \"Last 24 HOURS \"\n    WHEN DATE('${__from:date:iso}', \"Europe/Berlin\") >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 2 DAY)  OR TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), HOUR) = 24 AND EXTRACT(DAY FROM DATETIME('${__from:date:iso}', \"Europe/Berlin\")) != EXTRACT(DAY FROM DATETIME('${__to:date:iso}', \"Europe/Berlin\")) OR TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), MINUTE) < 1439\n    THEN \"\"\"(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\"))  = DATE_ADD(CURRENT_DATE,INTERVAL 1 DAY))\"\"\"\n    -- case: CURRENT_DATE()\n    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 2 DAY) \n    THEN  \"\"\"(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE_SUB(\"$HeuteDatum\", INTERVAL 3 DAY))\"\"\"\n    ELSE  \"\"\"(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('${__from:date}', \"Europe/Berlin\") AND DATE('${__to:date}', \"Europe/Berlin\"))\"\"\"\n\n    END \n",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('2024-08-31T22:00:00.000Z', \"Europe/Berlin\") AND DATE('2024-09-30T21:59:59.999Z', \"Europe/Berlin\"))",
            "value": "(EXTRACT(DATE from DATETIME(time, \"Europe/Berlin\")) BETWEEN DATE('2024-08-31T22:00:00.000Z', \"Europe/Berlin\") AND DATE('2024-09-30T21:59:59.999Z', \"Europe/Berlin\"))"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "zeitraum",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\r\nWHEN \"NDR\" THEN \"\"\"$zeitraum_NDR\"\"\"\r\nWHEN \"MDR\" THEN \"\"\"$zeitraum_MDR\"\"\"\r\nEND",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "30.09.24",
            "value": "30.09.24"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "toDay_MDR",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \n-- case: last x<24 hours\n    WHEN TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), HOUR) = 24 AND EXTRACT(DAY FROM DATETIME('${__from:date:iso}', \"Europe/Berlin\")) != EXTRACT(DAY FROM DATETIME('${__to:date:iso}', \"Europe/Berlin\")) OR TIMESTAMP_DIFF(TIMESTAMP('${__to:date:iso}'), TIMESTAMP('${__from:date:iso}'), MINUTE) < 1439\n    THEN   FORMAT_DATE(\"%d.%m.%y\",DATE_ADD(CURRENT_DATE,INTERVAL 1 DAY))\n-- SECOND case: today or bigger\n    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 2 DAY) AND EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= \"$datenstand_not_formated\"\n    THEN \"$datenstand\"\n    WHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 2 DAY) AND EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) < \"$datenstand_not_formated\"\n    THEN FORMAT_DATE(\"%d.%m.%y\",DATE_SUB(CURRENT_DATE(\"Europe/Berlin\"), INTERVAL 3 DAY))\nELSE CASE \nWHEN EXTRACT(DATE FROM TIMESTAMP('${__to:date:iso}')) >= \"$datenstand_not_formated\" THEN \"$datenstand\"\nELSE FORMAT_DATE(\"%d.%m.%y\",DATE_SUB(DATE('${__to:date}', \"Europe/Berlin\"), INTERVAL 0 DAY))\nEND \nEND\n\n--FORMAT_DATETIME(\"%d.%m.%Y\", )\n",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 2,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "30.09.24",
            "value": "30.09.24"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "toDay",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT CASE \"$LRA\"\r\nWHEN \"NDR\" THEN \"\"\"$toDay_NDR\"\"\"\r\nWHEN \"MDR\" THEN \"\"\"$toDay_MDR\"\"\" END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "2024-10-16",
            "value": "2024-10-16"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "datenstand_not_formated",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT \nDATE(MAX(date))\nFROM $episode_dataset\nWHERE CASE WHEN \"$Bereich\" = \"Alle Bereiche\" THEN TRUE\nELSE CASE WHEN \"$Podcast\" = \"All titles\" THEN TRUE\nELSE broadcast_id = \"${broadcast_id_branding}\" END END",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "skipUrlSync": true,
          "type": "query"
        },
        {
          "current": {
            "text": "Alle Plattformen",
            "value": "Alle Plattformen"
          },
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "qUaUqEk4k"
          },
          "definition": "",
          "hide": 2,
          "includeAll": false,
          "name": "Plattformen",
          "options": [],
          "query": {
            "editorMode": "code",
            "format": 1,
            "location": "europe-west3",
            "project": "ndr-code-bi-dashboard",
            "rawQuery": true,
            "rawSql": "SELECT platform FROM (SELECT DISTINCT platform, 1 as sort \r\nFROM   $platform_dataset\r\nUNION DISTINCT\r\nSELECT \"Alle Plattformen\", 0 as sort)\r\nWHERE platform != \"\"\r\nOrder by sort, platform ASC",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "refresh": 1,
          "regex": "",
          "type": "query"
        }
      ]
    },
    "time": {
      "from": "2021-12-31T23:00:00.000Z",
      "to": "2023-08-31T21:59:59.000Z"
    },
    "timepicker": {},
    "timezone": "",
    "title": "Podcast MDR Spotify Debug",
    "uid": "ce1j4g0akg35sb",
    "version": 8,
    "weekStart": ""
  }
}
